// type StmtOutcome = fails, returns, breaks, falls_through;

type CodeOutcome = fails, returns, breaks_loop, exits_block, falls_through;

<fails>         fails         = :fails;
<returns>       returns       = :returns;
<breaks_loop>   breaks_loop   = :breaks_loop;
<exits_block>   exits_block   = :exits_block;
<falls_through> falls_through = :falls_through;


CodeOutcome+ code_outcomes(BasicInstr) = {:fails, falls_through};


CodeOutcome+ code_outcomes(JumpInstr):
  break_loop    = {breaks_loop},
  exit_block    = {exits_block},
  ret_val()     = {returns},
  terminate     = {fails};


CodeOutcome+ code_outcomes(CompInstr instr):
  branch()            = nonempty(code_outcomes(instr.when_true) & code_outcomes(instr.when_false)),
  repeat(is?)         = loop_outcomes(is),
  execute_block(is?)  = block_outcomes(is),
  cls_scope()         = code_outcomes(instr.body);


CodeOutcome+ loop_outcomes([Instr^] body)
{
  body_outcomes = code_outcomes(body);
  may_break = in(breaks_loop, body_outcomes);
  return nonempty((body_outcomes - {breaks_loop, falls_through}) & {if may_break then falls_through else fails});
}


CodeOutcome+ block_outcomes([Instr^] body)
{
  body_outcomes = code_outcomes(body);
  may_exit = in(exits_block, body_outcomes);
  return nonempty((body_outcomes - {exits_block}) & {falls_through if may_exit});
}


CodeOutcome+ code_outcomes([Instr] instrs)
{
  outcomes = {falls_through};
  for (instr : instrs)
    assert in(falls_through, outcomes);
    outcomes = (outcomes - {falls_through}) & code_outcomes(instr);
    break if not in(falls_through, outcomes);
  ;
  return nonempty(outcomes);
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

T* retrieve_from_nested_low_level_exprs(BoolExpr expr, (AnyTypeExpr -> T*) retrieve):
  AtomicBoolExpr        = {},
  is_symb(e?)           = retrieve(e),
  is_int(e?)            = retrieve(e),
  is_float(e?)          = retrieve(e),
  is_ne_set(e?)         = retrieve(e),
  is_ne_seq(e?)         = retrieve(e),
  is_ne_map(e?)         = retrieve(e),
  is_tagged_obj(e?)     = retrieve(e),
  has_elem()            = retrieve(expr.set) & retrieve(expr.elem),
  is_eq_bool()          = retrieve(expr.expr1) & retrieve(expr.expr2),
  is_eq_int()           = retrieve(expr.expr1) & retrieve(expr.expr2),
  is_eq()               = retrieve(expr.expr1) & retrieve(expr.expr2),
  is_gt()               = retrieve(expr.expr1) & retrieve(expr.expr2),
  is_ge()               = retrieve(expr.expr1) & retrieve(expr.expr2),
  is_lt()               = retrieve(expr.expr1) & retrieve(expr.expr2),
  is_le()               = retrieve(expr.expr1) & retrieve(expr.expr2),
  inline_is_eq()        = retrieve(expr.expr),
  is_out_of_range()     = {},
  neg(e?)               = retrieve(e),
  and(es?)              = seq_union([retrieve(e) : e <- es]),
  or(es?)               = seq_union([retrieve(e) : e <- es]),
  and_then(es?)         = seq_union([retrieve(e) : e <- es]),
  or_else(es?)          = seq_union([retrieve(e) : e <- es]),
  eval_bool_fn()        = seq_union([retrieve(e) : e <- expr.params]);


T* retrieve_from_nested_low_level_exprs(IntExpr expr, (AnyTypeExpr -> T*) retrieve):
  Int                 = {},
  IntVar              = {},
  get_int_val(e?)     = retrieve(e),
  get_set_size(e?)    = retrieve(e),
  get_seq_len(e?)     = retrieve(e),
  get_map_size(e?)    = retrieve(e),
  minus(e?)           = retrieve(e),
  add()               = retrieve(expr.val1) & retrieve(expr.val2),
  sub()               = retrieve(expr.val1) & retrieve(expr.val2),
  mult()              = retrieve(expr.val1) & retrieve(expr.val2),
  div()               = retrieve(expr.val1) & retrieve(expr.val2),
  mod()               = retrieve(expr.val1) & retrieve(expr.val2),
  mantissa(e?)        = retrieve(e),
  dec_exp(e?)         = retrieve(e),
  rand_nat(e?)        = retrieve(e),
  unique_nat          = {},
  ticks               = {};


T* retrieve_from_nested_low_level_exprs(InlineObj, (AnyTypeExpr -> T*) retrieve) = {};


T* retrieve_from_nested_low_level_exprs(ObjVar v, (AnyTypeExpr -> T*) retrieve) = {};


T* retrieve_from_nested_low_level_exprs(NatObjOp expr, (AnyTypeExpr -> T*) retrieve):
  at()                = retrieve(expr.seq) & retrieve(expr.idx),
  get_tag(e?)         = retrieve(e),
  get_inner_obj(e?)   = retrieve(e),
  to_obj(e?)          = retrieve(e),
  obj_neg(e?)         = retrieve(e),
  to_symb(e?)         = retrieve(e),
  get_curr_obj()      = {},
  get_curr_key()      = {},
  get_curr_value()    = {},
  rand_elem(e?)       = retrieve(e);


T* retrieve_from_nested_low_level_exprs(FloatExpr expr, (AnyTypeExpr -> T*) retrieve):
  mk_float()          = {},
  neg_float()         = retrieve(expr.value),
  add_floats()        = seq_union([retrieve(e) : e <- expr.values]),
  sub_floats()        = seq_union([retrieve(e) : e <- expr.values]),
  mult_floats()       = seq_union([retrieve(e) : e <- expr.values]),
  div_floats()        = seq_union([retrieve(e) : e <- expr.values]),
  square_root()       = retrieve(expr.value),
  ceiling_op()        = retrieve(expr.value),
  int_to_float()      = retrieve(expr.value);


T* retrieve_from_nested_low_level_exprs(RefObjExpr expr, (AnyTypeExpr -> T*) retrieve):
  mk_set_from_stream()    = {},
  mk_set()                = retrieve(expr.size),
  mk_seq_from_stream()    = {},
  mk_seq()                = retrieve(expr.size),
  mk_map_from_streams()   = {},
  mk_map()                = retrieve(expr.size),
  mk_tagged_obj()         = retrieve(expr.tag) & retrieve(expr.obj),
  mk_array()              = retrieve(expr.size) & retrieve(expr.value),
  get_seq_slice()         = retrieve(expr.seq) & retrieve(expr.idx_first) & retrieve(expr.len),
  append_to_seq()         = retrieve(expr.seq) & retrieve(expr.new_elem),
  join_seqs()             = retrieve(expr.left) & retrieve(expr.right),
  join_mult_seqs()        = retrieve(expr.seqs),
  rev_seq()               = retrieve(expr.seq),
  merge_sets()            = retrieve(expr.sets),
  merge_maps()            = retrieve(expr.maps),
  seq_to_set()            = retrieve(expr.seq),
  seq_to_mset()           = retrieve(expr.seq),
  list_to_seq()           = retrieve(expr.list),
  internal_sort()         = retrieve(expr.set),
  symb_to_str(e?)         = retrieve(e);
