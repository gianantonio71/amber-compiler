type Trie[T1, T2] = [T1 -> (Maybe[T2], Trie[T1, T2])];


Trie[T1, T2] trie([T1+ -> T2] map)
{
  keys = [ks[0] : v @ ks <- map];
  terminals = [k -> if has_key(map, (k)) then just(map[(k)]) else nil : k <- keys];
  continuations = [[ks[0] -> [nonempty(right_subseq(ks, 1)) -> v]] : v @ ks <- map, length(ks) > 1];
  merged_continuations = [k -> merge(submaps) : submaps @ k <- merge_values(continuations)];
  trie = [k -> (t, trie(lookup(merged_continuations, k, [:]))) : t @ k <- terminals];
  return trie;
}


(Maybe[T2], Nat) trie_lookup(Trie[T1, T2] trie, T1+ seq)
{
  head = head(seq);
  tail = tail(seq);
  return (nil, 0) if not has_key(trie, head);
  maybe_terminal, subtrie = trie[head];
  return (maybe_terminal, 1) if tail == ();
  subres, consumed = trie_lookup(subtrie, tail);
  return if subres != nil then (subres, nat(consumed+1)) else (maybe_terminal, 1);
}

