
type Obj        = object(Any);

type SymbObj    = object(Atom);
type IntObj     = object(Int);
type LeafObj    = object(<Atom, Int>);

///////////////////////////////////////////////////////////////////////////////

type BasicTypeSymbol  = type_symbol(Atom);
type ParTypeSymbol    = par_type_symbol(symbol: BasicTypeSymbol, params: [UserType^]);
type TypeSymbol       = BasicTypeSymbol, ParTypeSymbol;

type TypeName         = type_name(symbol: BasicTypeSymbol, arity: Nat);

///////////////////////////////////////////////////////////////////////////////

type Type           = LeafType, TypeVar, SelfPretype, CompType, UnionType, RecType;

type VoidType       = void_type;
type ClosedType     = void_type, Type; //## FIND BETTER NAME

type SymbType       = symb_type(SymbObj);

type IntType        = integer, low_ints(max: Int), high_ints(min: Int), int_range(min: Int, size: NzNat);

type FloatType      = float_type;

type LeafType       = atom_type, SymbType, IntType, FloatType, empty_seq_type, empty_set_type, empty_map_type;

type SelfPretype    = self, self(Nat);

type TypeVar        = type_var(<Atom, Nat>);

type NeSeqType      = ne_seq_type(elem_type: Type);
type SeqType        = empty_seq_type, NeSeqType;

type NeSetType      = ne_set_type(elem_type: Type);
type SetType        = empty_set_type, NeSetType;

type NeMapType      = ne_map_type(key_type: Type, value_type: Type);
type MapType        = empty_map_type, NeMapType;

type RecordType     = record_type((SymbObj => (type: Type, optional: Bool))); //## THE EMPTY MAP SHOULD NOT BE INCLUDED. OR SHOULD IT?

type TupleType      = tuple_type([Type^]);

type TagType        = SymbType, atom_type; //, TypeVar; //## THE CODE HASN'T BEEN UPDATED YET
type TagObjType     = tag_obj_type(tag_type: TagType, obj_type: Type);

type CompType       = NeSeqType, NeSetType, NeMapType, RecordType, TupleType, TagObjType; //## FIND BETTER NAME

type UnionType      = union_type(Type+);

type SelfRecType    = self_rec_type(Type);

type MutRecType     = mut_rec_type(index: Nat, types: [Type^]);

type RecType        = SelfRecType, MutRecType;

///////////////////////////////////////////////////////////////////////////////

type ClsType  = cls_type(in_types: [Type^], out_type: Type);
type ExtType  = Type, ClsType;

type FnType   = fn_type(
                  params:       [ExtType],
                  named_params: (<named_par(Atom)> => ExtType),
                  ret_type:     Type
                );

///////////////////////////////////////////////////////////////////////////////

type TypeRef  = type_ref(TypeSymbol);

type UserType = LeafType,
                TypeRef,
                TypeVar, 
                ne_seq_type(elem_type: UserType),
                ne_set_type(elem_type: UserType),
                ne_map_type(key_type: UserType, value_type: UserType),
                record_type((SymbObj => (type: UserType, optional: Bool))),
                tuple_type([UserType^]),
                tag_obj_type(tag_type: TagType, obj_type: UserType),
                union_type(UserType+);

///////////////////////////////////////////////////////////////////////////////

type UserClsType  = cls_type(in_types: [UserType^], out_type: UserType);
type UserExtType  = UserType, UserClsType;

///////////////////////////////////////////////////////////////////////////////

type SubtypeDecl  = subtype_decl(subtype: UserType, supertype: UserType);

///////////////////////////////////////////////////////////////////////////////

type Operator = plus, minus, star, slash, exp, amp, lower, greater, lower_eq, greater_eq, brackets;

type BuiltIn  = neg, add, sub, mult, div, mod, lt, le, gt, ge, str, symb, at, len, slice, cat, mcat,
                set, rev, mset, isort, list_to_seq, tag, obj, in, has_key, lookup, union, merge,
                fneg, fadd, fsub, fmult, fdiv, fsqrt, floor, ceiling, float, mantissa, dec_exp,
                rand_nat, rand_elem, counter, ticks;

type FnSymbol = fn_symbol(Atom),
                op_symbol(Operator),
                //## BUG: AN FnSymbol IS NOT ENOUGH TO IDENTIFY WHICH WAS THE OUTER FUNCTION.
                //## TWO FUNCTIONS WITH THE SAME NAME COULD CONTAIN INNER FUNCTIONS WITH THE SAME NAME
                nested_fn_symbol(outer: FnSymbol, inner: FnSymbol),
                unique_fn_symbol(symbol: FnSymbol, id: Nat); //## THE symbol: FIELD SHOULD ONLY CONTAIN EITHER fn_symbol() OR op_symbol()

type Var      = var(Atom), fn_par(Nat), unique_var(Nat), NamedPar; //## BAD
type NamedPar = named_par(Atom);

type ClsVar   = cls_var(<Atom, Nat>); //## BAD: THERE SHOULD BE A NAMED VERSION OF ClsVar

type CondExpr = cond_expr(expr: Expr, cond: Expr);

type SubExpr  = Expr, CondExpr;

type FloatLit = float_lit(mantissa: Int, dec_exp: Int);

type Expr     = LeafObj, //## UPDATE ALL REFERENCES

                FloatLit,

                nat_range_expr(upper_bound: Expr, bound_included: Bool),

                set_expr(SubExpr*),
                seq_expr([SubExpr]),
                tuple_expr([Expr^]),
                seq_tail_expr(seq: Expr, tail: [Expr^]),
                map_expr((key: Expr, value: Expr, cond: Expr?)*),
                tag_obj_expr(tag: Expr, obj: Expr),

                Var,

                //## CAN LOCAL FUNCTIONS HAVE NAMED PARAMETERS? IT WOULDN'T MAKE MUCH SENSE,
                //## BUT THE DATA STRUCTURE AND THE SYNTAX ALLOW IT. MAKE SURE IT'S CHECHED
                //## IN THE WELL-FORMEDNESS CHECKING LAYER.
                fn_call(name: FnSymbol, params: [ExtExpr], named_params: (<named_par(Atom)> => ExtExpr)), //## BAD
                cls_call(name: <ClsVar, NamedPar>, params: [Expr]),  //## BAD: THERE SHOULD BE A NAMED VERSION OF ClsVar
                builtin_call(name: BuiltIn, params: [Expr]), //## CAN A BUILTIN HAVE NO ARGUMENTS?

                and_expr(left: Expr, right: Expr), //## NOT SURE HERE
                or_expr(left: Expr, right: Expr),  //## NOT SURE HERE
                not_expr(Expr),                    //## NOT SURE HERE
                
                eq(left: Expr, right: Expr),
                
                membership(obj: Expr, type: UserType),
                cast_expr(expr: Expr, type: UserType),

                accessor(expr: Expr, field: SymbObj),      //## SHOULD <field> BE AN OBJECT OR JUST A PLAIN SYMBOL?
                accessor_test(expr: Expr, field: SymbObj), //## DITTO

                if_expr(cond: Expr, then: Expr, else: Expr),
                match_expr(exprs: [Expr^], cases: [(ptrns: [Pattern^], expr: Expr)^]),
                do_expr([Statement^]),

                ex_qual(source: Clause, sel_expr: Expr?),
                set_comp(expr: Expr, source: Clause, sel_expr: Expr?),
                map_comp(key_expr: Expr, value_expr: Expr, source: Clause, sel_expr: Expr?),

                //## ISSUES: IF IT'S AN INTEGER LOOP, idx_var SHOULD NOT BE PRESENT AND vars SHOULD CONTAIN ONLY ONE ELEMENT
                seq_comp(
                  expr:           Expr,
                  vars:           [Var^],
                  idx_var:        Var?,
                  src_expr:       Expr, //## BAD: src_expr IS NOT A GOOD NAME ANYMORE, BECAUSE IT MIGHT BE AN UPPER BOUND
                  src_expr_type:  <sequence, upper_bound(included: Bool)>,
                  sel_expr:       Expr?
                );

///////////////////////////////////////////////////////////////////////////////

//type Closure  = closure(params: [var(Atom)^], expr: Expr, captured_vars: Var*);

type ClsExpr  = ClsVar,
                fn_ptr(name: FnSymbol, arity: NzNat),
                cls_expr(params: [<var(Atom), nil>^], expr: Expr);

type ExtExpr  = Expr, ClsExpr;

///////////////////////////////////////////////////////////////////////////////

type Pattern  = ptrn_symbol, //## THE CORRESPONDING TYPE IS CALLED atom_type. RENAME ONE OF THE TWO?
                ptrn_float,
                ptrn_empty_set,
                ptrn_ne_set,
                ptrn_empty_seq,
                ptrn_ne_seq,
                ptrn_empty_map,
                ptrn_ne_map,
                ptrn_any,
                ptrn_symbol(SymbObj),
                ptrn_integer(IntType),
                ptrn_tag_obj(tag: TagPtrn, obj: Pattern),
                ptrn_var(var: Var, ptrn: Pattern),
                //## REMEMBER TO ENFORCE THE RULES BELOW. AT LEAST ONE PIECE OF CODE,
                //## THE ONE THAT CALCULATES A SUPERSET OF THE INTERSECTION BETWEEN A
                //## TYPE AND A PATTERN DEPENDS ON THE FIRST ASSUMPTION
                // Patterns in a union must be pseudotype-compatible.
                // They must also define the same set of variables
                ptrn_union(Pattern+);


type TagPtrn  = ptrn_symbol, ptrn_symbol(SymbObj), ptrn_var(var: Var, ptrn: ptrn_symbol);

////////////////////////////////////////////////////////////////////////////////

type Clause   = in_clause(ptrn: Pattern, src: Expr),
                map_in_clause(key_ptrn: Pattern, value_ptrn: Pattern, src: Expr),
                and_clause(left: Clause, right: Clause),
                or_clause(left: Clause, right: Clause);

////////////////////////////////////////////////////////////////////////////////

type Statement  = assignment_stmt(vars: [Var^], value: Expr),
                  return_stmt(Expr),
                  if_stmt(cond: Expr, body: [Statement^], else: [Statement]),
                  loop_stmt([Statement^]),
                  foreach_stmt(vars: [Var^], idx_var: Var?, values: Expr, body: [Statement^]),
                  for_stmt(var: Var?, start_val: Expr, end_val: Expr, end_val_incl: Bool, body: [Statement^]),
                  let_stmt(asgnms: (NamedPar => Expr), body: [Statement^]), //## BAD
                  break_stmt,
                  fail_stmt,
                  assert_stmt(Expr),
                  print_stmt(Expr),
                  imp_update_stmt(obj: Var, idx: Expr, value: Expr),
                  //## BAD: MIXING PURE AND IMPURE STATEMENTS
                  return_stmt,
                  proc_call(res_var: Var?, proc_name: ProcSymbol, params: [Expr]);

///////////////////////////////////////////////////////////////////////////////

//type Signature  = signature(
//                    name:     FnSymbol,
//                    params:   [Type],
//                    res_type: Type
//                  );

type FnFrmPar   = scalar_par(var: var(Atom)?, type: UserType?),
                  non_scalar_par(var: ClsVar?, arity: NzNat, type: UserClsType?); //## BAD: THE VAR AND TYPE FIELDS HERE ARE OPTIONAL ONLY TO ALLOW MERGING OF FUNCTIONS WITH DIFFERENT ARITIES. ALSO, ARITY IS REDUNDANT WHEN TYPE IS PRESENT. CHECK THIS IN THE WELL-FORMEDNESS CHECKING LAYER. ALSO, REALLY BAD NAME.

type FnDef      = fn_def(
                    name:         FnSymbol,
                    params:       [FnFrmPar], //## BAD BAD
                    named_params: (NamedPar => UserExtType), //## BAD: THE TYPE IS TOO LOOSE. INCLUDE A CHECK IN THE WELL-FORMEDNESS CHECKING LAYER
                    res_type:     UserType?,
                    expr:         Expr
                    //impl_env: Signature*,
                  );

type ProcSymbol = proc_symbol(Atom);

//## SERIOUSLY, FIND BETTER NAME...
type ProcDef2   = proc_def(
                    name:       ProcSymbol,
                    params:     [(var: Var, type: UserType)],
                    res_type:   Maybe[UserType],
                    body:       [Statement]
                  );

type Program    = program(
                    tdefs:          (TypeSymbol => UserType),
                    anon_tdefs:     (TypeName => Type),
                    subtype_decls:  SubtypeDecl*,
                    fndefs:         FnDef*,
                    proc_defs:      ProcDef2*
                  );
