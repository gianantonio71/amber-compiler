Atom name(StdVar):    var(a?)       = a;
Atom name(NamedArg):  named_arg(a?) = a;
Atom name(MembVar):   memb_var(a?)  = a;
Atom name(AutoVar):   auto_var(a?)  = a;

Atom unsafe_name(Var):
  var(a?)       = a,
  fn_par()      = {fail;},
  named_arg(a?) = a,
  cls_ext_par() = {fail;},
  memb_var(a?)  = a;

////////////////////////////////////////////////////////////////////////////////

Bool is_cond_expr(SubExpr):
  CondExpr  = true,
  Expr      = false;

Bool is_scalar_expr(AnyExpr):
  Expr      = true,
  ClsExpr   = false;


[Type] params(TypeSymbol ts):
  type_symbol()     = [],
  par_type_symbol() = ts.params;


Int max(<int_range(min: Int, size: NzNat)> t) = t.min + t.size - 1; //## BAD BAD
Int max(<low_ints(max: Int)> t) = t.max;


TypeName type_symb_to_name(TypeSymbol ts):
  BasicTypeSymbol   = type_name(symbol: ts, arity: 0),
  par_type_symbol() = type_name(symbol: ts.symbol, arity: length(ts.params));

////////////////////////////////////////////////////////////////////////////////

FnType builtin_to_fn_type(BuiltInType type) = fn_type(type.param_types, type.ret_type);

////////////////////////////////////////////////////////////////////////////////

Type cast_as_type(AnyType type):
  Type    = type,
  ClsType = {fail;};

ClsType cast_as_cls_type(AnyType type):
  Type    = {fail;},
  ClsType = type;

////////////////////////////////////////////////////////////////////////////////

Bool is_expr(Expr)      = true;
Bool is_expr(CondExpr)  = false;
Bool is_expr(ClsExpr)   = false;

Expr cast_as_expr(Expr expr)  = expr;
Expr cast_as_expr(CondExpr)   = {fail;};
Expr cast_as_expr(ClsExpr)    = {fail;};

ClsExpr cast_as_cls_expr(ClsExpr expr)  = expr;
ClsExpr cast_as_cls_expr(Expr)          = {fail;};

////////////////////////////////////////////////////////////////////////////////

//Nat arity(<FnDef, Signature> obj) = length(obj.params);
Nat arity(FnDef fd) = length(fd.params);

Nat arity(ProcDef2 pd) = length(pd.params);

NzNat arity(ClsType t)  = nz_nat(length(t.in_types));
Nat arity(Type)         = 0;

// NzNat arity(ClsExpr e) = length(e.params);
// Nat arity(Expr)        = 0;

Nat arity(FnType t) = length(t.params);

Bool is_scalar_par(FnFrmPar):
  scalar_par()      = true,
  non_scalar_par()  = false;

Bool is_cls_par(FnFrmPar param) = not is_scalar_par(param);


Var scalar_var(FnFrmPar param):
  scalar_par()      = if param.var? then param.var else {fail;},
  non_scalar_par()  = {fail;};

ClsVar cls_var(FnFrmPar param):
  scalar_par()      = {fail;},
  non_scalar_par()  = if param.var? then param.var else {fail;};


Type scalar_param_type(FnFrmPar param):
  scalar_par()      = if param.type? then param.type else {fail;},
  non_scalar_par()  = {fail;};

ClsType cls_param_type(FnFrmPar param):
  scalar_par()      = {fail;},
  non_scalar_par()  = if param.type? then param.type else {fail;};


Type return_type(FnDef fn_def) = if fn_def.res_type? then fn_def.res_type else {fail;};


Var* scalar_vars(FnDef fndef)
{
  pos_vars = seq_union([scalar_vars_if_any(p, i) : p @ i <- fndef.params]);
  named_vars = {v : t @ v <- fndef.named_args, t :: Type};
  return pos_vars & named_vars;

  Var* scalar_vars_if_any(FnFrmPar par, Nat pos):
    scalar_par()      = {:fn_par(pos), par.var if par.var?},
    non_scalar_par()  = {};
}

// Var* scalar_vars(FnDef fndef) = {p.var : p <- set(fn_def.params), p.var? and (not p.type? or p.type :: Type)} &
//                                 set([:fn_par(i) : p @ i <- fn_def.params, not p.type? or p.type :: Type])     &
//                                 {v : t @ v <- fn_def.named_args, t :: Type};


(Var => NzNat) cls_vars(FnDef fn_def) = {fail;};

//## FOR THE TIME BEING, THE fn_par(Nat) VARIABLES ARE DEFINED ONLY FOR SCALAR PARAMETERS, NOT CLOSURES
// THIS FUNCTION FAILS IF THERE ARE DUPLICATE PARAMETER NAMES. THIS IS CHECHED BEFORE THE FUNCTION IS INVOKED THOUGH
// (Var => NzNat) cls_vars(FnDef fn_def) = (p.var => length(p.type.in_types) : p <- set(fn_def.params), p.var? and (p.type? and p.type :: ClsType)) &
//                                         (v => length(t.in_types) : t @ v <- fn_def.named_args, t :: ClsType);


Bool (_<_) (SymbObj s1, SymbObj s2) = lower_than(_obj_(s1), _obj_(s2));

Bool lower_than(Atom a1, Atom a2)
{
  str1 = _str_(a1);
  str2 = _str_(a2);

  len1 = length(str1);
  len2 = length(str2);

  //return len1 < len2 if len1 != len2;
  return (len2 - len1) :: NzNat if len1 != len2; //## BAD BAD BAD UGLY HACK TO WORK AROUND A BUG IN THE INTERPRETER

  for (ch1 @ i : _obj_(str1))
    ch2 = str2[i];
    //return ch1 < ch2 if ch1 != ch2;
    return (ch2 - ch1) :: NzNat if ch1 != ch2; //## BAD BAD BAD UGLY HACK TO WORK AROUND A BUG IN THE INTERPRETER
  ;

  fail;
}
