String to_c_expr(AtomicExpr expr) =
  object(Atom a?)       = upper_camel_case(a) & "_S",
  object(Int n?)        = "make_int(" & printed(n) & ")",
  empty_seq             = "make_empty_seq()",
  empty_set             = "make_empty_set()",
  empty_bin_rel         = "make_empty_bin_rel()",
  empty_tern_rel        = "make_empty_tern_rel()",
  ObjVar                = to_c_var_ref_name(expr);


String to_c_expr(NatObjOp expr) =
  at()                  = "at("                 & to_c_expr(expr.seq)    & ", " & to_c_expr(expr.idx) & ")",
  search_or_lookup()    = "search_or_lookup("   & to_c_expr(expr.collection) & ", " & to_c_expr(expr.value) & ")",
  get_tag(e?)           = "get_tag("            & to_c_expr(e)           & ")",
  get_inner_obj(e?)     = "get_inner_obj("      & to_c_expr(e)           & ")",
  bool_obj(e?)          = "make_bool("          & to_c_expr(e)           & ")",
  int_obj(e?)           = "make_int("           & to_c_expr(e)           & ")",
  obj_neg(e?)           = "obj_neg("            & to_c_expr(e)           & ")",
  to_symb(e?)           = "to_symb("            & to_c_expr(e)           & ")",
  get_curr_obj(v?)      = "get_curr_obj("       & to_c_var_ref_name(v) & ")",
  get_curr_arg()        = get_curr_arg_to_c_expr(expr.var, expr.arg),
  rand_elem(e?)         = "rand_set_elem("      & to_c_expr(e)           & ")";


String to_c_expr(FloatExpr expr) =
  mk_float()            = "make_float(" & printed(expr.mantissa) & "e" & printed(expr.dec_exp) & ")",
  neg_float(e?)         = "neg_float(" & to_c_expr(e) & ")",
  add_floats(e1?, e2?)  = "add_floats(" & to_c_expr(e1) & ", " & to_c_expr(e2) & ")",
  sub_floats(e1?, e2?)  = "sub_floats(" & to_c_expr(e1) & ", " & to_c_expr(e2) & ")",
  mult_floats(e1?, e2?) = "mult_floats(" & to_c_expr(e1) & ", " & to_c_expr(e2) & ")",
  div_floats(e1?, e2?)  = "div_floats(" & to_c_expr(e1) & ", " & to_c_expr(e2) & ")",
  square_root(e?)       = "square_root(" & to_c_expr(e) & ")",
  floor_op(e?)          = "floor(" & to_c_expr(e) & ")",
  ceiling_op(e?)        = "ceiling(" & to_c_expr(e) & ")",
  int_to_float(e?)      = "int_to_float(" & to_c_expr(e) & ")";


String get_curr_arg_to_c_expr(BinRelItVar var, <0..2> arg)
{
  assert arg != 2;
  return fn_names[arg] & "(" & to_c_var_ref_name(var) & ")";

  [<0..1> -> String] fn_names = [0 -> "get_curr_left_arg", 1 -> "get_curr_right_arg"];

}


String get_curr_arg_to_c_expr(TernRelItVar var, <0..2> arg)
{
  return fn_names[arg] & "(" & to_c_var_ref_name(var) & ")";

  String+ fn_names = (
    "tern_rel_it_get_left_arg",
    "tern_rel_it_get_mid_arg",
    "tern_rel_it_get_right_arg"
  );
}


String to_c_expr(BoolExpr expr)           = to_c_expr(expr, false);
String to_c_expr(ObjExpr expr, Bool)      = to_c_expr(expr);

String to_c_expr(PendingInputVar v)       = to_c_var_ref_name(v);
String to_c_expr(PendingInputVar v, Bool) = to_c_var_ref_name(v);


String to_c_expr(BoolExpr expr, Bool parentesised) =
  true                  = "true",
  false                 = "false",
  BoolVar               = to_c_var_ref_name(expr),
  is_symb(e?)           = "is_symb("        & to_c_expr(e) & ")",
  is_int(e?)            = "is_int("         & to_c_expr(e) & ")",
  is_float(e?)          = "is_float("       & to_c_expr(e) & ")",
  is_ne_set(e?)         = "is_ne_set("      & to_c_expr(e) & ")",
  is_ne_seq(e?)         = "is_ne_seq("      & to_c_expr(e) & ")",
  is_ne_map(e?)         = "is_ne_map("      & to_c_expr(e) & ")",
  is_ne_bin_rel(e?)     = "is_ne_bin_rel("  & to_c_expr(e) & ")",
  is_ne_tern_rel(e?)    = "is_ne_tern_rel(" & to_c_expr(e) & ")",
  is_tagged_obj(e?)     = "is_tag_obj(" & to_c_expr(e) & ")",

  neg(is_eq_bool() e?)  = to_nary_op(" != ", (e.expr1, e.expr2), parentesised), //## BAD
  neg(is_eq_int() e?)   = to_nary_op(" != ", (e.expr1, e.expr2), parentesised), //## BAD

  is_eq_bool()          = to_nary_op(" == ", (expr.expr1, expr.expr2), parentesised), //## BAD
  is_eq_int()           = to_nary_op(" == ", (expr.expr1, expr.expr2), parentesised), //## BAD

  is_eq()               = "are_eq(" & to_c_expr(expr.expr1) & ", " & to_c_expr(expr.expr2) & ")",

  //## BUG BUG BUG HUGE BUG HERE, NOT CHECKING THAT THE OPERANDS ARE INTEGERS
  is_gt()               = to_nary_op(" > ",  (expr.expr1, expr.expr2), parentesised), //## BAD
  is_ge()               = to_nary_op(" >= ", (expr.expr1, expr.expr2), parentesised), //## BAD
  is_lt()               = to_nary_op(" < ",  (expr.expr1, expr.expr2), parentesised), //## BAD
  is_le()               = to_nary_op(" <= ", (expr.expr1, expr.expr2), parentesised), //## BAD

  inline_is_eq()        = inline_is_eq_to_c_expr(expr.expr, expr.value, parentesised),

  is_out_of_range(v?)   = is_out_of_range_to_c_expr(v),

  is_blank(v?)          = "is_blank_obj(" & to_c_var_ref_name(v) & ")",
  is_null(v?)           = "is_null_obj(" & to_c_var_ref_name(v) & ")",

  contains()            = contains_to_c_expr(expr.coll, expr.entry),

  table_contains()      = table_contains_to_c_expr(expr.table, expr.tuple),

  neg(e?)               = parentesize("!" & to_c_expr(e, true), parentesised),

  and(es?)              = to_nary_op(" & ",  es, parentesised),
  or(es?)               = to_nary_op(" | ",  es, parentesised),
  and_then(es?)         = to_nary_op(" && ", es, parentesised),
  or_else(es?)          = to_nary_op(" || ", es, parentesised),

  eval_bool_fn()        = to_c_fn_name(expr.name) & "(" & to_nary_op(", ", expr.params, false) & ")";


String is_out_of_range_to_c_expr(<SeqItVar, SetItVar, BinRelItVar, TernRelItVar> var) =
  "is_out_of_range(" & to_c_var_ref_name(var) & ")";


String is_out_of_range_to_c_expr(TableItVar var)
{
  fn_name = fn_names_by_arity[var.arity];
  return fn_name & "(&" & to_c_var_ref_name(var) & ")";

  [NzNat -> String] fn_names_by_arity = [
    1 -> "unary_table_iter_is_out_of_range",
    2 -> "binary_table_iter_is_out_of_range",
    3 -> "ternary_table_iter_is_out_of_range"
  ];
}


String contains_to_c_expr(ObjExpr rel, ObjExpr+ tuple)
{
  fn_name = fn_names_by_arity[length(tuple)];
  return fn_name & "(" & append((to_c_expr(a) : a <- (rel) & tuple), ", ") & ")";

  [NzNat -> String] fn_names_by_arity = [
    1 -> "has_elem",
    2 -> "has_pair",
    3 -> "has_triple"
  ];
}


String table_contains_to_c_expr(AnyRelVar table, IntVar+ tuple)
{
  fn_name = fn_names_by_arity[length(tuple)];
  return fn_name & "(&" & append((to_c_var_ref_name(v) : v <- (table) & tuple), ", ") & ")";

  [NzNat -> String] fn_names_by_arity = [
    1 -> "unary_table_contains",
    2 -> "binary_table_contains",
    3 -> "ternary_table_contains"
  ];
}


String inline_is_eq_to_c_expr(ObjExpr expr, InlineObj value, Bool parentesised)
{
  expr_str = to_c_expr(expr, false);
  return match (value)
    object(Atom a?)   = "is_symb(" & expr_str & ", symb_idx_" & printed(a) & ")",
    object(Int n?)    = "is_int("  & expr_str & ", " & printed(n) & ")",
    empty_seq         = "is_empty_seq(" & expr_str & ")",
    empty_set         = "is_empty_set(" & expr_str & ")",
    empty_bin_rel     = "is_empty_bin_rel(" & expr_str & ")",
    empty_tern_rel    = "is_empty_tern_rel(" & expr_str & ")";
}


String to_c_expr(IntExpr expr) = to_c_expr(expr, false);

String to_c_expr(IntExpr expr, Bool parentesised) =
  Int                   = printed(expr),
  time_slot_length()    = to_c_time_slots_table_name(expr.automaton, expr.expr_id) &
                            "[" & to_c_expr(expr.time_slot) & "]",
  IntVar                = to_c_var_ref_name(expr),
  get_int_val(e?)       = "get_int_val("  & to_c_expr(e) & ")",
  get_seq_len(e?)       = "get_seq_len("  & to_c_expr(e) & ")",
  get_size(e?)          = "get_size(" & to_c_expr(e) & ")",
  minus(e?)             = "-" & to_c_expr(e, true),
  add()                 = to_nary_op(" + ", (expr.val1, expr.val2), parentesised),
  sub()                 = to_nary_op(" - ", (expr.val1, expr.val2), parentesised),
  mult()                = to_nary_op(" * ", (expr.val1, expr.val2), parentesised),
  div()                 = to_nary_op(" / ", (expr.val1, expr.val2), parentesised),
  mod()                 = to_nary_op(" % ", (expr.val1, expr.val2), parentesised),
  mantissa(e?)          = "mantissa(" & to_c_expr(e) & ")",
  dec_exp(e?)           = "dec_exp(" & to_c_expr(e) & ")",
  rand_nat(e?)          = "rand_nat(" & to_c_expr(e) & ")",
  lookup_value()        = "lookup_value(" & to_c_expr(expr.store) & ", " & to_c_expr(expr.value) & ")",
  lookup_value_ex()     = "lookup_value_ex(" & to_c_expr(expr.store) & ", " &
                            aux_struct_var_ref_name(expr.store) & ", " & to_c_expr(expr.value) & ")",
  get_tuple_field()     = get_tuple_field_to_c_expr(expr.iter, expr.field),
  unique_nat            = "unique_nat()",
  ticks                 = "get_tick_count()";


String get_tuple_field_to_c_expr(TableItVar var, Nat field)
{
  fn_name = fn_names_by_arity_and_field[(var.arity, field)];
  return fn_name & "(&" & to_c_var_ref_name(var) & ")";

  [(NzNat, Nat) -> String] fn_names_by_arity_and_field = [
    (1, 0) -> "unary_table_iter_get_field",
    (2, 0) -> "binary_table_iter_get_left_field",
    (2, 1) -> "binary_table_iter_get_right_field",
    (3, 0) -> "ternary_table_iter_get_left_field",
    (3, 1) -> "ternary_table_iter_get_middle_field",
    (3, 2) -> "ternary_table_iter_get_right_field"
  ];
}


String to_c_expr(<ElemVar, VecVar, ItVar, StreamVar, AnyClsVar, AnyRelVar, AnyValueStoreId> var) = to_c_var_ref_name(var);

String to_c_expr(<blank_obj>) = "make_blank_obj()";
String to_c_expr(<null_obj>) = "make_null_obj()";

// String to_c_expr(ClsVar v) = to_c_var_ref_name(v);

String to_nary_op(String op, AnyTypeExpr+ exprs, Bool parentesised)
{
  expr = append((to_c_expr(e, true) : e <- exprs), op);
  expr = "(" & expr & ")" if length(exprs) > 1 and parentesised;
  return expr;
}
