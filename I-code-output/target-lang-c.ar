type CCodeOutput = (body: String*, header: String*);

CCodeOutput compile_to_c(CompiledPrg prg)
{
  ptss = par_type_symbols(prg);

  symbs = used_symbols(prg);
  assert length(symbs) <= 64 * 1024; //## IMPLEMENT PROPERLY

  symb_names = ("symb_idx_" & printed(match (s) object(a?) = a) | s <- symbs);

  //## WHY IS PASSING THE typesymb2name() FUNCTION AT ALL NECESSARY? THERE ARE NO TYPES INVOLVED HERE...
  symb_strs = (to_c_expr(s, typesymb2name(ts) = typesymb2str(ts, ptss)) | s <- symbs);
  //## REPLACING THE LINE ABOVE WITH THE FOLLOWING ONE CRASHES THE COMPILER. INVESTIGATE
  // symb_strs = (to_c_expr(s, typesymb2name(ts) = {fail;}) : s <- symbs);

  c_code = ("const uint16 " & symb_names[i] & " = " & printed(i) & ";" | i < length(symbs)) & 4 * ("") &
           ("const OBJ " & symb_strs[i] & " = make_symb(" & symb_names[i] & ");" | i < length(symbs)) & 4 * ("");

  symb_decls = ("const uint32 EMB_SYMB_COUNT = " & printed(length(symbs)) & ";") & 4 * ("");
  c_code = c_code & symb_decls;

  symb_strs  = ("  \"" & _str_(_obj_(s)) & "\"," | s <- symbs);
  c_code     = c_code & ("const char *map_symb_to_str[EMB_SYMB_COUNT] = {") & symb_strs & ("};") & 4 * ("");
  symb_decls = symb_decls & ("extern const char *map_symb_to_str[EMB_SYMB_COUNT];") & 4 * ("");

  cls_defs = cls_defs(prg);

  env_decl = gen_env_decl(prg) & 4 * ("");

  c_code = c_code & env_decl;

  all_cls_arities = [p.arity | pd <- prg.procs, p <- set(pd.params), p != :obj]; //## MAYBE HERE IT WOULD BE BETTER TO DO A NORMAL SORT

  cls_obj_typedefs = join(intermix((generate_cls_obj_typedef(a) | a <- rand_sort(all_cls_arities)), 2 * (""))) & 4 * ("");
  c_code = c_code & cls_obj_typedefs;

  all_fn_arities = set((in_arity(d) | d <- rand_sort(prg.procs)));
  c_code = c_code & join(intermix((generate_push_call_info_wrapper(a) | a <- rand_sort(all_fn_arities)), 2 * (""))) & 4 * ("");

  int_seqs_decls, int_seqs_defs = gen_int_seqs_decl_and_def(prg.int_seqs);

  c_code = c_code & int_seqs_decls & 4 * ("");

  sorted_cls_defs = rand_sort(cls_defs);

  int_seqs_types_and_lengths = ((int_type_c_name(min(s), max(s)), length(s)) | s <- prg.int_seqs);

  proc_code = compile_to_c(
    rand_sort(prg.procs),
    rand_sort(prg.bool_procs),
    sorted_cls_defs,
    rand_sort(prg.blocks),
    rand_sort(prg.trans_blocks),
    prg.int_seqs,
    typesymb2name(ts)               = typesymb2str(ts, ptss),
    cls2id(cls)                     = index_first(cls, sorted_cls_defs),
    int_seqs_types_and_lengths      = int_seqs_types_and_lengths,
    cached_semi_consts_by_named_arg = cached_semi_consts_by_named_arg(prg)
  );


  body = (
    "#include \"lib.h\"\n\n",
    "#include \"iolib.h\"\n\n",
    "",
    "namespace generated",
    "{"
  ) & indent_lines(c_code & proc_code.body & int_seqs_defs) & ("}");

  header = ("namespace generated", "{") & indent_lines(symb_decls & env_decl & cls_obj_typedefs & proc_code.header) & ("}");

  return (body: body, header: header);


  String* generate_cls_obj_typedef(NzNat arity) = (
    "struct CLS" & printed(arity) & " {",
    "  OBJ (*fn_ptr)(" & append(arity * ("OBJ"), ", ") & ", const OBJ *, ENV &env);",
    "  const OBJ *data;",
    "};"
  );

  String typesymb2str(TypeSymbol ts, ParTypeSymbol* par_types):
    type_symbol(a?)     = upper_camel_case(a),
    par_type_symbol()   = typesymb2str(ts.symbol, par_types) & "_" & printed(index_first(ts, par_types));
}


String* gen_env_decl(CompiledPrg prg)
{
  all_named_args = merge_values(set((p.named_args | p <- rand_sort(prg.procs))));
  all_param_arity_pairs = rand_sort([(var: v, arity: a) | v : ars <- all_named_args, a <- ars]);

  env_decl = ("struct ENV {");

  for na @ i <- all_param_arity_pairs:
    var   = na.var;
    arity = na.arity;

    name = _str_(_obj_(var));

    if arity > 0:
      ls = (
        "  OBJ (*n" & printed(arity) & "_" & name & ")(" & append(("OBJ p" & printed(j) & ", " | j < na.arity)) & "const OBJ *C, ENV &env);",
        "  const OBJ *C" & printed(arity) & "_" & name & ";"
      );
    else
      ls = ("  OBJ n_" & name & ";");
    ;

    ls = ("") & ls if i > 0;
    env_decl = env_decl & ls;
  ;

  semi_consts_cache_vars = rand_sort([p.name | p <- prg.procs, p.cached and p.named_args != [:]]);
  semi_consts_cache_vars_decls = ("  OBJ " & to_c_semi_const_memo_var_name(v) & ";" | v <- semi_consts_cache_vars);
  env_decl = (env_decl || "") & semi_consts_cache_vars_decls if semi_consts_cache_vars_decls != ();

  env_decl = env_decl & ("};");


  return env_decl;
}


String int_type_c_name(Int min_val, Int max_val)
{
  for lb, up, type_name <- type_bounds:
    return type_name if min_val >= lb and max_val < up;
  ;
  return "int64";
}


(Int, Int, String)+ type_bounds = (
  (0,             pow(2, 8),    "uint8"),
  (0,             pow(2, 16),   "uint16"),
  (0,             pow(2, 32),   "uint32"),
  (-pow(2, 7),    pow(2, 7),    "int8"),
  (-pow(2, 15),   pow(2, 15),   "int16"),
  (-pow(2, 31),   pow(2, 31),   "int32")
);


Int pow(Int b, Nat e)
{
  res = 1;
  for e:
    res = b * res;
  ;
  return res;
}


(String*, String*) gen_int_seqs_decl_and_def(Int+* int_seqs)
{
  decls, defs = unzip((gen_int_seq_decl_and_def(s, i) | s @ i <- int_seqs));
  return (decls, join(intermix(defs, 2 * (""))));
}


(String, String*) gen_int_seq_decl_and_def(Int+ int_seq, Nat seq_id)
{
  min_elem = min(int_seq);
  max_elem = max(int_seq);

  type_name = int_type_c_name(min_elem, max_elem);

  sgn = "const " & type_name & " " & const_int_seq_c_name(seq_id) & "[" & printed(length(int_seq)) & "]";

  decl = "extern " & sgn & ";";

  strs = (printed(n) | n <- int_seq);
  total_len = sum((length(s) | s <- strs)) + 2 * length(strs);
  if total_len < 60:
    def = (sgn & " = {" & append(strs, ", ") & "};");
  else
    max_len = nat(max((length(printed(n)) | n <- (min_elem, max_elem))));
    last_idx = length(int_seq) - 1;
    strs = (align_text(s, max_len, ascii_space) & if i != last_idx then ", " else "" | s @ i <- strs);
    cont_lines = ("  " & append(ss) | ss <- split_into_groups(strs, nz_nat(100 / {max_len + 2})));
    def = (sgn & " = {") & cont_lines & ("};");
  ;

  return (decl, def);


  T+* split_into_groups(T+ items, NzNat max_group_size)
  {
    len = length(items);
    num_of_comp_groups = len / max_group_size;
    comp_groups_total_size = num_of_comp_groups * max_group_size;
    last_group_size = len - comp_groups_total_size;
    groups = (nonempty(subseq(items, i * max_group_size, max_group_size)) | i < num_of_comp_groups);
    groups = (groups || nonempty(subseq(items, comp_groups_total_size, last_group_size))) if last_group_size > 0;
    return groups;
  }


  String align_text(String str, Nat len, Nat filler)
  {
    str_len = length(str);
    return {if len >= str_len then string(nat(len-str_len) * (filler)) else ""} & str;
  }
}


String+ generate_push_call_info_wrapper(Nat arity)
{
  signature = "void push_call_info_wrapper(const char *fn_name" & append((", OBJ p" & printed(i) | i < arity)) & ")";
  code = (signature, "{", "#ifndef NDEBUG");
  if arity == 0:
    code = code & ("  push_call_info(fn_name, 0, (OBJ *)0);");
  else
    code = code & ("  OBJ *params = new_obj_array(" & printed(arity) & ");");
    for i < arity:
      code = code & ("  params[" & printed(i) & "] = p" & printed(i) & ";");
    ;
    code = code & ("  push_call_info(fn_name, " & printed(arity) & ", params);");
  ;
  return nonempty(code & ("#endif", "}"));
}


//## THIS SHOULD NOT GO HERE
type FnCallParam  = blank_obj, ObjExpr, ElemVar, PendingInputVar, VecVar, BoolExpr, IntExpr,
                    ItVar, StreamVar, ClsVar, AnyRelVar, AnyValueStoreId;


implicit
{
  typesymb2name                   : TypeSymbol -> String,
  cls2id                          : ClsDef -> Nat,
  int_seqs_types_and_lengths      : (String, Nat)*,
  cached_semi_consts_by_named_arg : [(NamedArg, Nat) -> [+FnSymbol]];


  CCodeOutput compile_to_c(ObjProcDef* obj_proc_defs, BoolProcDef* bool_proc_defs, ClsDef* cls_defs, Block* blocks, TransBlock* trans_blocks, Int+* int_seqs)
  {
    type_checking_fn_decls = (gen_c_decl(pd) | pd <- bool_proc_defs) & 4 * ("");
    // print "Type checking function declarations generated";

    closure_decls = (gen_c_decl(d, i) | d @ i <- cls_defs) & 4 * ("");
    // print "Closure declarations generated";

    fn_decls = (gen_c_decl(pd) | pd <- obj_proc_defs) & 4 * ("");
    // print "Function declarations generated";

    type_checking_fns = join((compile_to_c(d) & ("", "") | d <- bool_proc_defs)) & 4 * ("");
    // print "Type checking functions generated";

    closures = join((compile_to_c(d, i) & ("", "") | d @ i <- cls_defs)) & 4 * ("");
    // print "Closures generated";

    functions = join((compile_to_c(d) & ("", "") | d <- obj_proc_defs));
    // print "Functions generated";

    trans_blocks_code = (compile_trans_block_to_c(b) | b <- trans_blocks);
    trans_blocks_decls = join((b.header & ("", "") | b <- trans_blocks_code));
    trans_blocks_bodies = join(intermix((b.body | b <- trans_blocks_code), ("", "")));

    blocks_code = (compile_block_to_c(b) | b <- blocks);
    blocks_decls = join((b.header & ("", "") | b <- blocks_code));
    blocks_bodies = join(intermix((b.body | b <- blocks_code), ("", "")));

    header = join(intermix((fn_decls, trans_blocks_decls, blocks_decls), ("", "")));

    body = join((
      type_checking_fn_decls,
      closure_decls,
      fn_decls,
      trans_blocks_decls,
      blocks_decls,
      type_checking_fns,
      closures,
      functions,
      blocks_bodies,
      trans_blocks_bodies
    ));

    return (body: body, header: header);
  }


  String gen_c_decl(ObjProcDef pd)
  {
    par_types = (if p == :obj then "OBJ" else "CLS" & printed(p.arity) & " &" | p <- pd.params);
    par_list = append(par_types & ("ENV &"), ", ");
    return "OBJ " & to_c_fn_name(pd.name, in_arity(pd)) & "(" & par_list & ");";
  }


  String gen_c_decl(BoolProcDef pd)
  {
    par_list = append(pd.arity * ("OBJ"), ", ");
    return "bool " & to_c_fn_name(pd.name) & "(" & par_list & ");";
  }


  String gen_c_decl(ClsDef cd, Nat id)
  {
    par_list = append(cd.arity * ("OBJ") & ("const OBJ *", "ENV &"), ", ");
    return "OBJ cls_" & printed(id) & "(" & par_list & ");";
  }


  String* compile_to_c(ProcDef pd)
  {
    cached = pd.cached? and pd.cached;

    fn_name = to_c_fn_name(pd.name, in_arity(pd));

    suffix = if cached then "__CALCULATE_CONSTANT" else "";

    par_list = gen_fn_pars(pd);
    par_list_str = append(par_list, ", ");

    signature = ret_type_str(pd) & fn_name & suffix & "(" & par_list_str & ")";

    body = pd.body;
    auto_vars_types = if pd.loc_auto_vars? then pd.loc_auto_vars else [:];
    db_vars_types = if pd.loc_db_vars? then pd.loc_db_vars else [:];

    var_decls = gen_vars_decls(body);

    auto_vars = rand_sort(keys(auto_vars_types));
    auto_var_decls = (to_c_name(auto_vars_types[v]) & " " & to_c_var_decl_name(v) & ";" | v <- auto_vars);

    db_vars = rand_sort(keys(db_vars_types));
    db_vars_decls = (to_c_name(db_vars_types[v]) & " " & to_c_var_decl_name(v) & ";" | v <- db_vars);

    comp_body = compile_to_c(body, nil);

    has_var_decls = var_decls != () or auto_var_decls != () or db_vars_decls != ();
    code = (signature, "{") & indent_lines(var_decls) & indent_lines(auto_var_decls) &
           indent_lines(db_vars_decls) & ("" if has_var_decls) & indent_lines(comp_body) & ("}");

    if cached:
      is_real_const = pd.cached? and pd.named_args == [:];
      cache_var_name = if is_real_const then "cached_res" else "env." & to_c_semi_const_memo_var_name(pd.name);

      wrapper_code = (
        "",
        "",
        ret_type_str(pd) & fn_name & "(" & par_list_str & ")",
        "{",
        "  static OBJ " & cache_var_name & " = make_blank_obj();" if is_real_const,
        "  if (is_blank_obj(" & cache_var_name & "))",
        "  {",
        "     bool in_try_state = is_in_try_state();",
        "     if (in_try_state)",
        "       enter_copy_state();",
        "    " & cache_var_name & " = " & fn_name & suffix & "(env);",
        "    add_obj_to_cache(" & cache_var_name & ");" if is_real_const,
        "    if (in_try_state)",
        "      restore_try_state();",
        "    else",
        "      add_ref(" & cache_var_name & ");",
        "  }",
        "  else",
        "    add_ref(" & cache_var_name & ");",
        "  return " & cache_var_name & ";",
        "}"
      );
      code = code & wrapper_code;
    ;

    return code;


    Nat arity(ProcDef pd):
      obj_proc_def()    = in_arity(pd),
      bool_proc_def()   = pd.arity;

    String ret_type_str(ProcDef):
      obj_proc_def()    = "OBJ ",
      bool_proc_def()   = "bool ";

    String gen_fn_par(ObjProcPar par, Nat pos):
      obj   = "OBJ p" & printed(pos),
      cls() = "CLS" & printed(par.arity) & " &" & to_c_var_decl_name(if par.name? then par.name else cls_var(pos));

    String* gen_fn_pars(ProcDef pd):
      ObjProcDef  = (gen_fn_par(p, i) | p @ i <- pd.params) & ("ENV &env"),
      BoolProcDef = ("OBJ p" & printed(n) | n < arity(pd));
  }


  String* gen_vars_decls(Instr* body)
  {
    vars_to_decl = [v | v <- vars_to_declare(body), not v :: AuxVar];

    vector_vars = [v | v <- vars_to_decl, v :: VecVar];
    scalar_vars = vars_to_decl - vector_vars;

    vec_vars_by_id = group_by(vector_vars, $.id);
    new_vec_vars = [vvar(id, nz_nat(max([v.size | v <- vs]))) | id : vs <- vec_vars_by_id];

    assert {
      vec_var_ids  = [v.id | v <- vector_vars];
      ref_new_vec_vars = [vvar(id, nz_nat(max(nonempty([v.size | v <- vector_vars, v.id == id])))) | id <- vec_var_ids];
      return new_vec_vars == ref_new_vec_vars;
    };

    vars_to_decl = scalar_vars & new_vec_vars;
    return (var_decl(v) | v <- rand_sort(vars_to_decl));
  }


  //## DUPLICATED CODE
  String* compile_to_c(ClsDef cd, Nat id)
  {
    par_list  = ("OBJ p" & printed(n) | n < cd.arity) & ("const OBJ C[]", "ENV &env"); //## BAD
    signature = "OBJ cls_" & printed(id) & "(" & append(par_list, ", ") & ")";

    vars_decls = gen_vars_decls(cd.body);
    comp_body = compile_to_c(cd.body, nil);

    return (signature, "{") & indent_lines(vars_decls) & ("") & indent_lines(comp_body) & ("}");
  }


  String* compile_to_c(Instr* instrs, <Nat, nil> block_id) = join((compile_to_c(instr, block_id) | instr <- instrs));

  String* compile_to_c(Instr instr, <Nat, nil> block_id):

    init_stream(v?)       = mk_call("init", (v)),
    append()              = mk_call("append", (instr.stream, instr.obj)),

    // get_at()              = mk_call(instr.var, "get_at", [instr.seq, instr.idx]),

    set_at()              = mk_call("set_at", (instr.var, instr.idx, instr.value)),

    lookup()              = mk_call(
                              instr.var,
                              "lookup",
                              (instr.map, instr.key, instr.success_var if instr.success_var?)
                            ),

    //## BAD BAD IT'S ALMOST THE SAME AS THE EXPRESSION ABOVE
    ext_lookup()          = mk_call(
                              instr.var,
                              "ext_lookup",
                              (instr.map, instr.key, instr.success_var if instr.success_var?)
                            ),

    get_set_iter()        = mk_call("get_set_iter", (instr.var, instr.src)),
    get_seq_iter()        = mk_call("get_seq_iter", (instr.var, instr.src)),

    get_bin_rel_iter()    = compile_get_bin_rel_iter_to_c(instr.var, instr.src, instr.args),
    get_tern_rel_iter()   = compile_get_tern_rel_iter_to_c(instr.var, instr.src, instr.args),

    move_forward(v?)      = compile_move_forward_to_c(v),

    set_var()             = compile_set_var_to_c(instr.var, instr.value),

    set_bvar()            |
    set_ivar()            = mk_assignment(instr.var, instr.value),

    set_rc_var()          = compile_to_c(instr.value, instr.var),

    init_memb_var()       = (to_c_var_ref_name(instr.var) & " = " & to_c_const(instr.new_state) & ";"),
    reset_memb_var()      = (to_c_var_ref_name(instr.var) & " = " & to_c_const(instr.new_state) & ";"),
    clear_loc_var(v?)     = (to_c_var_ref_name(v) & " = make_null_obj();"),

    terminate             = ("fail();"),

    add_ref(v?)           = mk_call("add_ref", (v)),
    release(v?)           = mk_call("release", (v)),

    print_obj()           = mk_call("print", (instr.obj)),

    ret_val(e?)           = ("return " & to_c_expr(e) & ";"),

    no_op                 = (),

    repeat(body?)         = compile_repeat_to_c(body, block_id),

    break_loop            = ("break;"),


    execute_block(body?)  = { new_block_id = _counter_(nil);
                              body_code = compile_to_c(body, new_block_id);
                              label = ("block_" & printed(new_block_id) & "_end:;");
                              return body_code & label;
                            },

    try_block()           = compile_try_block_to_c(instr.var, instr.body, block_id),

    exit_block            = { fail if block_id == nil; //assert block_id != nil; //## BAD
                              return ("goto block_" & printed(block_id) & "_end;");
                            },

    switch_on_nat()       = compile_switch_on_nat_to_c(instr.value, instr.cases, block_id),

    symb_switch()         = compile_symb_switch_to_c(instr.value, instr.cases, instr.else, block_id),

    call_proc()           = compile_call_proc_to_c(if instr.var? then just(instr.var) else nil, instr.name, instr.params, block_id),

    call_cls()            = mk_cls_call(instr.cls_var, instr.var, instr.params), //## INLINE THE FUNCTION

    push_call_info()      = { fn_name = (printed(fn_name_to_str(instr.fn_name)));
                              params = (if p == nil then :blank_obj else value(p) | p <- instr.params);
                              return (mk_gen_call("push_call_info_wrapper", fn_name, params, ()));
                            },

    pop_call_info         = mk_call("pop_call_info", ()),

    runtime_check()       = compile_runtime_check_to_c(instr.cond, instr.file, instr.line, instr.text, instr.vars),

    branch()              = compile_branch_to_c(instr.cond, instr.when_true, instr.when_false, block_id),

    cls_scope()           = { bound_cls = instr.bound_cls;
                              return match (bound_cls)
                                ClsVar      = {fail;}, //## THIS SHOULD NOT BE POSSIBLE FOR NOW
                                bound_cls() = compile_cls_scope_to_c(instr.var, bound_cls.cls, bound_cls.env, instr.body, block_id);
                            },

    queue_update()        = (queue_update_method_name(instr.id, instr.type) & "(self);"),

    queue_cond_update()   = (queue_update_method_name(instr.id, instr.type) & "(self, " & to_c_expr(instr.inval_cache) & ");"),

    insert_timer()        = (insert_timer_method_name(instr.type) & "(self, " & to_c_expr(instr.idx) & ", " & to_c_expr(instr.time) & ");"),

    clear_timer()         = (clear_timer_method_name(instr.type) & "(self, " & to_c_expr(instr.idx) & ");"),

    auto_pre_init()       = (pre_init_method_name(instr.type) & "(&" & to_c_var_ref_name(instr.var) & ", env);"),

    auto_cleanup()        = (cleanup_method_name(instr.type) & "(&" & to_c_var_ref_name(instr.var) & ");"),

    set_input()           = { value_str = to_c_expr(instr.value);
                              method_name = input_set_method_name(instr.type, instr.input);
                              return (method_name & "(&" & to_c_var_ref_name(instr.var) & ", " & value_str & ");");
                            },

    clear_input()         = { method_name = input_set_method_name(instr.type, instr.input);
                              return (method_name & "(&" & to_c_var_ref_name(instr.var) & ", make_null_obj());");
                            },

    auto_update_node()    = compile_auto_update_node_to_c(instr.type, instr.node, if instr.time_var? then just(instr.time_var) else nil),

    auto_apply()          = compile_auto_apply_to_c(if instr.var? then just(instr.var) else nil, instr.type, instr.elapsed_time),

    init_db()             = (compile_init_db_to_c(instr.db_var, instr.type)),
    cleanup_db()          = (compile_cleanup_db_to_c(instr.db_var, instr.type)),
    send_msg()            = (compile_send_msg_to_c(instr.db_var, instr.type, instr.msg, instr.is_root, if instr.res_var? then just(instr.res_var) else nil)),
    try_update()          = (compile_try_update_to_c(instr.type, instr.update_id, instr.args)),

    invoke_auto_method()  = (compile_invoke_method_to_c(instr.res_var, if instr.auto_var? then just(instr.auto_var) else nil, instr.type, instr.method_id, instr.args)),
    invoke_db_method()    = (compile_invoke_method_to_c(instr.res_var, if instr.db_var? then just(instr.db_var) else nil, instr.type, instr.method_id, instr.args)),

    init_value_store()    = mk_call("value_store_init", (instr.store)),
    cleanup_value_store() = mk_call("value_store_cleanup", (instr.store)),
    init_table()          = compile_init_table_to_c(instr.rel_var, instr.table),
    cleanup_table()       = compile_cleanup_table_to_c(instr.rel_var, instr.table),

    get_table_iter()      = compile_get_table_iter_to_c(instr.it_var, instr.table, instr.args),
    queue_deletes()       = compile_queue_deletes_to_c(instr.rel_var, instr.args),
    queue_insert_value()  = (mk_gen_call(instr.res_var, "value_store_insert", (aux_struct_var_ref_name(instr.store)), (instr.value), ())),
    queue_insert_tuple()  = compile_queue_insert_tuple_to_c(instr.rel_var, instr.tuple);


  String* compile_get_bin_rel_iter_to_c(BinRelItVar var, AtomicExpr src, (Maybe[AtomicExpr], Maybe[AtomicExpr]) args) =
    match (args)
      (nil,       nil)        = mk_call("get_bin_rel_iter",   (var, src)),
      (just(a0?), nil)        = mk_call("get_bin_rel_iter_0", (var, src, a0)),
      (nil,       just(a1?))  = mk_call("get_bin_rel_iter_1", (var, src, a1));


  String* compile_get_tern_rel_iter_to_c(TernRelItVar var, AtomicExpr src, (Maybe[AtomicExpr], Maybe[AtomicExpr], Maybe[AtomicExpr]) args) =
    match (args)
      (nil,       nil,       nil)         = mk_call("get_tern_rel_iter",    (var, src)),
      (just(a0?), nil,       nil)         = mk_call("get_tern_rel_iter_by", (var, src, 0, a0)),
      (nil,       just(a1?), nil)         = mk_call("get_tern_rel_iter_by", (var, src, 1, a1)),
      (nil,       nil,       just(a2?))   = mk_call("get_tern_rel_iter_by", (var, src, 2, a2)),
      (just(a0?), just(a1?), nil)         = mk_call("get_tern_rel_iter_by", (var, src, 0, a0, a1)),
      (just(a0?), nil,       just(a2?))   = mk_call("get_tern_rel_iter_by", (var, src, 2, a2, a0)),
      (nil,       just(a1?), just(a2?))   = mk_call("get_tern_rel_iter_by", (var, src, 1, a1, a2));


  String* compile_try_block_to_c(LocVar var, Instr+ body, <Nat, nil> block_id)
  {
    var_name = to_c_var_ref_name(var);
    body_code = compile_to_c(body, block_id);

    return (
      "int depth = get_call_stack_depth();",
      "enter_try_state();",
      "try",
      "{"
      ) & indent_lines(body_code) & (
      "  enter_copy_state();",
      "  " & var_name & " = copy_obj(" & var_name & ");",
      "  return_to_normal_state();",
      "}",
      "catch (...)",
      "{",
      "  pop_try_mode_call_info(depth);",
      "  abort_try_state();",
      "  " & var_name & " = make_null_obj();",
      "}"
    );
  }

  String* compile_init_table_to_c(RelVar rel_var, Table table)
  {
    fn_name = fn_names_by_arity[arity(table)];
    return mk_call(fn_name, (rel_var));

    [NzNat -> String] fn_names_by_arity = [
      1 -> "unary_table_init",
      2 -> "binary_table_init",
      3 -> "ternary_table_init"
    ];
  }


  String* compile_cleanup_table_to_c(RelVar rel_var, Table table)
  {
    fn_name = fn_names_by_arity[arity(table)];
    return mk_call(fn_name, (rel_var));

    [NzNat -> String] fn_names_by_arity = [
      1 -> "unary_table_cleanup",
      2 -> "binary_table_cleanup",
      3 -> "ternary_table_cleanup"
    ];
  }


  String* compile_move_forward_to_c(<SeqItVar, SetItVar, BinRelItVar, TernRelItVar> it_var) =
    mk_call("move_forward", (it_var));


  String* compile_move_forward_to_c(TableItVar var)
  {
    fn_name = fn_names_by_arity[var.arity];
    return mk_call(fn_name, (var));

    [NzNat -> String] fn_names_by_arity = [
      1 -> "unary_table_iter_next",
      2 -> "binary_table_iter_next",
      3 -> "ternary_table_iter_next"
    ];
  }


  String* compile_queue_deletes_to_c(RelVar rel_var, Maybe[IntVar]+ args)
  {
    fn_name = fn_names_by_args[(a != nil | a <- args)];
    table_arg_str = "&" & to_c_var_ref_name(rel_var);
    updates_arg_str = "&" & pending_updates_var_ref_name(rel_var);
    return (mk_gen_call(fn_name, (table_arg_str, updates_arg_str), (value(a) | a <- args, a != nil), ()));

    [Bool+ -> String] fn_names_by_args = [
      (true)                  -> "unary_table_delete",
      (false)                 -> "unary_table_clear",
      (true,  true)           -> "binary_table_delete",
      (true,  false)          -> "binary_table_delete_by_col_0",
      (false, true)           -> "binary_table_delete_by_col_1",
      (false, false)          -> "binary_table_clear",
      (true,  true,  true)    -> "ternary_table_delete",
      (true,  true,  false)   -> "ternary_table_delete_by_cols_01",
      (true,  false, true)    -> "ternary_table_delete_by_cols_02",
      (false, true,  true)    -> "ternary_table_delete_by_cols_12",
      (true,  false, false)   -> "ternary_table_delete_by_col_0",
      (false, true,  false)   -> "ternary_table_delete_by_col_1",
      (false, false, true)    -> "ternary_table_delete_by_col_2",
      (false, false, false)   -> "ternary_table_clear"
    ];
  }


  String* compile_queue_insert_tuple_to_c(RelVar rel_var, IntVar+ tuple)
  {
    fn_name = fn_names_by_arity[length(tuple)];
    return (mk_gen_call(fn_name, ("&" & pending_updates_var_ref_name(rel_var)), tuple, ()));

    [NzNat -> String] fn_names_by_arity = [
      1 -> "unary_table_insert",
      2 -> "binary_table_insert",
      3 -> "ternary_table_insert"
    ];
  }


  String* compile_get_table_iter_to_c(TableItVar it_var, AnyRelVar table, Maybe[IntVar]+ args)
  {
    fn_name = fn_names_by_args[(a != nil | a <- args)];
    return mk_call(fn_name, (table, it_var) & (value(a) | a <- args, a != nil));

    [Bool+ -> String] fn_names_by_args = [
      (false)                 -> "unary_table_get_iter",
      (true,  false)          -> "binary_table_get_iter_by_col_0",
      (false, true)           -> "binary_table_get_iter_by_col_1",
      (false, false)          -> "binary_table_get_iter",
      (true,  true,  false)   -> "ternary_table_get_iter_by_cols_01",
      (true,  false, true)    -> "ternary_table_get_iter_by_cols_02",
      (false, true,  true)    -> "ternary_table_get_iter_by_cols_12",
      (true,  false, false)   -> "ternary_table_get_iter_by_col_0",
      (false, true,  false)   -> "ternary_table_get_iter_by_col_1",
      (false, false, true)    -> "ternary_table_get_iter_by_col_2",
      (false, false, false)   -> "ternary_table_get_iter"
    ];
  }


  String* compile_repeat_to_c(Instr+ body, <Nat, nil> block_id)
  {
    head = body(0);
    if head :: <branch(cond: BoolExpr, when_true: (<break_loop>), when_false: ())>:
      cond_str = to_c_expr(neg(head.cond));
      body_text = ("{") & indent_lines(compile_to_c(tail(body), block_id)) & ("}");
      return ("while (" & cond_str & ")") & body_text;
    else
      body_text = ("{") & indent_lines(compile_to_c(body, block_id)) & ("}");
      return ("for ( ; ; )") & body_text;
    ;
  }


  String compile_init_db_to_c(AnyDBVar db_var, DBSymbol type) =
    mk_gen_call(init_method_name(type), ("&" & to_c_var_ref_name(db_var), "env"));


  String compile_cleanup_db_to_c(AnyDBVar db_var, DBSymbol type) =
    mk_gen_call(cleanup_method_name(type), ("&" & to_c_var_ref_name(db_var)));


  String compile_send_msg_to_c(AnyDBVar db_var, DBSymbol type, AtomicExpr msg, Bool is_root, Maybe[StdVar] maybe_res_var)
  {
    if is_root:
      name_str = update_entry_point_name(type);
      db_var_str = "&" & to_c_var_ref_name(db_var);
      return if maybe_res_var == nil
        then mk_gen_call(name_str, (db_var_str), (msg), ("env"))
        else mk_gen_call(value(maybe_res_var), name_str, (db_var_str), (msg), ("env"));
    else
      assert db_var :: MembDBVar;
      fail if not db_var :: MembDBVar;
      name_str = update_name(type, main_handler);
      db_var_str = "&" & to_c_var_ref_name(db_var);
      aux_db_var_str = aux_struct_var_ref_name(db_var);
      return mk_gen_call(name_str, (db_var_str, aux_db_var_str), (msg), ("env")) & " /" & "/ HEREHEREHERE";

    ;
  }


  String compile_try_update_to_c(DBSymbol type, UpdateId id, AtomicExpr* args) =
    mk_gen_call(update_name(type, id), ("self, self_aux"), args, ("env"));


  String compile_invoke_method_to_c(WriteObjVar res_var, Maybe[<AnyAutoVar, AnyDBVar>] maybe_target_var,
    <AutoSymbol, DBSymbol> type, MethodId id, AtomicExpr* args)
  {
    name_str = user_def_method_name(type, id);
    target_var_str = if maybe_target_var != nil then "&" & to_c_var_ref_name(value(maybe_target_var)) else "self";
    return mk_gen_call(res_var, name_str, (target_var_str), args, ("env"));
  }


  String* gen_cache_clearing_code(NamedArg narg, Nat arity)
  {
    code = ();
    for fn_symb <- rand_sort(lookup(cached_semi_consts_by_named_arg, (narg, arity), [])):
      cache_var_name = to_c_semi_const_memo_var_name(fn_symb);
      code = (code || "release(env." & cache_var_name & ");", "env." & cache_var_name & " = make_blank_obj();");
    ;
    return code;
  }


  String* compile_set_var_to_c(WriteObjVar var, ObjExpr value) = mk_assignment(var, value);

  String* compile_set_var_to_c(NamedArg var, ObjExpr value) =
    mk_assignment(var, value) & gen_cache_clearing_code(var, 0);


  String* compile_auto_update_node_to_c(AutoSymbol type, BlockNodeId node, Maybe[IntVar] maybe_time_var)
  {
    time_arg = if maybe_time_var != nil then ", " & to_c_var_ref_name(value(maybe_time_var)) else "";
    return (node_update_method_name(type, node) & "(self" & time_arg & ", self_aux, env);");
  }


  //## BUG BUG BUG: IF THERE IS INSIDE ONE OF THE CASES A BREAK STATEMENT MEANT TO
  //## TERMINATE AN OUTER LOOP, THAT BREAK WILL TERMINATE THE SWITCH/CASE INSTEAD.
  String* compile_switch_on_nat_to_c(IntExpr value, Instr*+ cases, <Nat, nil> block_id)
  {
    cases_code = (
      ("case " & printed(i) & ":") & indent_lines((compile_to_c(c, block_id) || "break;", ""))
      | c @ i <- cases
    );
    return ("switch (" & to_c_expr(value) & ")", "{") & indent_lines(join(cases_code)) & ("}");
  }


  //## BUG BUG BUG: IF THERE IS INSIDE ONE OF THE CASES A BREAK STATEMENT MEANT TO
  //## TERMIMATE AN OUTER LOOP, THAT BREAK WILL TERMINATE THE SWITCH/CASE INSTEAD.
  String* compile_symb_switch_to_c(ObjExpr value, [+([+Atom], Instr+)] cases, Instr* else, <Nat, nil> block_id)
  {
    value_str = match (value)
      get_tag(tag_obj?)   = "get_tag_idx(" & to_c_expr(tag_obj) & ")",
      _                   = "get_symb_idx(" & to_c_expr(value) & ")";

    body_code = (
      ("" if i > 0) &
      ("case symb_idx_" & _str_(a) & ":" | a <- rand_sort(as)) &
      indent_lines((compile_to_c(is, block_id) || "break;"))
      | as, is @ i <- rand_sort(cases)
    );
    body_code = (body_code || ("", "default:") & indent_lines(compile_to_c(else, block_id))) if else != ();

    return ("switch (" & value_str & ")", "{") & indent_lines(join(body_code)) & ("}");
  }


  String* compile_auto_apply_to_c(Maybe[AnyAutoVar] var, AutoSymbol type, IntExpr elapsed_time)
  {
    var_str = if var != nil then "&" & to_c_var_ref_name(value(var)) else "self";
    name_str = apply_method_name(type);
    time_str = to_c_expr(elapsed_time);
    return (mk_gen_call(name_str, (var_str, time_str), (), ("env")));
  }


  String* compile_to_c(FloatExpr expr, ObjVar var):
    mk_float()            = (mk_gen_call(var, "make_float", (printed(expr.mantissa) & "e" & printed(expr.dec_exp)), (), ())),
    neg_float()           = mk_call(var, "neg_float",     (expr.value)),
    add_floats()          = mk_call(var, "add_floats",    expr.values),
    sub_floats()          = mk_call(var, "sub_floats",    expr.values),
    mult_floats()         = mk_call(var, "mult_floats",   expr.values),
    div_floats()          = mk_call(var, "div_floats",    expr.values),
    square_root()         = mk_call(var, "square_root",   (expr.value)),
    floor_op()            = mk_call(var, "floor",         (expr.value)),
    ceiling_op()          = mk_call(var, "ceiling",       (expr.value)),
    int_to_float()        = mk_call(var, "int_to_float",  (expr.value));


  String* compile_to_c(RefObjExpr expr, ObjVar var):
    mk_set_from_stream()        = mk_call(var, "build_set",           (expr.stream)),
    mk_set()                    = mk_call(var, "build_set",           (expr.elems, expr.size)),
    mk_seq_from_stream()        = mk_call(var, "build_seq",           (expr.stream)),
    mk_seq()                    = mk_call(var, "build_seq",           (expr.elems, expr.size)),
    build_const_int_seq()       = compile_build_const_int_seq_to_c(expr.seq_id, var),
    mk_map_from_streams()       = mk_call(var, "build_map",           (expr.key_stream, expr.value_stream)),
    mk_map()                    = mk_call(var, "build_map",           (expr.keys, expr.values, expr.size)),
    mk_bin_rel_from_streams()   = mk_call(var, "build_bin_rel",       expr.streams),
    mk_bin_rel()                = mk_call(var, "build_bin_rel",       (expr.cols || expr.size)),
    mk_tern_rel_from_streams()  = mk_call(var, "build_tern_rel",      expr.streams),
    mk_tern_rel()               = mk_call(var, "build_tern_rel",      (expr.cols || expr.size)),
    mk_tagged_obj()             = mk_call(var, "build_tagged_obj",    (expr.tag, expr.obj)),
    mk_array()                  = mk_call(var, "blank_array",         (expr.size)),
    get_seq_slice()             = mk_call(var, "get_seq_slice",       (expr.seq, expr.idx_first, expr.len)),
    append_to_seq()             = mk_call(var, "append_to_seq",       (expr.seq, expr.new_elem)),
    join_seqs()                 = mk_call(var, "join_seqs",           (expr.left, expr.right)),
    join_mult_seqs()            = mk_call(var, "join_mult_seqs",      (expr.seqs)),
    rev_seq()                   = mk_call(var, "rev_seq",             (expr.seq)),
    merge_sets()                = mk_call(var, "merge_sets",          (expr.sets)),
    merge_maps()                = mk_call(var, "merge_maps",          (expr.maps)),
    seq_to_set()                = mk_call(var, "seq_to_set",          (expr.seq)),
    seq_to_mset()               = mk_call(var, "seq_to_mset",         (expr.seq)),
    internal_sort()             = mk_call(var, "internal_sort",       (expr.set)),
    symb_to_str(e?)             = mk_call(var, "to_str",              (e)),
    lookup_surrogate()          = mk_call(var, "lookup_surrogate",    (expr.store, expr.surrogate)),
    read_pending_var(v?)        = (to_c_var_ref_name(var) & " = " & to_c_var_ref_name(v) & ";"),
    add_attachment()            = mk_call(var, "add_attachment",      (expr.target, expr.data)),
    fetch_attachments(e?)       = mk_call(var, "fetch_attachments",   (e));





  String* compile_build_const_int_seq_to_c(Nat seq_id, ObjVar var)
  {
    type, len = int_seqs_types_and_lengths[seq_id];
    seq_name = const_int_seq_c_name(seq_id);
    return (mk_gen_call(var, "build_const_" & type & "_seq", (seq_name, printed(len))));
  }

  ///////////////////////////////////////////////////////////////////////////////

  String* compile_call_proc_to_c(Maybe[ObjVar] var, ObjFnName name, <ObjExpr, BoundCls>* params, <Nat, nil> block_id)
  {
    pars_info = (gen_par_info(p) | p <- params);
    code_frags, args = unzip(pars_info);
    call_code = if var != nil
      then mk_fn_call(value(var), to_c_fn_name(name, length(params)), args)
      else mk_fn_call(to_c_fn_name(name, length(params)), args);
    return join(code_frags) & call_code;


    (String*, FnCallParam) gen_par_info(ObjExpr p) = ((), p);

    (String*, FnCallParam) gen_par_info(BoundCls p):
      ClsVar      = ((), p),
      // fn_ref()    = {
      //   par_id = _counter_(nil);
      //   par_var = cls_var(par_id);
      //   par_name = to_c_expr(par_var);
      //   code = [
      //     "CLS" & printed(p.arity) & " " & par_name & ";",
      //     par_name & ".fn_ptr = " & to_c_fn_name(p.name) & ";",
      //     par_name & ".data = 0;"
      //   ];
      //   return (code, par_var);
      // },
      bound_cls() = {
        //## BAD: THE FIRST LINES OF CODE ARE THE SAME AS ABOVE...
        par_id = _counter_(nil);
        par_var = cls_var(par_id);
        par_name = to_c_expr(par_var);
        code = (
          "CLS" & printed(p.cls.arity) & " " & par_name & ";",
          par_name & ".fn_ptr = " & "cls_" & printed(cls2id(p.cls)) & ";"
        );
        if p.env != ():
          var_name = "cd_" & printed(par_id);
          code = code & ("OBJ " & var_name & "[" & printed(length(p.env)) & "];");
          for v @ i <- p.env:
            code = code & (var_name & "[" & printed(i) & "] = " & to_c_expr(v) & ";");
          ;
          code = code & (par_name & ".data = " & var_name & ";");
        else
          code = code & (par_name & ".data = 0;");
        ;
        return (code, par_var);
      };
  }


  String* compile_branch_to_c(BoolExpr cond, Instr* when_true, Instr* when_false, <Nat, nil> block_id)
  {
    assert when_true != ();
    code = ("if (" & to_c_expr(cond) & ")", "{")     &
           indent_lines(compile_to_c(when_true, block_id)) &
           ("}");
    if when_false != ():
      code = code & ("else", "{") & indent_lines(compile_to_c(when_false, block_id)) & ("}");
    ;
    return code;
  }


  String* compile_cls_scope_to_c(NamedArg var, ClsDef cls, Var* env, Instr+ body, <Nat, nil> block_id)
  {
    scope_id = printed(_counter_(nil));

    arity = cls.arity;
    env_size = length(env);

    var_str = _str_(_obj_(var)); //## BAD, DUPLICATED LOGIC
    arity_str = printed(arity);
    env_size_str = printed(env_size);

    fn_var = "env.n" & arity_str & "_" & var_str;  //## BAD, DUPLICATED LOGIC
    data_var = "env.C" & arity_str & "_" & var_str; //## BAD, DUPLICATED LOGIC
    fn_bk_var = "BF" & scope_id;
    data_bk_var = "BD" & scope_id;
    new_data_var = "ND" & scope_id;

    tmp = append(arity * ("OBJ") & ("const OBJ *", "ENV &"), ", ");

    code = (
      "OBJ (*" & fn_bk_var & ")(" & tmp & ") = " & fn_var & ";",
      "const OBJ *BD" & scope_id & " = " & data_var & ";"
    );

    code = code & ("OBJ " & new_data_var & "[" & env_size_str & "];") if env_size > 0;

    //## HERE I'M ADDING THE add_ref/release PAIRS IN THE WRONG LAYERS
    for i < env_size:
      code = code & (
        new_data_var & "[" & printed(i) & "] = " & to_c_var_ref_name(env[i]) & ";",
        "add_ref(" & new_data_var & "[" & printed(i) & "]);"
      );
    ;

    code = code & (
      fn_var & " = cls_" & printed(cls2id(cls)) & ";",
      data_var & " = " & {if env_size > 0 then new_data_var else "0"} & ";"
    );

    cache_clearing_code = gen_cache_clearing_code(var, cls.arity);

    code = code & cache_clearing_code & compile_to_c(body, block_id) & cache_clearing_code;

    code = code & (
      fn_var & " = " & fn_bk_var & ";",
      data_var & " = " & data_bk_var & ";"
    );

    for i < env_size:
      code = code & ("release(" & new_data_var & "[" & printed(i) & "]);");
    ;

    code = ("{") & indent_lines(code) & ("}");

    return code;
  }


  String* compile_runtime_check_to_c(AtomicExpr cond, String file, NzNat line, Maybe[String] text, <StdVar, NamedArg>* vars)
  {
    text_arg = if text != nil then printed(value(text)) else "0";
    header = (
      "if (is_symb(" & to_c_expr(cond) & ", symb_idx_false))",
      "{",
      "  print_assertion_failed_msg(" & printed(file) & ", " & printed(line) & ", " & text_arg & ");"
    );
    vars_content = ("  dump_var(" & printed(_str_(bare_id(v))) & ", " & to_c_var_ref_name(v) & ");" | v <- vars);
    footer = (
      "  soft_fail(0);",
      "}"
    );
    return header & vars_content & footer;
  }

  ///////////////////////////////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////////////////////////

  String to_c_arg(FnCallParam arg)
  {
    by_ref = arg :: <TableItVar, AnyRelVar>;
    return {if by_ref then "&" else ""} & to_c_expr(arg);
  }

  String mk_gen_call(String fn_name, String* leading_params, FnCallParam* params, String* trailing_params) =
    fn_name & "(" & append(leading_params & (to_c_arg(p) | p <- params) & trailing_params, ", ") & ");";

  String mk_gen_call(AnyVar var, String fn_name, String* leading_params, FnCallParam* params, String* trailing_params) =
    to_c_var_ref_name(var) & " = " & mk_gen_call(fn_name, leading_params, params, trailing_params);

  String mk_gen_call(AnyVar var, String fn_name, String* params) = mk_gen_call(var, fn_name, params, (), ());

  String mk_gen_call(String fn_name, String* params) = mk_gen_call(fn_name, params, (), ());

  String* mk_call(String fn_name, FnCallParam* params)             = (mk_gen_call(fn_name, (), params, ()));
  String* mk_call(AnyVar var, String fn_name, FnCallParam* params) = (mk_gen_call(var, fn_name, (), params, ()));

  String* mk_fn_call(String fn_name, FnCallParam* params)             = (mk_gen_call(fn_name, (), params, ("env")));
  String* mk_fn_call(AnyVar var, String fn_name, FnCallParam* params) = (mk_gen_call(var, fn_name, (), params, ("env")));

  //## AnyVar IS WRONG HERE, SHOULD ONLY BE OBJ/BOOL/INT VARS
  String* mk_assignment(AnyVar var, AnyTypeExpr value) = (to_c_var_ref_name(var) & " = " & to_c_expr(value) & ";");


  String* mk_cls_call(<ClsVar, NamedArg> cls_var, ObjVar var, ObjExpr* params):
    cls_var(+ symb?) = { //## NO NEED FOR NOW TO HANDLE THE CASE cls_var(Nat), AS THOSE VARIABLES ARE NEVER "CALLED", ONLY PASSED ON
      name = to_c_var_ref_name(cls_var);
      return (mk_gen_call(var, name & ".fn_ptr", (), params, (name & ".data", "env")));
    },
    named_arg(symb?) = {
      name = printed(length(params)) & "_" & _str_(_obj_(cls_var));
      return (mk_gen_call(var, "env.n" & name, (), params, ("env.C" & name, "env")));
    };
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

implicit typesymb2name : TypeSymbol -> String
{
  //## IT WOULD MUCH BETTER IF WE COULD USE mk_call HERE...
  String to_c_expr(ObjExpr expr):
    object(Atom a?)     = upper_camel_case(a) & "_S",
    object(Int n?)      = "make_int(" & printed(n) & ")",
    empty_seq           = "make_empty_seq()",
    empty_set           = "make_empty_set()",
    empty_bin_rel       = "make_empty_bin_rel()",
    empty_tern_rel      = "make_empty_tern_rel()",
    ObjVar              = to_c_var_ref_name(expr),
    at()                = "at("                 & to_c_expr(expr.seq)    & ", " & to_c_expr(expr.idx) & ")",
    search_or_lookup()  = "search_or_lookup("   & to_c_expr(expr.collection) & ", " & to_c_expr(expr.value) & ")",
    get_tag(e?)         = "get_tag("            & to_c_expr(e)           & ")",
    get_inner_obj(e?)   = "get_inner_obj("      & to_c_expr(e)           & ")",
    bool_obj(e?)        = "make_bool("          & to_c_expr(e)           & ")",
    int_obj(e?)         = "make_int("           & to_c_expr(e)           & ")",
    obj_neg(e?)         = "obj_neg("            & to_c_expr(e)           & ")",
    to_symb(e?)         = "to_symb("            & to_c_expr(e)           & ")",
    get_curr_obj(v?)    = "get_curr_obj("       & to_c_var_ref_name(v) & ")",
    get_curr_arg()      = get_curr_arg_to_c_expr(expr.var, expr.arg),
    rand_elem(e?)       = "rand_set_elem("      & to_c_expr(e)           & ")";


  String get_curr_arg_to_c_expr(BinRelItVar var, <0..2> arg)
  {
    assert arg != 2;
    return fn_names[arg] & "(" & to_c_var_ref_name(var) & ")";

    [<0..1> -> String] fn_names = [0 -> "get_curr_left_arg", 1 -> "get_curr_right_arg"];

  }


  String get_curr_arg_to_c_expr(TernRelItVar var, <0..2> arg)
  {
    return fn_names[arg] & "(" & to_c_var_ref_name(var) & ")";

    String+ fn_names = (
      "tern_rel_it_get_left_arg",
      "tern_rel_it_get_mid_arg",
      "tern_rel_it_get_right_arg"
    );
  }


  String to_c_expr(BoolExpr expr)           = to_c_expr(expr, false);
  String to_c_expr(ObjExpr expr, Bool)      = to_c_expr(expr);

  String to_c_expr(PendingInputVar v)       = to_c_var_ref_name(v);
  String to_c_expr(PendingInputVar v, Bool) = to_c_var_ref_name(v);


  String to_c_expr(BoolExpr expr, Bool parentesised):
    true                  = "true",
    false                 = "false",
    BoolVar               = to_c_var_ref_name(expr),
    is_symb(e?)           = "is_symb("        & to_c_expr(e) & ")",
    is_int(e?)            = "is_int("         & to_c_expr(e) & ")",
    is_float(e?)          = "is_float("       & to_c_expr(e) & ")",
    is_ne_set(e?)         = "is_ne_set("      & to_c_expr(e) & ")",
    is_ne_seq(e?)         = "is_ne_seq("      & to_c_expr(e) & ")",
    is_ne_map(e?)         = "is_ne_map("      & to_c_expr(e) & ")",
    is_ne_bin_rel(e?)     = "is_ne_bin_rel("  & to_c_expr(e) & ")",
    is_ne_tern_rel(e?)    = "is_ne_tern_rel(" & to_c_expr(e) & ")",
    is_tagged_obj(e?)     = "is_tag_obj(" & to_c_expr(e) & ")",

    neg(is_eq_bool() e?)  = to_nary_op(" != ", (e.expr1, e.expr2), parentesised), //## BAD
    neg(is_eq_int() e?)   = to_nary_op(" != ", (e.expr1, e.expr2), parentesised), //## BAD

    is_eq_bool()          = to_nary_op(" == ", (expr.expr1, expr.expr2), parentesised), //## BAD
    is_eq_int()           = to_nary_op(" == ", (expr.expr1, expr.expr2), parentesised), //## BAD

    is_eq()               = "are_eq(" & to_c_expr(expr.expr1) & ", " & to_c_expr(expr.expr2) & ")",

    //## BUG BUG BUG HUGE BUG HERE, NOT CHECKING THAT THE OPERANDS ARE INTEGERS
    is_gt()               = to_nary_op(" > ",  (expr.expr1, expr.expr2), parentesised), //## BAD
    is_ge()               = to_nary_op(" >= ", (expr.expr1, expr.expr2), parentesised), //## BAD
    is_lt()               = to_nary_op(" < ",  (expr.expr1, expr.expr2), parentesised), //## BAD
    is_le()               = to_nary_op(" <= ", (expr.expr1, expr.expr2), parentesised), //## BAD

    inline_is_eq()        = inline_is_eq_to_c_expr(expr.expr, expr.value, parentesised),

    is_out_of_range(v?)   = is_out_of_range_to_c_expr(v),

    is_blank(v?)          = "is_blank_obj(" & to_c_var_ref_name(v) & ")",
    is_null(v?)           = "is_null_obj(" & to_c_var_ref_name(v) & ")",

    contains()            = contains_to_c_expr(expr.coll, expr.entry),

    table_contains()      = table_contains_to_c_expr(expr.table, expr.tuple),

    neg(e?)               = parentesize("!" & to_c_expr(e, true), parentesised),

    and(es?)              = to_nary_op(" & ",  es, parentesised),
    or(es?)               = to_nary_op(" | ",  es, parentesised),
    and_then(es?)         = to_nary_op(" && ", es, parentesised),
    or_else(es?)          = to_nary_op(" || ", es, parentesised),

    eval_bool_fn()        = to_c_fn_name(expr.name) & "(" & to_nary_op(", ", expr.params, false) & ")";


  String is_out_of_range_to_c_expr(<SeqItVar, SetItVar, BinRelItVar, TernRelItVar> var) =
    "is_out_of_range(" & to_c_var_ref_name(var) & ")";


  String is_out_of_range_to_c_expr(TableItVar var)
  {
    fn_name = fn_names_by_arity[var.arity];
    return fn_name & "(&" & to_c_var_ref_name(var) & ")";

    [NzNat -> String] fn_names_by_arity = [
      1 -> "unary_table_iter_is_out_of_range",
      2 -> "binary_table_iter_is_out_of_range",
      3 -> "ternary_table_iter_is_out_of_range"
    ];
  }


  String contains_to_c_expr(ObjExpr rel, ObjExpr+ tuple)
  {
    fn_name = fn_names_by_arity[length(tuple)];
    return fn_name & "(" & append((to_c_expr(a) | a <- (rel) & tuple), ", ") & ")";

    [NzNat -> String] fn_names_by_arity = [
      1 -> "has_elem",
      2 -> "has_pair",
      3 -> "has_triple"
    ];
  }


  String table_contains_to_c_expr(AnyRelVar table, IntVar+ tuple)
  {
    fn_name = fn_names_by_arity[length(tuple)];
    return fn_name & "(&" & append((to_c_var_ref_name(v) | v <- (table) & tuple), ", ") & ")";

    [NzNat -> String] fn_names_by_arity = [
      1 -> "unary_table_contains",
      2 -> "binary_table_contains",
      3 -> "ternary_table_contains"
    ];
  }


  String inline_is_eq_to_c_expr(ObjExpr expr, InlineObj value, Bool parentesised)
  {
    expr_str = to_c_expr(expr, false);
    return match (value)
      object(Atom a?)   = "is_symb(" & expr_str & ", symb_idx_" & printed(a) & ")",
      object(Int n?)    = "is_int("  & expr_str & ", " & printed(n) & ")",
      empty_seq         = "is_empty_seq(" & expr_str & ")",
      empty_set         = "is_empty_set(" & expr_str & ")",
      empty_bin_rel     = "is_empty_bin_rel(" & expr_str & ")",
      empty_tern_rel    = "is_empty_tern_rel(" & expr_str & ")";
  }


  String to_c_expr(IntExpr expr) = to_c_expr(expr, false);

  String to_c_expr(IntExpr expr, Bool parentesised):
    Int                   = printed(expr),
    time_slot_length()    = to_c_time_slots_table_name(expr.automaton, expr.expr_id) &
                              "[" & to_c_expr(expr.time_slot) & "]",
    IntVar                = to_c_var_ref_name(expr),
    get_int_val(e?)       = "get_int_val("  & to_c_expr(e) & ")",
    get_seq_len(e?)       = "get_seq_len("  & to_c_expr(e) & ")",
    get_size(e?)          = "get_size(" & to_c_expr(e) & ")",
    minus(e?)             = "-" & to_c_expr(e, true),
    add()                 = to_nary_op(" + ", (expr.val1, expr.val2), parentesised),
    sub()                 = to_nary_op(" - ", (expr.val1, expr.val2), parentesised),
    mult()                = to_nary_op(" * ", (expr.val1, expr.val2), parentesised),
    div()                 = to_nary_op(" / ", (expr.val1, expr.val2), parentesised),
    mod()                 = to_nary_op(" % ", (expr.val1, expr.val2), parentesised),
    mantissa(e?)          = "mantissa(" & to_c_expr(e) & ")",
    dec_exp(e?)           = "dec_exp(" & to_c_expr(e) & ")",
    rand_nat(e?)          = "rand_nat(" & to_c_expr(e) & ")",
    lookup_value()        = "lookup_value(" & to_c_expr(expr.store) & ", " & to_c_expr(expr.value) & ")",
    lookup_value_ex()     = "lookup_value_ex(" & to_c_expr(expr.store) & ", " &
                              aux_struct_var_ref_name(expr.store) & ", " & to_c_expr(expr.value) & ")",
    get_tuple_field()     = get_tuple_field_to_c_expr(expr.iter, expr.field),
    unique_nat            = "unique_nat()",
    ticks                 = "get_tick_count()";


  String get_tuple_field_to_c_expr(TableItVar var, Nat field)
  {
    fn_name = fn_names_by_arity_and_field[(var.arity, field)];
    return fn_name & "(&" & to_c_var_ref_name(var) & ")";

    [(NzNat, Nat) -> String] fn_names_by_arity_and_field = [
      (1, 0) -> "unary_table_iter_get_field",
      (2, 0) -> "binary_table_iter_get_left_field",
      (2, 1) -> "binary_table_iter_get_right_field",
      (3, 0) -> "ternary_table_iter_get_left_field",
      (3, 1) -> "ternary_table_iter_get_middle_field",
      (3, 2) -> "ternary_table_iter_get_right_field"
    ];
  }


  String to_c_expr(<ElemVar, VecVar, ItVar, StreamVar, ClsVar, AnyRelVar, AnyValueStoreId> var) = to_c_var_ref_name(var);

  String to_c_expr(<blank_obj>) = "make_blank_obj()";
  String to_c_expr(<null_obj>) = "make_null_obj()";

  // String to_c_expr(ClsVar v) = to_c_var_ref_name(v);

  String to_nary_op(String op, AnyTypeExpr+ exprs, Bool parentesised)
  {
    expr = append((to_c_expr(e, true) | e <- exprs), op);
    expr = "(" & expr & ")" if length(exprs) > 1 and parentesised;
    return expr;
  }

  //////////////////////////////////////////////////////////////////////////////

  String to_c_fn_name(FnSymbol fn_symb, Nat arity):
    fn_symbol(symb?)    = upper_camel_case(symb) & "_" & printed(arity),
    op_symbol(op?)      = _str_(op),
    nested_fn_symbol()  = to_c_fn_name(fn_symb.outer, arity) & "__" & to_c_fn_name(fn_symb.inner, arity),
    unique_fn_symbol()  = to_c_fn_name(fn_symb.symbol, arity) & uppercase_encoding(fn_symb.id); //## IS THIS ENOUGHT TO AVOID CONFLICTS?

  String to_c_fn_name(BoolFnName n, Nat) = to_c_fn_name(n);
  String to_c_fn_name(BoolFnName): memb_test(ts?)   = "is_" & typesymb2name(ts); //## UGLY UGLY UGLY

  String to_c_fn_name(ProcSymbol s, Nat) = to_c_fn_name(s);
  String to_c_fn_name(ProcSymbol): proc_symbol(s?)  = upper_camel_case(s) & "_P"; //## UGLY UGLY UGLY
}
