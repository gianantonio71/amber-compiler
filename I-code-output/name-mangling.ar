String to_c_var_decl_name(<ObjVar, PendingInputVar, BoolVar, IntVar, AnyAutoVar, AnyDBVar, AnyRelVar, AnyValueStoreId> v) = to_c_var_name(v, false);
String to_c_var_ref_name(<ObjVar, PendingInputVar, BoolVar, IntVar, AnyAutoVar, AnyDBVar, AnyRelVar, AnyValueStoreId> v)  = to_c_var_name(v, true);

String to_c_var_decl_name(<VecVar, ItVar, StreamVar, AnyClsVar> v) = to_c_var_name(v);
String to_c_var_ref_name(<VecVar, ItVar, StreamVar, AnyClsVar> v)  = to_c_var_name(v);

/////////////////////////////////////////////////////////////////////////////////////

String to_c_var_decl_name(MembIntVectVar v) =
  nodes_to_update_vect_var()  = "nodes_to_update_" & printed(v.level) & "[" & printed(v.size) & "]",
  changed_outputs()           = "changed_outputs[" & printed(v.size) & "]";

/////////////////////////////////////////////////////////////////////////////////////

String to_c_var_name(VecVar v)          = "V" & printed(v.id);
String to_c_var_name(SetItVar v)        = "s" & printed(bare_id_2(v));
String to_c_var_name(SeqItVar v)        = "q" & printed(bare_id_2(v));
String to_c_var_name(BinRelItVar v)     = "br" & printed(bare_id_2(v));
String to_c_var_name(TernRelItVar v)    = "tr" & printed(bare_id_2(v));
String to_c_var_name(TableItVar v)      = [1 -> "ur", 2 -> "br", 3 -> "tr"][v.arity] & printed(v.id);
String to_c_var_name(StreamVar v)       = "t" & printed(bare_id_2(v));

String to_c_var_name(AnyClsVar v) =
  cls_var(+ a?)     = upper_camel_case(a) & "_C",
  cls_var(* n?)     = "c" & printed(n),
  capt_cls_var(n?)  = "C[" & printed(n) & "]";

/////////////////////////////////////////////////////////////////////////////////////

String to_c_var_name(<ObjVar, PendingInputVar> v, Bool add_prefix) {
  assert match (v)
    qual_auto_memb_var()  |
    qual_db_memb_var()    = add_prefix,
    _                     = true;

  prefix = if add_prefix
    then match (v)
      auto_memb_var_copy()  |
      pending_state_var()   = "self_aux->",
      _                     = "self->"
    else "";

  return match (v)
    var(Atom a?)                  = upper_camel_case(a) & "_V",
    fn_par(Nat n?)                = "p" & printed(n),
    impl_arg(Atom a?)             = "env."  & _str_(a) & "_V",
    capt_var(Nat n?)              = "D["  & printed(n) & "]",
    memb_var(Atom a?)             = prefix & upper_camel_case(a),
    auto_memb_var(a?)             = prefix & upper_camel_case(a) & "_AMV",
    qual_auto_memb_var()          = to_c_var_name(v.auto_var, true) & "." & to_c_var_name(v.memb_var, false),
    qual_db_memb_var()            = to_c_var_name(v.db_var, true) & "." & to_c_var_name(v.memb_var, false),
    watched_signal_value_var(a?)  = prefix & upper_camel_case(a) & "_WS",
    auto_memb_var_copy(Atom a?)   = prefix & upper_camel_case(a) & "_O",
    pending_state_var(a?)         = prefix & upper_camel_case(a) & "_PS",
    lvar(Nat n?)                  = "l" & printed(n),
    evar()                        = "V" & printed(v.id) & "[" & to_c_idx_expr(v.idx) & "]",
    pending_input_var(Atom a?)    = prefix & upper_camel_case(a) & "_new";
}


String to_c_var_name(BoolVar v, Bool add_prefix) {
  prefix = if add_prefix
    then match (v)
      memb_has_changed()    |
      rep_cond_value_var()  |
      rep_cond_is_def_var() = "self_aux->",
      _                     = "self->"
    else "";

  return match (v)
    bvar(n?)                                      = "b" & printed(n),
    memb_has_changed(id?)                         = prefix & "hc_" & upper_camel_case(id),
    rep_cond_value_var(id?)                       = prefix & "rc" & printed(id),
    rep_cond_is_def_var(id?)                      = prefix & "rcd" & printed(id),
    invalidate_cond_expr_cache                    = "inval_cache",
    cond_value_var(n?)                            = prefix & "cond_" & printed(n),
    cond_expr_up_to_date_var(Nat n?)              = prefix & "cond_" & printed(n) & "_expr_up_to_date",
    cond_expr_value_var(Nat n?)                   = prefix & "cond_" & printed(n) & "_expr",
    cond_expr_is_def_var(Nat n?)                  = prefix & "cond_" & printed(n) & "_expr_is_def",
    cond_is_def_var(n?)                           = prefix & "cond_" & printed(n) & "_is_def",
    watched_signal_up_to_date_var(a?)             = prefix & upper_camel_case(a) & "_WSUTD",
    up_to_date_var(std_block_node_id(a?))         = prefix & upper_camel_case(a) & "_UTD",
    up_to_date_var(cond_node_id(n?))              = prefix & "cond_" & printed(n) & "_UTD",
    up_to_date_var(nested_auto_node_id(a?))       = prefix & upper_camel_case(a) & "_A_UTD",
    up_to_date_var(nested_auto_input_id() id?)    = prefix & upper_camel_case(id.auto) & "_" & upper_camel_case(id.input) & "_UTD",
    is_new                                        = prefix & "is_new";
}


String to_c_var_name(IntVar v, Bool add_prefix) {
  assert match (v)
    changed_output()  |
    elapsed_time()    = add_prefix,
    _                 = true;

  prefix = if add_prefix then "self->" else "";
  return match (v)
    ivar(n?)                            = "i" & printed(n),
    curr_time                           = "curr_time",
    update_time                         = "update_time",
    update_source_var(a?)               = prefix & upper_camel_case(a) & "_update_source",
    update_count_var(l?)                = prefix & "update_count_" & printed(l),
    nodes_to_update_var()               = prefix & "nodes_to_update_" & printed(v.level) & "[" & to_c_idx_expr(v.index) & "]",
    next_trigger_time_var(a?)           = prefix & upper_camel_case(a) & "_next_trigger_time",
    curr_time_slot_var(a?)              = prefix & upper_camel_case(a) & "_curr_time_slot",
    time_triggers_count_var             = prefix & "time_triggers_count",
    trigger_times_heap_var(i?)          = prefix & "trigger_times_heap[" & printed(i) & "]",
    time_varying_cond_ids_heap_var(i?)  = prefix & "time_varying_cond_ids_heap[" & printed(i) & "]",
    last_update_time                    = prefix & "last_update_time",
    elapsed_time                        = prefix & "elapsed_time",
    changed_outputs_count               = prefix & "changed_outputs_count",
    changed_output()                    = prefix & "changed_outputs[" & to_c_idx_expr(v.index) & "]",
    elapsed_time(av?)                   = to_c_var_name(av, false) & ".elapsed_time",
    nested_auto_int_var()               = to_c_var_name(v.auto_var, true) & "." & to_c_var_name(v.memb_var, false);
}


String to_c_var_name(AnyAutoVar v, Bool add_prefix) =
  loc_auto_var(a?)  = upper_camel_case(a) & "_A",
  memb_auto_var(a?) = {if add_prefix then "self->" else ""} & upper_camel_case(a) & "_A";


String to_c_var_name(AnyDBVar v, Bool add_prefix) =
  loc_db_var(a?)  = upper_camel_case(a) & "_DB",
  memb_db_var(a?) = {if add_prefix then "self->" else ""} & upper_camel_case(a) & "_DB",
  nested_db_var() = to_c_var_name(v.outer, add_prefix) & "." & to_c_var_name(v.inner, false);


String to_c_var_name(AnyRelVar v, Bool add_prefix) =
  rel_var(a?)     = {if add_prefix then "self->" else ""} & upper_camel_case(a) & "_RV",
  qual_rel_var()  = to_c_var_name(v.db_var, add_prefix) & "." & to_c_var_name(v.rel_var, false);


String to_c_var_name(AnyValueStoreId v, Bool add_prefix) =
  value_store_id(n?)      = {if add_prefix then "&self->" else ""} & "VS_" & printed(n),
  nested_value_store_id() = { assert add_prefix;
                              db_var_str = to_c_var_name(v.db_var, true);
                              return "&" & db_var_str & "." & to_c_var_name(v.store_id, false);
                            };

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

String to_c_idx_expr(Nat n)                             = printed(n);
String to_c_idx_expr(IntVar v)                          = to_c_var_ref_name(v);
String to_c_idx_expr(<add(val1: IntVar, val2: Nat)> e)  = to_c_var_ref_name(e.val1) & " + " & printed(e.val2);

////////////////////////////////////////////////////////////////////////////////

String symb_idx_name(SymbObj) =
  object(s?)  = "symb_idx_" & _str_(s);

////////////////////////////////////////////////////////////////////////////////

String pending_updates_var_decl_name(RelVar rel_var) =
  rel_var(a?) = upper_camel_case(a) & "_PUV";

String pending_updates_var_ref_name(RelVar rel_var) = "self_aux->" & pending_updates_var_decl_name(rel_var);


String aux_struct_var_decl_name(MembDBVar db_var) = to_c_var_decl_name(db_var) & "_AUX";

String aux_struct_var_ref_name(MembDBVar db_var) = "&self_aux->" & aux_struct_var_decl_name(db_var);

String aux_struct_var_decl_name(ValueStoreId vs) =
  value_store_id(n?)  = "VSU_" & printed(n);

String aux_struct_var_ref_name(ValueStoreId vs) = "&self_aux->" & aux_struct_var_decl_name(vs);

////////////////////////////////////////////////////////////////////////////////

String var_decl(AnyVar v) =
  ObjVar        = "OBJ "            & to_c_var_decl_name(v) & ";",
  VecVar        = "OBJ "            & to_c_var_decl_name(v) & "[" & printed(v.size) & "];",
  BoolVar       = "bool "           & to_c_var_decl_name(v) & ";",
  IntVar        = "int64 "          & to_c_var_decl_name(v) & ";",
  SeqItVar      = "SEQ_ITER "       & to_c_var_decl_name(v) & ";",
  SetItVar      = "SET_ITER "       & to_c_var_decl_name(v) & ";",
  BinRelItVar   = "BIN_REL_ITER "   & to_c_var_decl_name(v) & ";",
  TernRelItVar  = "TERN_REL_ITER "  & to_c_var_decl_name(v) & ";",
  StreamVar     = "STREAM "         & to_c_var_decl_name(v) & ";",
  TableItVar    = table_it_var_type[v.arity] & " " & to_c_var_decl_name(v) & ";";


[NzNat -> String] table_it_var_type = [
  1 -> "UNARY_TABLE_ITER",
  2 -> "BINARY_TABLE_ITER",
  3 -> "TERNARY_TABLE_ITER"
];


String pending_updates_var_type(Table table) {
  return names_by_arity[arity(table)];

  [NzNat -> String] names_by_arity = [
    1 -> "UNARY_TABLE_UPDATES",
    2 -> "BINARY_TABLE_UPDATES",
    3 -> "TERNARY_TABLE_UPDATES"
  ];
}

////////////////////////////////////////////////////////////////////////////////

String to_c_semi_const_memo_var_name(<ProcSymbol, BoolFnName>) = {fail;};

String to_c_semi_const_memo_var_name(FnSymbol fn_symb) {
  return to_c_fn_name(fn_symb) & "_CV";

  String to_c_fn_name(FnSymbol fn_symb) =
    fn_symbol(symb?)    = upper_camel_case(symb),
    op_symbol(op?)      = {fail;},
    nested_fn_symbol()  = to_c_fn_name(fn_symb.outer) & "__" & to_c_fn_name(fn_symb.inner),
    unique_fn_symbol()  = to_c_fn_name(fn_symb.symbol) & uppercase_encoding(fn_symb.id); ## IS THIS ENOUGHT TO AVOID CONFLICTS?
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

String to_c_time_slots_table_name(AutoSymbol auto_name, Atom table_id) =
  to_c_name(auto_name) & "_" & upper_camel_case(table_id) & "_time_slots_table";


String var_c_type(ObjVar)           = "OBJ";
String var_c_type(IntVar)           = "int64";
String var_c_type(MembIntVectVar)   = "int64";
String var_c_type(BoolVar)          = "bool";


String table_c_type(Table table) {
  return names_by_arity[arity(table)];

  [NzNat -> String] names_by_arity = [
    1 -> "UNARY_TABLE",
    2 -> "BINARY_TABLE",
    3 -> "TERNARY_TABLE"
  ];
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

String fn_name_to_str(FnSymbol fn_symb) =
  fn_symbol(symb?)    = _str_(symb),
  op_symbol(op?)      = _str_(op),
  ## BUG: THIS DOESN'T SPECIFY WHICH OF THE OUTER FUNCTIONS
  ## WITH THE SAME NAME THE NESTED FUNCTION BELONGS TO
  nested_fn_symbol()  = fn_name_to_str(fn_symb.outer) & ":" & fn_name_to_str(fn_symb.inner),
  unique_fn_symbol()  = fn_name_to_str(fn_symb.symbol); ## BAD: THE DISPATCH FUNCTION WILL APPEAR ON THE STACK, AND IT WILL BE INDISTINGUISHABLE FROM ONE OF THE REAL FUNCTIONS

String fn_name_to_str(ProcSymbol proc_symbol) = proc_symbol(s?) = capitalize(_str_(s), false); ## UGLY UGLY UGLY


String to_c_const(<blank, undefined> state) = if state == :blank then "make_blank_obj()" else "make_null_obj()";

////////////////////////////////////////////////////////////////////////////////

String to_c_name(AutoSymbol) = auto_symbol(a?) = upper_camel_case(a) & "_AT";

String to_c_name(DBSymbol) = db_symbol(a?) = upper_camel_case(a) & "_DBT";

String aux_struct_c_name(<AutoSymbol, DBSymbol> symb) = to_c_name(symb) & "_AUX";

String to_c_name(MethodId meth_id) {
  id_str = if meth_id.id? then uppercase_encoding(meth_id.id) else "";
  return upper_camel_case(bare_id(meth_id.symbol)) & "_M" & printed(meth_id.arity) & id_str;
}

String to_c_name(UpdateId id) =
  main_handler    = "HANDLER",
  handler_id(n?)  = "HANDLER_" & printed(n),
  update_id()     = { id_str = if id.id? then uppercase_encoding(id.id) else "";
                      return upper_camel_case(bare_id(id.symbol)) & "_U" & printed(id.arity) & id_str;
                    };

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

String copy_state_proc_name(DBSymbol db_symb) = to_c_name(db_symb) & "_COPY_STATE";

String set_state_proc_name(DBSymbol db_symb) = to_c_name(db_symb) & "_SET_STATE";

String set_state_entry_point_name(DBSymbol db_symb) = to_c_name(db_symb) & "_SET_STATE_ENTRY_POINT";

String aux_struct_init_proc_name(DBSymbol db_symb) = to_c_name(db_symb) & "_AUX_INIT";

String aux_struct_cleanup_proc_name(DBSymbol db_symb) = to_c_name(db_symb) & "_AUX_CLEANUP";

String updates_copy_proc_name(DBSymbol db_symb) = to_c_name(db_symb) & "_COPY";

String updates_apply_proc_name(DBSymbol db_symb) = to_c_name(db_symb) & "_APPLY";

String updates_finish_proc_name(DBSymbol db_symb) = to_c_name(db_symb) & "_FINISH";

String updates_check_proc_name(DBSymbol db_symb) = to_c_name(db_symb) & "_CHECK";

String update_entry_point_name(DBSymbol db) = to_c_name(db) & "_EP";

String init_method_name(DBSymbol db) = to_c_name(db) & "_INIT";

String cleanup_method_name(DBSymbol db) = to_c_name(db) & "_CLEANUP";

String update_name(DBSymbol db, UpdateId id) = to_c_name(db) & "_" & to_c_name(id);

String input_set_method_name(AutoSymbol auto, Atom input)   = to_c_name(auto) & "_" & upper_camel_case(input) & "_SET";

String user_def_method_name(<AutoSymbol, DBSymbol> type, MethodId method) = to_c_name(type) & "_" & to_c_name(method);

String pre_init_method_name(AutoSymbol name)    = to_c_name(name) & "_PREINIT";

String node_update_method_name(AutoSymbol type, BlockNodeId node) = node_specific_method_name_prefix(node, type) & "_UPDATE";

String apply_method_name(AutoSymbol name)  = to_c_name(name) & "_APPLY";

String cleanup_method_name(AutoSymbol name) = to_c_name(name) & "_CLEANUP";

String queue_update_method_name(BlockNodeId id, AutoSymbol auto) = node_specific_method_name_prefix(id, auto) & "_QUEUE_UPDATE";

String node_specific_method_name_prefix(BlockNodeId id, AutoSymbol auto) =
  std_block_node_id(a?)   = to_c_name(auto) & "_" & upper_camel_case(a),
  cond_node_id(n?)        = to_c_name(auto) & "_" & printed(n),
  nested_auto_node_id(a?) = to_c_name(auto) & "_" & upper_camel_case(a) & "_AUTO",
  nested_auto_input_id()  = to_c_name(auto) & "_" & upper_camel_case(id.auto) & "_" & upper_camel_case(id.input);


String insert_timer_method_name(AutoSymbol auto) = to_c_name(auto) & "_INSERT_TIMER";

String clear_timer_method_name(AutoSymbol auto) = to_c_name(auto) & "_CLEAR_TIMER";

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

String const_int_seq_c_name(Nat seq_id) = "const_int_seq_" & printed(seq_id);

//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////

String to_c_fn_name(FnSymbol fn_symb, Nat arity) =
  fn_symbol(symb?)    = upper_camel_case(symb) & "_" & printed(arity),
  op_symbol(op?)      = _str_(op),
  nested_fn_symbol()  = to_c_fn_name(fn_symb.outer, arity) & "__" & to_c_fn_name(fn_symb.inner, arity),
  unique_fn_symbol()  = to_c_fn_name(fn_symb.symbol, arity) & uppercase_encoding(fn_symb.id); ## IS THIS ENOUGHT TO AVOID CONFLICTS?

String to_c_fn_name(BoolFnName n, Nat) = to_c_fn_name(n);
String to_c_fn_name(BoolFnName) =
  memb_test(+ a?)       = "is_" & upper_camel_case(a),
  memb_test(* n?)       = "is_type_" & printed(n),
  memb_test(a1?, + a2?) = "is_" & upper_camel_case(a2) & "_" & upper_camel_case(a1),
  memb_test(a?, * n?)   = "is_" & upper_camel_case(a) & " " & printed(n);

String to_c_fn_name(ProcSymbol s, Nat) = to_c_fn_name(s);
String to_c_fn_name(ProcSymbol) = proc_symbol(s?)  = upper_camel_case(s) & "_P"; ## UGLY UGLY UGLY
