NzNat syn_case_arity(SynCase c) = nz_nat(length(c.patterns));

Nat arity(SynTypeSymbol type):
  type_symbol()     = 0,
  par_type_symbol() = length(type.params);

Nat   syn_type_arity(SynType)          = 0;
NzNat syn_type_arity(SynClsType type)  = length(type.in_types);

Nat arity(SynTypedef)         = 0;
NzNat arity(SynParTypedef td) = length(td.params);

Nat arity(SynFnDef d) = length(d.args);


Nat arity(SynProcDef p) = length(p.args);

Nat arity(SynSgn s) = length(s.args);

Nat arity(SynFnArg arg)
{
  // return 0 if not arg.type?;
  type = arg.type;
  return match (type)
    cls_type() = length(type.in_types),
    _         = 0;
}


[]         type_vars(SynTypedef)        = [];
[+TypeVar] type_vars(SynParTypedef td)  = set(td.params);

////////////////////////////////////////////////////////////////////////////////

[Atom -> [type: NeType, discrete: Bool]] inputs(SynAutoDef auto_def) =
  [i.name -> [type: syn_type_to_type(i.type, nil), discrete: i.discrete] : i <- set(auto_def.decls), syn_input() << i];

[Atom -> [type: NeType, discrete: Bool]] outputs(SynAutoDef auto_def) =
  [o.name -> [type: syn_type_to_type(o.type, nil), discrete: o.discrete] : o <- set(auto_def.decls), syn_output() << o];
