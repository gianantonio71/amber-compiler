NzNat syn_case_arity(SynCase c) = nz_nat(length(c.patterns));

Nat arity(SynTypeSymbol type):
  type_symbol()     = 0,
  par_type_symbol() = length(type.params);

Nat syn_type_arity(SynType)          = 0;
NzNat syn_type_arity(SynClsType type)  = length(type.in_types);

Nat arity(SynTypedef)         = 0;
NzNat arity(SynParTypedef td) = length(td.params);

Nat arity(SynFnDef d) = length(d.params);


Nat arity(SynProcDef p) = length(p.params);

Nat arity(SynSgn s) = length(s.params);

Nat arity(SynFnArg arg)
{
  // return 0 if not arg.type?;
  type = arg.type;
  return match (type)
    cls_type() = length(type.in_types),
    _         = 0;
  ;
}


<{}>     type_vars(SynTypedef)        = {};
TypeVar+ type_vars(SynParTypedef td)  = set(td.params);
