// Variables that require full reference counting
//   var(Atom)
//   lvar(Nat)


// Always inline, no reference counting of any sort is needed
//   bvar(Nat)
//   ivar(Nat)


// External, constant and outside the control of the function.
//   fn_par(Nat)
//   cls_ext_par(Nat)


// Can be managed deterministicly. No need to track them
// ELABORATE ON THEIR USAGE A BIT
//   memb_var(Atom)
//   memb_copy_var(Atom)
//   pending_input_var(Atom)
//   pending_state_var(Atom)  ## NOT AT ALL SURE ABOUT THIS ONE


// Can be temporarily set, and in that case both the current
// and the old value must be kept alive
//   named_arg(Atom)


// Always local, with deterministic scope, and no need for reference counting
// The collection object they iterate over must be kept alive for as long as
// they are in scope
//   set_it_var(Nat)
//   seq_it_var(Nat)
//   map_it_var(Nat)


// Always local, and with deterministic scope, so again no need for reference counting
// They own the objects they contain. evar() can only be assigned to, and never read from.
// Moreover, they are always assigned at most once, so no need to ever release their
// content. The corresponding vvar() must be used once and only once. svar() can only
// be appended to, and they must be used once and only once.
//   svar(Nat)
//   evar(id: Nat, idx: <Nat, IntVar>)
//   vvar(id: Nat, size: NzNat)

type TrkObjVar  = StdVar, LocVar, MembCopyVar;
type TrkVar     = TrkObjVar, ItVar;

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

Maybe[StdObjVar] maybe_var(AtomicExpr expr) = if expr :: StdObjVar then just(expr) else nil;

<nil> maybe_var(AtomicBoolExpr) = {fail;};

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

TrkVar* tracked_vars_used(AnyTypeExpr expr) = tracked_vars_used_by_any_type_expr(expr);

TrkVar* tracked_vars_used(<FloatExpr, RefObjExpr> expr) =
  retrieve_from_nested_low_level_exprs(expr, tracked_vars_used_by_any_type_expr);

TrkVar* tracked_vars_used_by_any_type_expr(AnyTypeExpr expr):
  is_out_of_range(iv?)  = {iv},
  get_curr_obj(iv?)     = {iv},
  get_curr_key(iv?)     = {iv},
  get_curr_value(iv?)   = {iv},
  TrkVar                = {expr},
  _                     = retrieve_from_nested_low_level_exprs(expr, tracked_vars_used_by_any_type_expr);

<StdVar, LocVar>* tracked_vars_used(BoundCls cls):
  ClsVar      = {},
  bound_cls() = {v : v <- set(cls.env), v :: <StdVar, LocVar>};

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

TrkVar* trk_vars(AnyVar v)    = {v if v :: TrkVar};
TrkVar* trk_vars(AnyVar* vs)  = {v : v <- vs, v :: TrkVar};

////////////////////////////////////////////////////////////////////////////////

TrkVar* vars_set(NodeInfo info):
  std_node(i?)        = vars_set(i),
  branch_node()       = {},
  switch_node()       = {},
  set_cls_par_node()  = {};


TrkVar* vars_set(BasicInstr instr):
  init_stream()           = {},
  append()                = {},
  set_at()                = {},
  lookup()                = trk_vars(instr.var),
  ext_lookup()            = trk_vars(instr.var),
  get_set_iter()          = trk_vars(instr.var),
  get_seq_iter()          = trk_vars(instr.var),
  get_map_iter()          = trk_vars(instr.var),
  move_forward()          = {},
  set_var()               = trk_vars(instr.var),
  set_bvar()              = {},
  set_ivar()              = {},
  set_rc_var()            = trk_vars(instr.var),
  init_memb_var()         = {}, //## NOT SURE ABOUT THIS ONE...
  reset_memb_var()        = {}, //## NOT SURE ABOUT THIS ONE...
  clear_loc_var(v?)       = {v},
  add_ref()               = {},
  release()               = {},
  print_obj()             = {},
  no_op                   = {},
  call_proc()             = trk_vars({instr.var if instr.var?}),
  call_cls()              = trk_vars(instr.var),
  queue_update()          = {},
  queue_cond_update()     = {},
  insert_timer()          = {},
  clear_timer()           = {},
  auto_init()             = {},
  auto_cleanup()          = {},
  set_input()             = {},
  prop_input_updates()    = {},
  call_method()           = trk_vars({instr.res_var if instr.res_var?}),
  push_call_info()        = {},
  pop_call_info           = {},
  runtime_check()         = {};


TrkVar* vars_set(JumpInstr) = {};


TrkVar* vars_used(NodeInfo info):
  std_node(i?)        = vars_used(i),
  branch_node(e?)     = tracked_vars_used(e),
  switch_node()       = {},
  set_cls_par_node()  = tracked_vars_used(info.cls);


TrkVar* vars_used(BasicInstr instr):
  init_stream()         = {},
  append()              = tracked_vars_used(instr.obj),
  set_at()              = tracked_vars_used(instr.value) & trk_vars(instr.var), //## NOT SURE ABOUT THIS ONE.
  lookup()              = tracked_vars_used(instr.map) & tracked_vars_used(instr.key),
  ext_lookup()          = tracked_vars_used(instr.map),
  get_set_iter()        = tracked_vars_used(instr.src),
  get_seq_iter()        = tracked_vars_used(instr.src),
  get_map_iter()        = tracked_vars_used(instr.src),
  // move_forward(iv?)    = {iv},
  move_forward()        = {},
  set_var()             = tracked_vars_used(instr.value),
  set_bvar()            = tracked_vars_used(instr.value),
  set_ivar()            = tracked_vars_used(instr.value),
  set_rc_var()          = tracked_vars_used(instr.value),
  init_memb_var()       = {},
  reset_memb_var()      = {},
  clear_loc_var()       = {},
  add_ref()             = {fail;},
  release()             = {fail;},
  print_obj(e?)         = tracked_vars_used(instr.obj),
  no_op                 = {},
  call_proc()           = seq_union([tracked_vars_used(p) : p <- instr.params]),
  call_cls()            = seq_union([tracked_vars_used(p) : p <- instr.params]),
  queue_update()        = {},
  queue_cond_update()   = {},
  insert_timer()        = tracked_vars_used(instr.idx) & tracked_vars_used(instr.time),
  clear_timer()         = {},
  auto_init()           = {},
  auto_cleanup()        = {},
  set_input()           = {val = instr.value; return if val != nil then tracked_vars_used(value(val)) else {};},
  prop_input_updates()  = {},
  call_method()         = seq_union([tracked_vars_used(a) : a <- instr.args]),
  push_call_info()      = {},
  pop_call_info         = {},
  runtime_check()       = tracked_vars_used(instr.cond);


TrkVar* vars_used(JumpInstr instr):
  break_loop    = {},
  exit_block    = {},
  ret_val(e?)   = tracked_vars_used(e),
  terminate     = {};
