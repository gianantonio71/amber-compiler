implicit syn_prg : SynPrg, syn_artifact : SynArtifact, impl_args : [NamedArg -> Nat], actual_arg_arity : Nat
{
  ExprWFError* named_args_call_local_wf_errors(SynNamedArgsCall expr, [DefVar] def_vars)
  {
    arity = length(expr.args);
    resols = resolve_by_priority_as_fn_name(expr.name, arity, def_vars);
    if resols == []:
      // return (wrong_fn_arity(expr, nonempty(keys(arity_to_info)))) if not has_key(arity_to_info, actual_arity);
      //## CHECK HERE IF THERE ARE OTHER FUNCTIONS WITH THE SAME NAME BUT DIFFERENT ARITIES
      return (unknown_function(expr));
    else
      return fn_call_wf_errors(only(resols), expr.args, expr.named_args, def_vars);
    ;
  }


  ExprWFError* fn_call_wf_errors(FnFamilyId fn_name, SynExpr* args, (NamedArg, StdVar*, SynExpr)* named_args, [DefVar] def_vars)
  {
    arity = length(args);

    exp_arg_arities = arg_arities(fn_name, arity);
    exp_named_args_arities = named_args_arities(fn_name, arity);

    pos_arg_errs = join((actual_arg_wf_errors(a, exp_arg_arities(i), def_vars) | a @ i <- args));
    all_named_arg_errs = [named_args_wf_errors(named_args, enps, def_vars) | enps <- exp_named_args_arities];

    named_arg_errs = if in((), all_named_arg_errs) then () else join(rand_sort(all_named_arg_errs));

    return pos_arg_errs & named_arg_errs;


    ExprWFError* actual_arg_wf_errors(SynExpr actual_arg, Nat exp_arity, [DefVar] def_vars)
    {
      if exp_arity == 0 or not actual_arg :: ConstOrVar:
        new_arg_arity = if exp_arity != 0 then exp_arity else actual_arg_arity;
        return expr_wf_errors(actual_arg, def_vars, actual_arg_arity=new_arg_arity);
      ;

      //  Here the function expects a closure. The parameter can be:
      //    1) A normal expression, implicitly defining a constant functions
      //    2) The name of a an existing closure
      //    3) The name of a function
      //    4) A closure expression

      symb = match (actual_arg) const_or_var(a?) = a;
      resols = resolve_by_priority_as_cls_expr(symb, exp_arity, std_vars(def_vars));
      return (invalid_expr(actual_arg) if size(resols) != 1) if resols != [];

      //## BAD BAD BAD: ENCODING THE MAXIMUM ARITY OF THE CLOSURES.
      //## SHOULD ALSO CHECK THAT NO FUNCTION HAS BEEN DISCARDED BECAUSE IT HAS NAMED ARGUMENTS
      arities = [i | i <- set((nz_nat(i+1) | i < 20)), resolve_by_priority_as_cls_expr(symb, i, std_vars(def_vars)) != []];
      if arities == []:
        return (undef_var_or_const(symb));
      else
        return (wrong_cls_arg_arity(actual_arg, exp_arity, arities));
      ;
    }


    ExprWFError* named_args_wf_errors((NamedArg, StdVar*, SynExpr)* redef_named_args, [NamedArg -> Nat] exp_named_args, [DefVar] def_vars)
    {
      redef_named_args_arity_map = merge(set(([p -> length(vs)] | p, vs, unused_var <- redef_named_args)));
      errs = ();
      for p, a <- rand_sort_pairs(exp_named_args):
        if has_key(redef_named_args_arity_map, p):
          // Checking arguments explicitly passed arguments first
          actual_arity = redef_named_args_arity_map[p];
          errs = (errs || invalid_named_arg_arity(p, a, actual_arity)) if actual_arity != a;
        else
          errs = errs & exp_named_arg_errors(p, a, def_vars);
        ;
      ;
      for np, vs, e <- redef_named_args:
        errs = (errs || invalid_named_arg(np)) if not has_key(exp_named_args, np);
        errs = errs & expr_wf_errors(e, def_vars & set(vs));
      ;
      return errs;
    }
  }
}
