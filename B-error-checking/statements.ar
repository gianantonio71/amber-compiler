implicit syn_prg : SynPrg, syn_artifact : SynArtifact, impl_args : [NamedArg -> Nat], actual_arg_arity : Nat
{
  ExprWFError* root_stmt_block_wf_errors(SynStmt+ stmts, [DefVar] ext_vars, Bool has_ret_val, Bool allow_proc_calls)
  {
    let allow_proc_calls=allow_proc_calls, has_return_value=has_ret_val, is_inside_loop=false:
      errs = stmts_wf_errors(stmts, ext_vars, []);
    ;
    return if errs != () then errs else (missing_ret_stmt(stmts) if has_ret_val and syn_may_fall_through(stmts));
  }
}


implicit
{
  syn_prg           : SynPrg,
  syn_artifact      : SynArtifact,
  impl_args         : [NamedArg -> Nat],
  actual_arg_arity  : Nat,
  allow_proc_calls  : Bool,
  has_return_value  : Bool,
  is_inside_loop    : Bool;


  ExprWFError* stmts_wf_errors(SynStmt+ stmts, [DefVar] ro_vars, [StdVar] rw_vars)
  {
    curr_rw_vars = rw_vars;
    for s @ i <- stmts:
      errs = stmt_wf_errors(s, ro_vars, curr_rw_vars);
      return errs if errs != ();
      new_vars = syn_new_vars(s);
      fail if not new_vars :: [StdVar]; //## BAD BAD BAD: FIX THIS
      curr_rw_vars = curr_rw_vars & new_vars;
      return (unreachable_stmt(stmts[i+1])) if not syn_may_fall_through(s) and i + 1 < length(stmts);
    ;
    return ();
  }


  ExprWFError* stmt_wf_errors(SynStmt stmt, [DefVar] ro_vars, [StdVar] rw_vars)
  {
    errs = stmt_local_wf_errors(stmt, ro_vars, rw_vars);
    return if errs != () then errs else stmt_nested_wf_errors(stmt, ro_vars, rw_vars);
  }


  ExprWFError* stmt_nested_wf_errors(SynStmt stmt, [DefVar] ro_vars, [StdVar] rw_vars)
  {
    all_vars = ro_vars & rw_vars;
    return match (stmt)
      assignment_stmt()         = expr_wf_errors(stmt.value, all_vars),
      return_stmt(e?)           = expr_wf_errors(e, all_vars),
      if_stmt()                 = if_stmt_wf_errors(stmt, ro_vars, rw_vars, all_vars),
      loop_stmt()               = expr_wf_errors(stmt.cond, ro_vars & rw_vars) &
                                  stmts_wf_errors(stmt.body, ro_vars, rw_vars, is_inside_loop=true),
      inf_loop_stmt(ss?)        = stmts_wf_errors(ss, ro_vars, rw_vars, is_inside_loop=true),
      for_stmt()                = for_stmt_wf_errors(stmt, ro_vars, rw_vars, all_vars),
      let_stmt()                = (),
      break_stmt                = (),
      fail_stmt                 = (),
      assert_stmt()             = expr_wf_errors(stmt.cond, all_vars),
      print_stmt(e?)            = expr_wf_errors(e, all_vars),
      imp_update_stmt()         = expr_wf_errors(stmt.idx, all_vars) & expr_wf_errors(stmt.value, all_vars),
      return_stmt               = (),
      proc_call_stmt()          = join((expr_wf_errors(e, all_vars) | e <- stmt.args)),

      send_msg_stmt()           = expr_wf_errors(stmt.msg, all_vars),
      try_update_stmt()         = join((expr_wf_errors(e, all_vars) | e <- stmt.args)),
      set_memb_var_stmt()       = expr_wf_errors(stmt.value, all_vars),

      set_input_ctrl_stmt()     = expr_wf_errors(stmt.value, all_vars),
      clear_input_ctrl_stmt()   = (),
      apply_ctrl_stmt()         = if stmt.elapsed_time? then expr_wf_errors(stmt.elapsed_time, all_vars) else (),
      send_msg_ctrl_stmt()      = expr_wf_errors(stmt.msg, all_vars),

      fn_def_stmt()             = {fail;};


    ExprWFError* if_stmt_wf_errors(SynIfStmt[SynStmt] stmt, [DefVar] ro_vars, [StdVar] rw_vars, [DefVar] all_vars)
    {
      branches_errs = join((expr_wf_errors(b.cond, all_vars) & stmts_wf_errors(b.body, ro_vars, rw_vars) | b <- stmt.branches));
      else_body = stmt.else;
      else_errs = if else_body != () then stmts_wf_errors(else_body, ro_vars, rw_vars) else ();
      return branches_errs & else_errs;
    }


    ExprWFError* for_stmt_wf_errors(SynForStmt[SynStmt] stmt, [DefVar] ro_vars, [StdVar] rw_vars, [DefVar] all_vars)
    {
      iter_errs = ();
      new_vars = [];
      for it <- stmt.loops:
        iter_errs = iter_errs & iter_wf_errors(it, new_vars & all_vars);
        new_vars = new_vars & syn_new_vars(it);
      ;
      assert disjoint(new_vars, all_vars);
      body_errs = stmts_wf_errors(stmt.body, ro_vars & new_vars, rw_vars - new_vars, is_inside_loop=true);
      return iter_errs & body_errs;
    }


    ExprWFError* iter_wf_errors(SynIter iter, [DefVar] vars):
      seq_iter()    = expr_wf_errors(iter.values, vars),
      range_iter()  = expr_wf_errors(iter.start_val, vars) & expr_wf_errors(iter.end_val, vars);
  }

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

  ExprWFError* stmt_local_wf_errors(SynStmt stmt, [DefVar] ro_vars, [StdVar] rw_vars):
    assignment_stmt()         = asgn_stmt_local_wf_errors(stmt, ro_vars, rw_vars),
    return_stmt()             = ret_stmt_local_wf_errors(stmt, true),
    for_stmt()                = for_stmt_local_wf_errors(stmt, ro_vars, rw_vars),
    let_stmt()                = let_stmt_local_wf_errors(stmt, ro_vars, rw_vars),
    imp_update_stmt()         = imp_update_stmt_local_wf_errors(stmt, ro_vars, rw_vars),
    proc_call_stmt()          = proc_call_stmt_local_wf_errors(stmt, ro_vars, rw_vars),
    return_stmt               = ret_stmt_local_wf_errors(stmt, false),
    break_stmt                = (break_outside_loop(stmt) if not is_inside_loop),

    send_msg_stmt()           = {fail;},
    try_update_stmt()         = {fail;},
    set_memb_var_stmt()       = {fail;},

    set_input_ctrl_stmt()     |
    clear_input_ctrl_stmt()   = set_or_clear_input_ctrl_stmt_local_wf_errors(stmt.var, stmt.input, ro_vars, rw_vars),
    apply_ctrl_stmt()         = auto_var_errors(loc_auto_var(stmt.var), ro_vars, rw_vars),
    send_msg_ctrl_stmt()      = send_msg_ctrl_stmt_local_wf_errors(stmt.res_var, stmt.db_var, ro_vars, rw_vars),

    fn_def_stmt()             = {fail;},
    assert_stmt(e?)           = (),
    print_stmt(e?)            = (),
    fail_stmt                 = (),
    if_stmt()                 = (),
    loop_stmt()               = (),
    inf_loop_stmt(ss?)        = (),
    set_memb_var_stmt()       = ();


  ExprWFError* asgn_stmt_local_wf_errors(SynAsgnStmt stmt, [DefVar] ro_vars, [StdVar] rw_vars)
  {
    vars = set(stmt.vars);
    bad_vars = already_def_vars(vars, ro_vars) & [v | v <- vars, is_already_def_as_auto_or_db_var(bare_id(v))];
    dupl_vars = dupl_elems(stmt.vars);
    //## BAD BAD: HERE I'M TREATING AUTOMATON VARIABLES AS IF THEY WERE READ-ONLY SCALAR ONES
    return (ro_vars_asgnm(stmt, bad_vars) if bad_vars != []) & (dupl_var_mult_asgnm(v) | v <- rand_sort(dupl_vars));

    Bool is_already_def_as_auto_or_db_var(Atom var_id) =
      loc_auto_vars(loc_auto_var(var_id), ?)    or
      memb_auto_vars(memb_auto_var(var_id), ?)  or
      loc_db_vars(loc_db_var(var_id), ?)        or
      memb_db_vars(memb_db_var(var_id), ?);
  }


  ExprWFError* ret_stmt_local_wf_errors(<SynReturnStmt, return_stmt> stmt, Bool has_value) =
    (wrong_return(stmt) if has_value != has_return_value);


  ExprWFError* for_stmt_local_wf_errors(SynForStmt[SynStmt] stmt, [DefVar] ro_vars, [StdVar] rw_vars)
  {
    errs = ();
    new_vars = [];
    for it <- stmt.loops:
      dupl_vars = match (it)
        seq_iter()    = dupl_elems(it.vars & (it.idx_var if it.idx_var?)),
        range_iter()  = [];
      errs = errs & (dupl_var_mult_asgnm(v) | v <- rand_sort(dupl_vars));
      it_vars = syn_new_vars(it);
      bad_vars = already_def_vars(it_vars, union([ro_vars, rw_vars, new_vars]));
      errs = (errs || vars_redef(stmt, bad_vars)) if bad_vars != [];
      new_vars = new_vars & it_vars;
    ;
    return errs;
  }


  ExprWFError* let_stmt_local_wf_errors(SynLetStmt[SynStmt] stmt, [DefVar] ro_vars, [StdVar] rw_vars)
  {
    exprs_errs = join((expr_wf_errors(right(a), ro_vars & rw_vars) | a <- stmt.asgnms));
    new_impl_args = update(impl_args, [left(a) -> 0 | a <- set(stmt.asgnms)]);
    body_errs = stmts_wf_errors(stmt.body, ro_vars, rw_vars, impl_args=new_impl_args);
    return exprs_errs & body_errs;
  }


  ExprWFError* imp_update_stmt_local_wf_errors(SynImpUpdateStmt stmt, [DefVar] ro_vars, [StdVar] rw_vars)
  {
    var = stmt.obj;
    // The variable whose content is update must already exist.
    // Does it have to be a read/write one, or can it be a read-only one too?
    // It has to be a standard variable, so no searching through named parameters
    var_errs = (undef_update_var(stmt, var) if not in(var, ro_vars) and not in(var, rw_vars));
    return var_errs;
  }


  ExprWFError* proc_call_stmt_local_wf_errors(SynProcCallStmt stmt, [DefVar] ro_vars, [StdVar] rw_vars)
  {
    return (proc_call_not_allowed(stmt)) if not allow_proc_calls;
    var_errs = (ro_vars_asgnm(stmt, [stmt.res_var]) if stmt.res_var? and already_def(stmt.res_var, ro_vars));

    proc_name = stmt.proc_name;
    if not builtin_procs_map(proc_name, ?):
      if not proc_defs_by_id(proc_name, ?):
        return (var_errs || undef_proc(stmt));
      else
        proc_def = proc_defs_by_id[proc_name];
        arity = length(proc_def.args);
        has_ret_val = proc_def.res_type != nil;
      ;
    else
      arity, has_ret_val = builtin_procs_map[proc_name];
    ;

    proc_errs = (
      wrong_proc_arity(stmt, arity) if length(stmt.args) != arity,
      uncaught_ret_val(stmt)        if has_ret_val and not stmt.res_var?,
      proc_has_no_ret_val(stmt)     if not has_ret_val and stmt.res_var?
    );

    return var_errs & proc_errs;
  }


  ExprWFError* set_or_clear_input_ctrl_stmt_local_wf_errors(Atom var_id, Atom input, [DefVar] ro_vars, [StdVar] rw_vars)
  {
    var = loc_auto_var(var_id);
    errs = auto_var_errors(var, ro_vars, rw_vars);
    return errs if errs != ();
    auto_def = auto_defs_by_id[auto_var_type(var)];
    return (unknown_input(input, auto_def) if not has_key(inputs(auto_def), input));
  }


  ExprWFError* send_msg_ctrl_stmt_local_wf_errors(Atom res_var_id, Atom db_var_id, [DefVar] ro_vars, [StdVar] rw_vars)
  {
    //## IMPLEMENT IMPLEMENT IMPLEMENT
    // return match (var)
    //   loc_auto_var()  = auto_var_errors(var, ro_vars, rw_vars),
    //   memb_auto_var() = [];
    return ();
  }


  ExprWFError* auto_var_errors(LocAutoVar var, [DefVar] ro_vars, [StdVar] rw_vars) =
    (auto_var_not_defined(var, already_def(bare_id(var), ro_vars & rw_vars)) if not loc_auto_vars(var, ?));
}
