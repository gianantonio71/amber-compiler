type Type           = LeafType, TypeVar, SelfPretype, CompType, UnionType, RecType;

type SelfPretype    = self, self(Nat);

type NeSeqType      = ne_seq_type(elem_type: Type);
type SeqType        = empty_seq_type, NeSeqType;

type NeSetType      = ne_set_type(elem_type: Type);
type SetType        = empty_set_type, NeSetType;

type NeMapType      = ne_map_type(key_type: Type, value_type: Type);
type MapType        = empty_map_type, NeMapType;

type RecordType     = record_type((SymbObj => (type: Type, optional: Bool))); //## THE EMPTY MAP SHOULD NOT BE INCLUDED. OR SHOULD IT?

type TupleType      = tuple_type([Type^]);

type TagType        = SymbType, atom_type; //, TypeVar; //## THE CODE HASN'T BEEN UPDATED YET
type TagObjType     = tag_obj_type(tag_type: TagType, obj_type: Type);

type CompType       = NeSeqType, NeSetType, NeMapType, RecordType, TupleType, TagObjType; //## FIND BETTER NAME

type UnionType      = union_type(Type+);

type SelfRecType    = self_rec_type(Type);

type MutRecType     = mut_rec_type(index: Nat, types: [Type^]);

type RecType        = SelfRecType, MutRecType;

///////////////////////////////////////////////////////////////////////////////

type ClsType  = cls_type(in_types: [Type^], out_type: Type);
type ExtType  = Type, ClsType;

type FnType   = fn_type(
                  params:       [ExtType],
                  named_params: (NamedPar => ExtType),
                  ret_type:     Type
                );

