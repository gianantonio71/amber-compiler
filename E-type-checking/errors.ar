type TypeCheckingError =
  obj_does_not_belong_to_type(obj: <Atom, Int, (), [], [:]>, type: Type),
  exp_type_not_a_seq_type(Type),
  not_a_tuple_or_seq_type(Type),
  not_a_record_type(type: Type),
  exp_type_not_a_tag_type,
  wrong_tuple_type_length(actual_length: NzNat, expected_lenghts: [+NzNat]),
  non_symbol_keys_with_record_type(keys: [+Expr]),
  may_not_have_field(type: Type, field: SymbObj),
  missing_rec_fields(fields: [+SymbObj]),
  invalid_rec_fields(fields: [+SymbObj]),
  invalid_var_type(var: Var, actual_type: Type, expected_type: Type),
  no_dispatchable_function_found(name: FnSymbol, arity: NzNat, signatures: [+FnType], par_types: Maybe[Type]*),
  invalid_param_types(fn_name: FnSymbol, target_signature: FnType, invalid_params: [+<(Nat, Expr, Type)>]),
  invalid_cls_var_type(var: ClsVar, expected_type: ClsType, type_var_insts: [TypeVar -> Type]),
  invalid_cls_param_types(target_signature: FnType, errors: [TypeCheckingError]),
  invalid_implicit_par_type(
    target_signature:   FnType,
    param_name:         ImplArg,
    formal_type:        AnyType,
    inst_formal_type:   AnyType,
    actual_type:        AnyType
  ),
  invalid_return_type(actual_type: Type, expected_type: Type),
  unexpected_actual_type(actual_type: Type, expected_type: Type),
  invalid_cls_param_type(actual_type: ClsType, expected_type: ClsType),
  loop_did_not_converge(iteractions: NzNat),
  ptrn_cannot_match_type(pattern: Pattern, type: Type),
  annotated_error(error: TypeCheckingError, anchor: Any),

  missing_impl_argument(fn: FnSymbol, arg: ImplArg),
  invalid_impl_argument(arg: ImplArg),
  actual_tag_type_not_a_symb_type(type: Type),
  actual_type_not_a_map_type(type: Type),
  exp_type_does_not_contain_maps(type: Type),
  exp_type_does_not_contain_sets(type: Type),
  accessor_test_not_permitted_error(type: Type, field: SymbObj),
  not_a_valid_unary_pseudocall_target(type: Type),
  invalid_set_memb_test_elem_type(exp_type: Type, actual_type: Type),
  invalid_map_lookup_key_type(exp_type: Type, actual_type: Type),
  invalid_map_lookup_value_type(exp_type: Type, actual_type: Type),
  expressions_can_never_be_equal(left_type: Type, right_type: Type),
  expression_can_never_belong_to_type(actual_type: Type, type: Type);

////////////////////////////////////////////////////////////////////////////////

TypeCheckingError obj_does_not_belong_to_type(<Atom, Int, (), [], [:]> o, Type t) = obj_does_not_belong_to_type(obj: o, type: t);

TypeCheckingError exp_type_does_not_contain_sets(Type t) = exp_type_does_not_contain_sets(type: t);
TypeCheckingError exp_type_not_a_seq_type(Type t) = :exp_type_not_a_seq_type(t);
TypeCheckingError not_a_tuple_or_seq_type(Type t) = :not_a_tuple_or_seq_type(t);
TypeCheckingError exp_type_does_not_contain_maps(Type t) = exp_type_does_not_contain_maps(type: t);
TypeCheckingError not_a_record_type(Type t) = not_a_record_type(type: t);
TypeCheckingError exp_type_not_a_tag_type = :exp_type_not_a_tag_type;
TypeCheckingError actual_type_not_a_map_type(Type t) = actual_type_not_a_map_type(type: t);

TypeCheckingError wrong_tuple_type_length(NzNat al, [+NzNat] els) = wrong_tuple_type_length(actual_length: al, expected_lenghts: els);

TypeCheckingError non_symbol_keys_with_record_type([+Expr] ks) = non_symbol_keys_with_record_type(keys: ks);

TypeCheckingError may_not_have_field(Type t, SymbObj f) = may_not_have_field(type: t, field: f);
TypeCheckingError accessor_test_not_permitted_error(Type t, SymbObj f) = accessor_test_not_permitted_error(type: t, field: f);

TypeCheckingError missing_rec_fields([+SymbObj] fs) = missing_rec_fields(fields: fs);
TypeCheckingError invalid_rec_fields([+SymbObj] fs) = invalid_rec_fields(fields: fs);

TypeCheckingError actual_tag_type_not_a_symb_type(Type t) = actual_tag_type_not_a_symb_type(type: t);

TypeCheckingError invalid_var_type(Var v, Type at, Type et) = invalid_var_type(var: v, actual_type: at, expected_type: et);

TypeCheckingError no_dispatchable_function_found(FnSymbol n, NzNat a, [+FnType] ss, Maybe[Type]+ ts) =
  no_dispatchable_function_found(name: n, arity: a, signatures: ss, par_types: ts);

////////////////////////////////////////////////////////////////////////////////

//## CAN I OMMIT THE ANGLE BRACKETS FOR THE TYPE OF THE SECOND PARAMETER?
TypeCheckingError invalid_param_types(FnSymbol n, FnType s, [+<(Nat, Expr, Type)>] ps) = invalid_param_types(fn_name: n, target_signature: s, invalid_params: ps);

TypeCheckingError invalid_cls_var_type(ClsVar v, ClsType t, [TypeVar -> Type] tvis) = invalid_cls_var_type(var: v, expected_type: t, type_var_insts: tvis);

TypeCheckingError invalid_cls_param_types(FnType s, [TypeCheckingError] es) = invalid_cls_param_types(target_signature: s, errors: es);

TypeCheckingError invalid_implicit_par_type(FnType s, ImplArg p, AnyType ft, AnyType ift, AnyType at) =
  invalid_implicit_par_type(
    target_signature:   s,
    param_name:         p,
    formal_type:        ft,
    inst_formal_type:   ift,
    actual_type:        at
  );

TypeCheckingError invalid_return_type(Type at, Type et) = invalid_return_type(actual_type: at, expected_type: et);

TypeCheckingError unexpected_actual_type(Type at, Type et) = unexpected_actual_type(actual_type: at, expected_type: et);

TypeCheckingError invalid_cls_param_type(ClsType at, ClsType et) = invalid_cls_param_type(actual_type: at, expected_type: et);

TypeCheckingError loop_did_not_converge(NzNat nis) = loop_did_not_converge(iteractions: nis);

TypeCheckingError ptrn_cannot_match_type(Pattern p, Type t) = add_anchor_if_needed(ptrn_cannot_match_type(pattern: p, type: t), p);

TypeCheckingError annotated_error(TypeCheckingError e, Any a) = annotated_error(error: e, anchor: a);


TypeCheckingError missing_impl_argument(FnSymbol n, ImplArg a) = missing_impl_argument(fn: n, arg: a);
TypeCheckingError invalid_impl_argument(ImplArg a)  = invalid_impl_argument(arg: a);

TypeCheckingError not_a_valid_unary_pseudocall_target(Type t) = not_a_valid_unary_pseudocall_target(type: t);

TypeCheckingError invalid_set_memb_test_elem_type(Type et, Type at) = invalid_set_memb_test_elem_type(exp_type: et, actual_type: at);
TypeCheckingError invalid_map_lookup_key_type(Type et, Type at)     = invalid_map_lookup_key_type(exp_type: et, actual_type: at);
TypeCheckingError invalid_map_lookup_value_type(Type et, Type at)   = invalid_map_lookup_value_type(exp_type: et, actual_type: at);

TypeCheckingError expressions_can_never_be_equal(Type lt, Type rt)  = expressions_can_never_be_equal(left_type: lt, right_type: rt);

TypeCheckingError expression_can_never_belong_to_type(Type at, Type t)  = expression_can_never_belong_to_type(actual_type: at, type: t);

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

implicit typedefs : [TypeName -> Type]
{
  [TypeCheckingError] invalid_type_if_not_subset(Type at, Type et) = [
    unexpected_actual_type(at, et) if not is_subset(at, et)
  ];
}


TypeCheckingError add_anchor_if_needed(TypeCheckingError err, Any anchor):
  annotated_error()  = err,
  _                  = if _fetch_(anchor) != [] then annotated_error(err, anchor) else err;

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

String* create_error_msgs(Function funct, [+TypeCheckingError] errs)
{
  err_msgs = join(intermix((indent_lines(create_error_msg(e)) : e <- rand_sort(errs)), ("")));
  fname, sl, el = source_code_location(funct);
  loc_msg = "File " & fname & " line" & if sl == el then " " & printed(sl) else "s " & printed(sl) & "-" & printed(el);
  return (loc_msg) & err_msgs;
}


String source_file(Function fn)
{
  file, unused_var_1, unused_var_2 = source_code_location(fn);
  return file;
}


(String, NzNat, NzNat) source_code_location(Function fn) //## THERE'S AN ALMOST IDENTICAL FUNCTION IN WELL-FORMEDNESS CHECKING
{
  data = _fetch_(fn);
  filtered_data = [e : e <- data; e :: (String, NzNat, NzNat)];
  return only(filtered_data) if size(filtered_data) == 1;
  err_msg = "CANNOT DETERMINE ERROR POSITION WITHIN SOURCE FILE";
  err_msg = err_msg & ": " & printed(data) if data != [];
  return (err_msg, 1, 1);
}


String* create_error_msg(TypeCheckingError err):
  obj_does_not_belong_to_type()       = ("Object " & printed(err.obj) & " does not belong to type " & user_repr(err.type)),
  exp_type_does_not_contain_sets()    = ("Set expression used but the expected type does not include sets"),
  exp_type_not_a_seq_type()           = ("Sequence expression used but the expected type does not include sequences"),
  not_a_tuple_or_seq_type()           = ("Tuple expression used but the expected type does not include tuples"),
  exp_type_does_not_contain_maps()    = ("Map/record expression used but the expected type does not include maps or records"),
  not_a_record_type()                 = ("Dot notation used but the type of the expression is not a record type"),
  exp_type_not_a_tag_type             = ("Tag expression used but the expected type does not include tagged objects"),
  actual_type_not_a_map_type()        = ("The type of the expression must be a map type"),
  wrong_tuple_type_length()           = ("Wrong tuple size"),
  non_symbol_keys_with_record_type()  = ("Record expected, but map expression doesn't have only symbols for keys"),
  may_not_have_field()                = ("Object may not have field: " & user_repr(err.field)),
  accessor_test_not_permitted_error() = ("Object doesn't have field: " & user_repr(err.field)),
  missing_rec_fields()                = ("Record fields required: " & append((user_repr(f) : f <- rand_sort(err.fields)), " ")),
  invalid_rec_fields()                = ("Invalid record fields: " & append((user_repr(f) : f <- rand_sort(err.fields)), " ")),
  missing_impl_argument()             = ("In call to " & user_repr(err.fn) & "(..) implicit argument was not specified: " & user_repr(err.arg)),
  invalid_impl_argument()             = ("Invalid implicit argument: " & user_repr(err.arg)),
  actual_tag_type_not_a_symb_type()   = ("Tag expression must yield a symbol"),
  invalid_var_type()                  = ( "Invalid variable type: " & user_repr(err.var),
                                          "  Expected type: " & user_repr(err.expected_type),
                                          "  Actual type:   " & user_repr(err.actual_type)
                                        ),
  no_dispatchable_function_found()    = create_no_dispatchable_function_found_error_msg(err.name, err.arity, err.signatures, err.par_types),
  invalid_param_types()               = create_invalid_params_types_error_msg(err.fn_name, err.target_signature, err.invalid_params),
  invalid_cls_var_type()              = ("Invalid closure variable: " & user_repr(err.var) & ". Expected type: " & user_repr(err.expected_type)),
  invalid_cls_param_types()           = ("Unable to instantiate type variables"),
  invalid_implicit_par_type()         = ( "Invalid implicit parameter type: " & user_repr(err.param_name),
                                          "  Expected type: " & user_repr(err.formal_type),
                                          "  Actual type:   " & user_repr(err.actual_type)
                                        ),

  invalid_return_type()               = ( "Invalid return type.",
                                          "  Expected type: " & user_repr(err.expected_type),
                                          "  Actual type:   " & user_repr(err.actual_type)
                                        ),
  unexpected_actual_type()            = ( "Invalid type: " & user_repr(err.actual_type),
                                          "  The type must be a subset of " & user_repr(err.expected_type)
                                        ),
  invalid_cls_param_type()            = ("Invalid closure parameter type. Actual type: " & user_repr(err.actual_type) & " Expected type: " & user_repr(err.expected_type)),
  loop_did_not_converge()             = ("Cannot infer types of variables updated in loop"),
  ptrn_cannot_match_type()            = ("Pattern cannot match type: " & user_repr(err.pattern)),
  annotated_error()                   = create_annotated_error_msg(err.error, err.anchor),

  not_a_valid_unary_pseudocall_target() = ("Not a valid target for unary pseudocall operator: " & user_repr(err.type)),

  invalid_set_memb_test_elem_type()   = ( "The type of the searched element is not a subset of the type of the set elements",
                                          "  Expected type: " & user_repr(err.exp_type),
                                          "  Actual type: " & user_repr(err.actual_type)
                                        ),
  invalid_map_lookup_key_type()       = ( "The type of the search key is not a subset of the type of map keys",
                                          "  Expected type: " & user_repr(err.exp_type),
                                          "  Actual type: " & user_repr(err.actual_type)
                                        ),
  invalid_map_lookup_value_type()     = ( "The type of the searched value is not a subset of the type of map values",
                                          "  Expected type: " & user_repr(err.exp_type),
                                          "  Actual type: " & user_repr(err.actual_type)
                                        ),

  expressions_can_never_be_equal()    = ( "Expressions compared for equality can never be equal",
                                          "  Left type: " & user_repr(err.left_type),
                                          "  Right type: " & user_repr(err.right_type)
                                        ),

  expression_can_never_belong_to_type() = ("Expression can never belong to type. Actual type: " & user_repr(err.actual_type));


String* create_no_dispatchable_function_found_error_msg(FnSymbol name, NzNat arity, [+FnType] signatures, Maybe[Type]* par_types)
{
  actual_types = ("  " & if t != nil then user_repr(value(t)) else "CLOSURE" : t <- par_types);
  return ("No suitable function found: " & user_repr(name, arity) & ". Possible function signatures:") &
         ("  " & user_repr(s) : s <- rand_sort(signatures)) &
         ("Actual types:") & actual_types;
}


String* create_invalid_params_types_error_msg(FnSymbol fn_name, FnType signature, [+(Nat, Expr, Type)] invalid_params)
{
  errs = ();
  for i, e, t <- rand_sort(invalid_params):
    errs = (errs | "  Invalid parameter " & printed(i) & " type in function call: " & user_repr(fn_name) &
                   "(...). Expected type: " & user_repr(signature.args[i]));
  ;
  return errs;
}


String* create_annotated_error_msg(TypeCheckingError error, Any anchor)
{
  err_msg = create_error_msg(error);
  return ("Internal compiler error") if err_msg == ();
  attached_info = _fetch_(anchor);
  // if size(attached_info) == 1 and attached_info :: [+((NzNat, NzNat), (NzNat, NzNat))]:
  if attached_info :: [+((NzNat, NzNat), (NzNat, NzNat))]:
    start_pos, end_pos = an_elem(attached_info);
    start_line = left(start_pos);
    end_line = left(end_pos);
    line_info = "Line" & if start_line == end_line then " " & printed(start_line) else "s " & printed(start_line) & "-" & printed(end_line);
    err_msg = (if i == 0 then line_info & ": " & l else l : l @ i <- err_msg);
  ;
  if size(attached_info) != 1:
    err_msg_extra_line = "CANNOT DETERMINE ERROR POSITION WITHIN SOURCE FILE";
    err_msg_extra_line = err_msg_extra_line & ": " & printed(attached_info) if attached_info != [];
    err_msg = (err_msg | err_msg_extra_line);
  ;
  return err_msg;
}
