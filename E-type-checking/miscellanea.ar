True  is_type(Type)     = true;
False is_type(ClsType)  = false;

False is_cls_type(Type)     = false;
True  is_cls_type(ClsType)  = true;

////////////////////////////////////////////////////////////////////////////////

implicit typedefs : [TypeName -> NeType] {
  ## MAYBE THIS (AND ALL THE FUNCTIONS IT DEPENDS ON) SHOULD GO IN THE SAME FILE AS is_subset(Type, Type)
  Bool is_fn_subtype(Type+ arg_types_1, Type ret_type_1, Type+ arg_types_2, Type ret_type_2) {
    // for (pt1, pt2 : zip(arg_types_1, arg_types_2))
    //   return false if not is_subset(pt2, replace_type_vars_with_type_any(pt1));
    // ;
    // return is_subset(cls_call_type(t1, arg_types_2), ret_type_2);

    assert |arg_types_1| == |arg_types_2|;

    for i < |arg_types_1|:
      return false if not is_subset(arg_types_2(i), replace_type_vars_with_type_any(arg_types_1(i)));
    ;
    // return is_subset(cls_call_type(t1, arg_types_2), ret_type_2);
    return is_subset(ret_type_1, ret_type_2);
  }


  Bool is_eq(Type    t1, Type    t2)  = is_subset(t1, t2) and is_subset(t2, t1);
  Bool is_eq(ClsType t1, ClsType t2)  =
    is_fn_subtype(t1.in_types, t1.out_type, t2.in_types, t2.out_type) and
    is_fn_subtype(t2.in_types, t2.out_type, t1.in_types, t1.out_type);


  ## BAD: IMPROVE THIS...
  Bool are_ptype_disjoint(Type t1, Type t2) =
    t1 == empty_type or t2 == empty_type or
    are_disjoint(pseudotype(t1, typedefs), pseudotype(t2, typedefs));


  // ## FIND BETTER NAME
  // Bool unsafe_is_eq(AnyType t1, AnyType t2):
  //   Type,     Type      = is_eq(t1, t2),
  //   ClsType,  ClsType   = is_eq(t1, t2);
  //   _,        _         = fail;


  [TypeVar -> Type] type_var_instantiations_for_subset(Type* actual_types, Type* formal_types) {
    type_vars = seq_union((retrieve_type_vars(t, typedefs) : t <- formal_types));
    conds = merge_value_sets([subset_conds(at, ft) : at, ft <~ zip(actual_types, formal_types)]);
    return [v -> union_superset(lookup(conds, v, [])) : v <- type_vars];
  }


  // Returns the type of the result when the closure with the given
  // signature is called with parameters of the given type.
  ## BUT WHAT HAPPENS WHEN I HAVE A CLOSURE LIKE THIS ONE:
  ##   Ta -> T?
  ## DOES THAT EVEN MAKE SENSE?
  // Type cls_call_type(ClsType signature, [Type^] actual_types) ## FIND BETTER NAME
  // {
  //   type_var_insts = type_var_instantiations_for_subset(actual_types, signature.in_types);
  //   // return replace_known_type_vars(signature.out_type, type_var_insts);
  //   return replace_type_vars(signature.out_type, type_var_insts);
  // }
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

implicit typedefs : [TypeName -> NeType] {
  // Here I just assume that the pattern can actually match objects of the specified type
  // If it cannot, the function is free to fail or return garbage.
  ## WOULD BE GOOD TO ADD AN ASSERTION THAT CHECKS THAT THE PATTERN CAN ACTUALLY MATCH THE TYPE
  [EnvVar -> Type] generate_env(Pattern ptrn, Type type) =
    ptrn_symbol         = [],
    ptrn_float          = [],
    ptrn_empty_seq      = [],
    ptrn_ne_seq         = [],
    ptrn_empty_rel      = [],
    ptrn_ne_set         = [],
    ptrn_ne_map         = [],
    ptrn_ne_bin_rel     = [],
    ptrn_ne_tern_rel    = [],
    ptrn_any            = [],
    ptrn_symbol()       = [],
    ptrn_integer()      = [],
    ptrn_tuple(ps?)     = ptrn_tuple_gen_env(ps, type),
    ptrn_tag_obj()      = ptrn_tag_obj_gen_env(ptrn.tag, ptrn.obj, type),
    ptrn_var()          = ptrn_var_gen_env(ptrn.var, ptrn.ptrn, type),
    ptrn_union(ps?)     = ptrn_union_gen_env(ps, type);


  [EnvVar -> Type] ptrn_tuple_gen_env(Pattern+ ps, Type type) {
    field_supertypes = tuple_field_supertypes(type, |ps|);
    return merge((generate_env(p, t) : p, t <- zip(ps, field_supertypes)));
  }


  [EnvVar -> Type] ptrn_tag_obj_gen_env(TagPtrn tag_ptrn, Pattern obj_ptrn, Type type) =
    ptrn_symbol     = generate_env(obj_ptrn, untagged_objs_supertype(type)),
    ptrn_symbol(object(a?)) = generate_env(obj_ptrn, restricted_untagged_objs_supertype(type, a)),
    ptrn_var()      = [tag_ptrn.var -> tag_supertype(type)] & ptrn_tag_obj_gen_env(tag_ptrn.ptrn, obj_ptrn, type);


  [EnvVar -> Type] ptrn_var_gen_env(EnvVar var, Pattern ptrn, Type type) {
    assert type == empty_type or may_match(ptrn, type);
    return [var -> type_pattern_intersection_superset(type, ptrn)] & generate_env(ptrn, type);
  }


  [EnvVar -> Type] ptrn_union_gen_env([+Pattern] ptrns, Type type) {
    matching_ptrns = [p : p <- ptrns, may_match(p, type)];
    return [v -> union_superset(ts) : v, ts <- merge_values([generate_env(p, type) : p <- matching_ptrns])];
  }
}

////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////

## IS THIS THE RIGHT PLACE FOR THESE FUNCTIONS? MAYBE I SHOULD ALSO RENAME SOME OF THEM...

implicit typedefs : [TypeName -> NeType] {
  Bool has_reached_fixpoint([TypeVar -> Type] curr_insts, [TypeVar -> Type] new_insts) {
    return false if not subset(keys(new_insts), keys(curr_insts));
    for v <- rand_sort(keys(new_insts)):
      return false if not is_subset(new_insts[v], curr_insts[v]);
    ;
    return true;
  }
}


[TypeVar -> Type] merge_insts([TypeVar -> Type] curr_insts, [TypeVar -> Type] new_insts) {
  curr_vars = keys(curr_insts);
  new_vars = keys(new_insts);
  modified = [v -> union_superset(curr_insts[v], new_insts[v]) : v <- intersection(curr_vars, new_vars)];
  unchanged = [v -> curr_insts[v] : v <- curr_vars - new_vars];
  new = [v -> new_insts[v] : v <- new_vars - curr_vars];
  return modified & unchanged & new;
}


[EnvVar -> Type] get_updated_env([EnvVar -> Type] env, Maybe[StdVar]+ args, Type+ arg_types) {
  arity = |args|;
  env_delta = merge(([fn_arg(i) -> t, value(n) -> t if n != nothing] : n, t @ i <- zip(args, arg_types)));
  return update(env, env_delta);
}


AnyClsExpr rewrite_cls_expr(AnyClsExpr expr) =
  fn_ptr()  = no_args_cls_expr(expr.arity, fn_call(expr.name, (fn_arg(i) : i < expr.arity))),
  _         = expr;

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

NeType db_state_type(Database db) {
  state_vars = [bare_id(v) -> info.type : v, info <- db.state_vars];
  nested_dbs = [bare_id(v) -> type_ref(schema_type_symbol(bare_id(t))) : v, t <- db.nested_dbs];
  rel_vars = [bare_id(v) -> {
      sgns = info.signatures;
      arity = only([|s| : s <- sgns]);
      if arity == 1:
        assert sgns :: [+(NeType)];
        elem_type = ne_union_superset([only(s) : s <- sgns]);
        return type_set(elem_type);
      elif arity == 2:
        fail if not sgns :: [+(NeType, NeType)];
        return type_bin_rel(sgns, false);
      else
        fail if not sgns :: [+(NeType, NeType, NeType)];
        return type_tern_rel(sgns, false);
      ;
    } : v, info <- db.rel_vars
  ];
  fields = [object(f) -> (type: t, optional: false) : f, t <- state_vars | f, t <- nested_dbs | f, t <- rel_vars];
  return if fields != [] then ne_record_type(fields) else empty_rel_type;
}
