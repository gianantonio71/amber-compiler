type ContextTC  = Function, Database;

////////////////////////////////////////////////////////////////////////////////

implicit program : Program, typedefs : [TypeName -> NeType] {
  [(FnFamilyId, Nat) -> SgnSet] signatures {
    signatures = merge_values([[(family_id(fd.name), arity(fd)) -> signature(fd)] : fd <- program.fndefs]);
    return [n -> preprocess_signatures(ss) : n, ss <- signatures];
  }


  [DBSymbol -> [(MethodSymbol, Nat) -> SgnSet]] signatures_by_db = [
    db.name -> database_method_signatures(db) : db <- program.data_bases
  ];
}

////////////////////////////////////////////////////////////////////////////////

implicit program : Program, context : ContextTC {
  [ClsVar -> ClsType] closures =
    match (context)
      function()    = [a.var -> a.type : a <~ context.args, formal_cls_arg() ?= a],
      _             = [];


  [(AtomicFnSymb, NzNat) -> [+ClsType]] constraints =
    match (context)
      function()  = merge_values([[(n, arity(s)) -> s] : n, ss <- context.constrs, s <- ss]),
      _           = [];
}
