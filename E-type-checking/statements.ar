implicit
{
  typedefs    : [TypeName -> Type],
  signatures  : [(FnSymbol, Nat) -> SgnSet],
  environment : [Var -> Type],
  closures    : [<ClsVar, NamedArg> -> ClsType],
  var_aliases : [[Var]],
  verbose     : Bool;


  [TypeCheckingError] typecheck(Statement* stmts, Type exp_type)
  {
    env = environment;
    for s <- stmts:
      errs = typecheck(s, exp_type, environment=env);
      return errs if errs != [];
      env = update_environment(s, environment=env);
    ;
    return [];
  }


  [TypeCheckingError] typecheck(Statement stmt, Type exp_type)
  {
    errs = typecheck_without_annotations(stmt, exp_type);
    return [add_anchor_if_needed(e, stmt) | e <- errs];


    [TypeCheckingError] typecheck_without_annotations(Statement stmt, Type exp_type):
      assignment_stmt()   = typecheck_assignment_stmt(stmt.vars, stmt.value),
      return_stmt(e?)     = typecheck(e, exp_type),
      if_stmt()           = typecheck_if_stmt(stmt.cond, stmt.body, stmt.else, exp_type),
      loop_stmt(ss?)      = typecheck_loop_stmt(ss, exp_type),
      foreach_stmt()      = { maybe_idx_var = if stmt.idx_var? then just(stmt.idx_var) else nil;
                              return typecheck_foreach_stmt(stmt.vars, maybe_idx_var, stmt.values, stmt.body, exp_type);
                            },
      for_stmt()          = { maybe_var = if stmt.var? then just(stmt.var) else nil;
                              return typecheck_for_stmt(maybe_var, stmt.start_val,
                                stmt.end_val, stmt.end_val_incl, stmt.body, exp_type);
                            },
      let_stmt()          = typecheck_let_stmt(stmt.asgnms, stmt.body, exp_type),
      break_stmt          = [],
      fail_stmt           = [],
      assert_stmt()       = typecheck(stmt.cond, type_bool),
      print_stmt(e?)      = typecheck(e, type_any);
  }


  [TypeCheckingError] typecheck_assignment_stmt(Var+ vars, Expr value)
  {
    nvars = nz_nat(length(vars));
    exp_type = if nvars == 1 then type_any else type_tuple(nvars);
    return typecheck(value, exp_type);
  }


  [TypeCheckingError] typecheck_if_stmt(Expr cond, Statement+ body, Statement* else_body, Type exp_type)
  {
    errs = typecheck(cond, type_bool);
    return errs if errs != [];
    if_true_env, if_false_env = refine_environment(cond);
    return typecheck(body, exp_type, environment=if_true_env) &
           typecheck(else_body, exp_type, environment=if_false_env);
  }


  [TypeCheckingError] typecheck_loop_stmt(Statement+ stmts, Type exp_type)
  {
    env = environment;
    for 5: //## BAD: THIS IS A TOTALLY ARBITRARY NUMBER...
      errs = typecheck(stmts, exp_type, environment=env);
      return errs if errs != [];
      new_env = update_environment(stmts, environment=env);
      return [] if new_env == env;
      env = new_env;
    ;
    return [loop_did_not_converge(5)];
  }


  [TypeCheckingError] typecheck_foreach_stmt(Var+ vars, Maybe[Var] maybe_idx_var, Expr values, Statement+ body, Type exp_type)
  {
    nvars = nz_nat(length(vars));
    exp_src_type = if nvars == 1 then type_seq else type_seq(type_tuple(nvars));
    errs = typecheck(values, exp_src_type);
    return errs if errs != [];
    elem_type = seq_elem_supertype(expr_type(values));

    // return {not_a_seq_type} if elem_type == empty_type; //## COULD I ACCEPT A TUPLE TYPE HERE ALSO?

    num_vars = nz_nat(length(vars));
    if num_vars == 1:
      loop_vars = [vars[0] -> elem_type];
    else
      field_types = tuple_field_supertypes(elem_type, num_vars);
      loop_vars = merge(([v -> t] | v, t <- zip(vars, field_types)));
    ;
    loop_vars = loop_vars & [value(maybe_idx_var) -> type_nat] if maybe_idx_var != nil;
    env = update(environment, loop_vars);
    for 5:
      errs = typecheck(body, exp_type, environment=env);
      return errs if errs != [];
      new_env = update_environment(body, environment=env);
      return [] if new_env == env;
      env = new_env;
    ;
    return [loop_did_not_converge(5)];
  }


  [TypeCheckingError] typecheck_for_stmt(Maybe[Var] maybe_var, Expr start_val, Expr end_val, Bool end_val_incl,
    Statement+ body, Type exp_type)
  {
    errs = typecheck(start_val, integer) & typecheck(end_val, integer);
    return errs if errs != [];
    env = environment & [
      value(maybe_var) -> loop_var_type(expr_type(start_val), expr_type(end_val), end_val_incl) if maybe_var != nil
    ];
    for 5:
      errs = typecheck(body, exp_type, environment=env);
      return errs if errs != [];
      new_env = update_environment(body, environment=env);
      return [] if new_env == env;
      env = new_env;
    ;
    return [loop_did_not_converge(5)];
  }


  [TypeCheckingError] typecheck_let_stmt([NamedArg -> Expr] asgnms, Statement+ body, Type exp_type)
  {
    errs = union([typecheck(e, type_any) | v : e <- asgnms]);
    return errs if errs != [];
    env_delta = [v -> expr_type(e) | v : e <- asgnms];
    new_env = update(environment, env_delta);
    return typecheck(body, exp_type, environment=new_env); //## BUG BUG BUG (WHY?)
  }
}