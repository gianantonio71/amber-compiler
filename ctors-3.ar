LocVar lvar(Nat n)      = :lvar(n);
LocVar never_used_lvar  = :never_used_lvar;

ElemVar evar(Nat id, <Nat, IntVar> i)   = evar(id: id, idx: i);
ElemVar evar(Nat id, IntVar v, Nat i)   = evar(id: id, idx: add(val1: v, val2: i));

PendingInputVar pending_input_var(Atom id)  = :pending_input_var(id);

VecVar vvar(Nat n, NzNat s) = vvar(id: n, size: s);

BoolVar bvar(Nat n)                 = :bvar(n);
BoolVar rep_cond_value_var(Nat id)  = :rep_cond_value_var(id);
BoolVar rep_cond_is_def_var(Nat id) = :rep_cond_is_def_var(id);
BoolVar memb_has_changed(Atom id)   = :memb_has_changed(id);
BoolVar invalidate_cond_expr_cache  = :invalidate_cond_expr_cache;

MembBoolVar cond_value_var(Nat n)             = :cond_value_var(n);
MembBoolVar cond_is_def_var(Nat n)            = :cond_is_def_var(n);
MembBoolVar cond_expr_value_var(Nat n)        = :cond_expr_value_var(n);
MembBoolVar cond_expr_is_def_var(Nat n)       = :cond_expr_is_def_var(n);
MembBoolVar cond_expr_up_to_date_var(Nat n)   = :cond_expr_up_to_date_var(n);

MembBoolVar watched_signal_up_to_date_var(Atom id)  = :watched_signal_up_to_date_var(id);

MembBoolVar up_to_date_var(BlockNodeId n)     = :up_to_date_var(n);

MembBoolVar is_new    = :is_new;

IntVar curr_time      = :curr_time;
IntVar update_time    = :update_time;
IntVar elapsed_time   = :elapsed_time;

IntVar ivar(Nat n)    = :ivar(n);

MembIntVar update_source_var(Atom n)                          = :update_source_var(n);
MembIntVar update_count_var(Nat l)                            = :update_count_var(l);
MembIntVar nodes_to_update_var(IntExpr l, IntExpr i)          = nodes_to_update_var(level: l, index: i);
MembIntVar next_trigger_time_var(Atom a)                      = :next_trigger_time_var(a);
MembIntVar curr_time_slot_var(Atom a)                         = :curr_time_slot_var(a);
MembIntVar time_triggers_count_var                            = :time_triggers_count_var;
MembIntVar trigger_times_heap_var(IntExpr i)                  = :trigger_times_heap_var(i);
MembIntVar time_varying_cond_ids_heap_var(IntExpr i)          = :time_varying_cond_ids_heap_var(i);
MembIntVar last_update_time                                   = :last_update_time;
MembIntVar nested_auto_int_var(MembAutoVar av, MembIntVar mv) = nested_auto_int_var(auto_var: av, memb_var: mv);

MembObjVar watched_signal_value_var(Atom id)                  = :watched_signal_value_var(id);

IntConst time_slot_length(AutoSymbol a, Atom id, IntExpr i) = time_slot_length(automaton: a, expr_id: id, time_slot: i);

MembIntVectVar nodes_to_update_vect_var(Nat l, NzNat s)  = nodes_to_update_vect_var(level: l, size: s);

StreamVar svar(Nat n) = :svar(n);

SetItVar set_it_var(Nat n) = :set_it_var(n);
SeqItVar seq_it_var(Nat n) = :seq_it_var(n);
MapItVar map_it_var(Nat n) = :map_it_var(n);

BoolFnName memb_test(TypeSymbol ts) = :memb_test(ts);

AtomicExpr empty_set = :empty_set;
AtomicExpr empty_seq = :empty_seq;
AtomicExpr empty_map = :empty_map;

NatBoolOp is_symb(ObjExpr e)                              = :is_symb(e);
NatBoolOp is_int(ObjExpr e)                               = :is_int(e);
NatBoolOp is_float(ObjExpr e)                             = :is_float(e);
NatBoolOp is_ne_set(ObjExpr e)                            = :is_ne_set(e);
NatBoolOp is_ne_seq(ObjExpr e)                            = :is_ne_seq(e);
NatBoolOp is_ne_map(ObjExpr e)                            = :is_ne_map(e);
NatBoolOp is_tagged_obj(ObjExpr e)                        = :is_tagged_obj(e);
NatBoolOp has_elem(ObjExpr s, ObjExpr e)                  = has_elem(set: s, elem: e);
NatBoolOp is_eq(BoolExpr e1, BoolExpr e2)                 = is_eq_bool(expr1: e1, expr2: e2);
NatBoolOp is_eq(IntExpr e1, IntExpr e2)                   = is_eq_int(expr1: e1, expr2: e2);
// NatBoolOp is_eq(ObjExpr e1, ObjExpr e2)                   = is_eq(expr1: e1, expr2: e2);
NatBoolOp is_gt(IntExpr e1, IntExpr e2)                   = is_gt(expr1: e1, expr2: e2);
NatBoolOp is_ge(IntExpr e1, IntExpr e2)                   = is_ge(expr1: e1, expr2: e2);
NatBoolOp is_lt(IntExpr e1, IntExpr e2)                   = is_lt(expr1: e1, expr2: e2);
NatBoolOp is_le(IntExpr e1, IntExpr e2)                   = is_le(expr1: e1, expr2: e2);
NatBoolOp inline_is_eq(ObjExpr e, InlineObj v)            = inline_is_eq(expr: e, value: v);
NatBoolOp is_out_of_range(ItVar v)                        = :is_out_of_range(v);
NatBoolOp is_blank(<MembVar, QualAutoMembVar, LocVar> v)  = :is_blank(v);
NatBoolOp is_null(AnyNullableVar v)                       = :is_null(v);

BoolExpr is_eq(ObjExpr e1, ObjExpr e2):
  InlineObj,  InlineObj   = e1 == e2,
  _,          InlineObj   = inline_is_eq(e1, e2),
  InlineObj,  _           = inline_is_eq(e2, e1),
  _,          _           = is_eq(expr1: e1, expr2: e2);

NatIntOp get_int_val(ObjExpr e)         = :get_int_val(e);
NatIntOp get_set_size(ObjExpr e)        = :get_set_size(e);
NatIntOp get_seq_len(ObjExpr e)         = :get_seq_len(e);
NatIntOp get_map_size(ObjExpr e)        = :get_map_size(e);
NatIntOp minus(IntExpr e)               = :minus(e);
NatIntOp add(IntExpr e1, IntExpr e2)    = add(val1: e1, val2: e2);
NatIntOp sub(IntExpr e1, IntExpr e2)    = sub(val1: e1, val2: e2);
NatIntOp mult(IntExpr e1, IntExpr e2)   = mult(val1: e1, val2: e2);
NatIntOp div(IntExpr e1, IntExpr e2)    = div(val1: e1, val2: e2);
NatIntOp mod_op(IntExpr e1, IntExpr e2) = mod(val1: e1, val2: e2); //## THIS SHOULD JUST BE NAMED mod, BUT THAT WOULD CONFLICT WITH THE INTEGER MOD OPERATION
NatIntOp mantissa(ObjExpr e)            = :mantissa(e);
NatIntOp dec_exp(ObjExpr e)             = :dec_exp(e);
NatIntOp unique_nat                     = :unique_nat;
NatIntOp rand_nat(ObjExpr e)            = :rand_nat(get_int_val(e));
NatIntOp ticks                          = :ticks;

NatObjOp at(ObjExpr s, IntExpr i)               = at(seq: s, idx: i);
NatObjOp search_or_lookup(ObjExpr c, ObjExpr v) = search_or_lookup(collection: c, value: v);
NatObjOp get_tag(ObjExpr e)                     = :get_tag(e);
NatObjOp get_inner_obj(ObjExpr e)               = :get_inner_obj(e);
NatObjOp to_obj(BoolExpr e)                     = :bool_obj(e);  //## REPLACE THIS WITH bool_obj()
NatObjOp to_obj(IntExpr e)                      = :int_obj(e);   //## REPLACE THIS WITH int_obj()
NatObjOp bool_obj(BoolExpr e)                   = :bool_obj(e);
NatObjOp int_obj(IntExpr e)                     = :int_obj(e);
NatObjOp obj_neg(ObjExpr e)                     = :obj_neg(e);
NatObjOp to_symb(ObjExpr e)                     = :to_symb(e);
NatObjOp get_curr_obj(<SetItVar, SeqItVar> it)  = :get_curr_obj(it);
NatObjOp get_curr_key(MapItVar it)              = :get_curr_key(it);
NatObjOp get_curr_value(MapItVar it)            = :get_curr_value(it);
NatObjOp rand_elem(ObjExpr s)                   = :rand_elem(s);

BoolExpr neg(BoolExpr e)                                = :neg(e);
BoolExpr and(BoolExpr+ es)                            = :and(es);
BoolExpr or(BoolExpr+ es)                             = :or(es);
BoolExpr and_then(BoolExpr+ es)                       = :and_then(es);
BoolExpr or_else(BoolExpr+ es)                        = :or_else(es);
BoolExpr eval_bool_fn(BoolFnName n, AnyTypeExpr+ ps)  = eval_bool_fn(name: n, params: ps);

// Basic instructions

Instr init_stream(StreamVar v)          = :init_stream(v);
Instr append(StreamVar v, AtomicExpr e) = append(stream: v, obj: e);

Instr mk_set_from_stream(WriteObjVar v, StreamVar s) = set_var(v, mk_set_from_stream(stream: s));
Instr mk_set(WriteObjVar v, VecVar es, IntExpr s)    = set_var(v, mk_set(elems: es, size: s));

Instr mk_seq_from_stream(WriteObjVar v, StreamVar s) = set_var(v, mk_seq_from_stream(stream: s));
Instr mk_seq(WriteObjVar v, VecVar es, IntExpr s)    = set_var(v, mk_seq(elems: es, size: s));

Instr build_const_int_seq(WriteObjVar v, Nat id)     = set_var(v, build_const_int_seq(seq_id: id));

Instr mk_map_from_streams(WriteObjVar v, StreamVar ks, StreamVar vs) = set_var(v, mk_map_from_streams(key_stream: ks, value_stream: vs));
Instr mk_map(WriteObjVar v, VecVar ks, VecVar vs, IntExpr s)         = set_var(v, mk_map(keys: ks, values: vs, size: s));

Instr mk_tagged_obj(WriteObjVar v, AtomicExpr t, AtomicExpr o) = set_var(v, mk_tagged_obj(tag: t, obj: o));

Instr mk_float(WriteObjVar v, Int m, Int e)  = set_var(v, mk_float(mantissa: m, dec_exp: e));

Instr neg_float(WriteObjVar var, AtomicExpr val)                 = set_var(var, neg_float(value: val));
Instr add_floats(WriteObjVar var, AtomicExpr lv, AtomicExpr rv)  = set_var(var, add_floats(values: (lv, rv)));
Instr sub_floats(WriteObjVar var, AtomicExpr lv, AtomicExpr rv)  = set_var(var, sub_floats(values: (lv, rv)));
Instr mult_floats(WriteObjVar var, AtomicExpr lv, AtomicExpr rv) = set_var(var, mult_floats(values: (lv, rv)));
Instr div_floats(WriteObjVar var, AtomicExpr lv, AtomicExpr rv)  = set_var(var, div_floats(values: (lv, rv)));
Instr square_root(WriteObjVar var, AtomicExpr value)             = set_var(var, square_root(value: value));
Instr floor_op(WriteObjVar var, AtomicExpr value)                = set_var(var, floor_op(value: value));
Instr ceiling_op(WriteObjVar var, AtomicExpr value)              = set_var(var, ceiling_op(value: value));
Instr int_to_float(WriteObjVar var, AtomicExpr value)            = set_var(var, int_to_float(value: value));

Instr mk_array(WriteObjVar v, IntExpr s)                                = set_var(v, mk_array(size: s));
Instr get_seq_slice(WriteObjVar v, AtomicExpr s, IntExpr f, IntExpr l)  = set_var(v, get_seq_slice(seq: s, idx_first: f, len: l));
Instr append_to_seq(WriteObjVar v, AtomicExpr s, AtomicExpr e)          = set_var(v, append_to_seq(seq: s, new_elem: e));
Instr join_seqs(WriteObjVar v, AtomicExpr l, AtomicExpr r)              = set_var(v, join_seqs(left: l, right: r));
Instr join_mult_seqs(WriteObjVar v, AtomicExpr ss)                      = set_var(v, join_mult_seqs(seqs: ss));
Instr rev_seq(WriteObjVar v, AtomicExpr s)                              = set_var(v, rev_seq(seq: s));
// Instr get_at(WriteObjVar v, ObjExpr s, IntExpr i)                      = get_at(var: v, seq: s, idx: i);
Instr set_at(WriteObjVar v, IntExpr i, AtomicExpr x)                    = set_at(var: v, idx: i, value: x);

Instr lookup(BoolVar sv, WriteObjVar v, StdObjVar m, AtomicExpr k)     = lookup(success_var: sv, var: v, map: m, key: k);
Instr lookup(WriteObjVar v, StdObjVar m, AtomicExpr k)                 = lookup(var: v, map: m, key: k);
Instr ext_lookup(BoolVar sv, WriteObjVar v, StdObjVar m, SymbObj k)    = ext_lookup(success_var: sv, var: v, map: m, key: k);
Instr ext_lookup(WriteObjVar v, StdObjVar m, SymbObj k)                = ext_lookup(var: v, map: m, key: k);

Instr merge_sets(WriteObjVar v, AtomicExpr ss)  = set_var(v, merge_sets(sets: ss));
Instr merge_maps(WriteObjVar v, AtomicExpr ms)  = set_var(v, merge_maps(maps: ms));

Instr seq_to_set(WriteObjVar v, AtomicExpr s)    = set_var(v, seq_to_set(seq: s));
Instr seq_to_mset(WriteObjVar v, AtomicExpr s)   = set_var(v, seq_to_mset(seq: s));
Instr internal_sort(WriteObjVar v, AtomicExpr s) = set_var(v, internal_sort(set: s));

Instr symb_to_str(WriteObjVar v, AtomicExpr s)   = set_var(v, :symb_to_str(s));

Instr read_pending_var(WriteObjVar tv, <PendingStateVar, PendingInputVar> sv) = set_var(tv, :read_pending_var(sv));

Instr add_attachment(WriteObjVar v, AtomicExpr t, AtomicExpr d) = set_var(v, add_attachment(target: t, data: d));
Instr fetch_attachments(WriteObjVar v, AtomicExpr e)            = set_var(v, :fetch_attachments(e));

Instr get_iter(SetItVar v, AtomicExpr s) = get_set_iter(var: v, src: s);
Instr get_iter(SeqItVar v, AtomicExpr s) = get_seq_iter(var: v, src: s);
Instr get_iter(MapItVar v, AtomicExpr m) = get_map_iter(var: v, src: m);

Instr move_forward(ItVar v) = :move_forward(v);

Instr set_var(<WriteObjVar, NamedArg> v, ObjExpr e)   = set_var(var: v, value: e);
Instr set_bvar(BoolVar v, BoolExpr e)                 = set_bvar(var: v, value: e);
Instr set_ivar(IntVar v, IntExpr e)                   = set_ivar(var: v, value: e);

Instr set_var(WriteObjVar v, <FloatExpr, RefObjExpr> e)  = set_rc_var(var: v, value: e);

Instr init_memb_var(<MembVar, MembCopyVar, MembObjVar, PendingInputVar, PendingStateVar> v, <blank, undefined> s)  = init_memb_var(var: v, new_state: s);
Instr reset_memb_var(<MembVar, MembCopyVar, PendingStateVar> v, <blank, undefined> s)   = reset_memb_var(var: v, new_state: s);
Instr clear_loc_var(LocVar v)                             = :clear_loc_var(v);

Instr make_var_undef(MembVar v) = reset_memb_var(v, :undefined);
Instr make_var_undef(LocVar v)  = clear_loc_var(v);

Instr terminate = :terminate;

Instr add_ref(ObjVar v)                     = :add_ref(v);
Instr release(<ObjVar, PendingInputVar> v)  = :release(v);

Instr print_obj(AtomicExpr x) = print_obj(obj: x);

Instr ret_val(<AtomicExpr, AtomicBoolExpr> e) = :ret_val(e);

Instr no_op = :no_op;

Instr branch(BoolExpr c, Instr* t, Instr* f) =
  if t != ()
    then branch(cond: c, when_true: t, when_false: f)
    else branch(cond: neg(c), when_true: nonempty(f), when_false: t);

Instr branch_or_no_op(BoolExpr c, Instr* t, Instr* f) =
  if t == () and f == ()
    then no_op
    else branch(c, t, f);

//Instr symbol_switch() = symbol_switch(val: ObjExpr, cases: (vals: SymbObj+, instrs: [Instr])*, else: [Instr^]?);

Instr repeat(Instr+ b) = :repeat(b);
Instr break_loop       = :break_loop;

Instr execute_block(Instr+ b) = :execute_block(b);
Instr exit_block              = :exit_block;

Instr switch_on_nat(IntExpr e, Instr*+ cs) = switch_on_nat(value: e, cases: cs);

Instr* symb_switch(ObjExpr e, [([+Atom], Instr+)] cs, Instr* eis) =
  if cs != [] then (symb_switch(value: e, cases: cs, else: eis)) else eis;

Instr call_proc(WriteObjVar v, ObjFnName n, <AtomicExpr, BoundCls>* ps) = call_proc(var: v, name: n, params: ps);
Instr call_cls(WriteObjVar v, <ClsVar, NamedArg> cv, AtomicExpr* ps)    = call_cls(var: v, cls_var: cv, params: ps);

Instr queue_update(AutoSymbol s, BlockNodeId id)              = queue_update(type: s, id: id);
Instr queue_cond_update(AutoSymbol s, BlockNodeId id, Bool b) = queue_cond_update(type: s, id: id, inval_cache: b);

Instr insert_timer(AutoSymbol a, Nat i, IntExpr t)  = insert_timer(type: a, idx: i, time: t);
Instr clear_timer(AutoSymbol a, IntExpr i)          = clear_timer(type: a, idx: i);

Instr auto_pre_init(AnyAutoVar v, AutoSymbol t) = auto_pre_init(var: v, type: t);
Instr auto_cleanup(AnyAutoVar v, AutoSymbol t)  = auto_cleanup(var: v, type: t);

Instr set_input(AnyAutoVar v, AutoSymbol t, Atom i, AtomicExpr e) = set_input(var: v, type: t, input: i, value: e);
Instr clear_input(AnyAutoVar v, AutoSymbol t, Atom i)             = clear_input(var: v, type: t, input: i);

Instr auto_init(AnyAutoVar v, AutoSymbol t)                   = auto_init(var: v, type: t);
Instr auto_init(AutoSymbol t)                                 = auto_init(type: t);
Instr auto_update(AnyAutoVar v, AutoSymbol t)                 = auto_update(var: v, type: t);
Instr auto_update(AutoSymbol t)                               = auto_update(type: t);
Instr auto_update_node(AutoSymbol t, BlockNodeId n)           = auto_update_node(type: t, node: n);
Instr auto_update_node(AutoSymbol t, BlockNodeId n, IntVar v) = auto_update_node(type: t, node: n, time_var: v);

Instr auto_apply(AnyAutoVar v, AutoSymbol t, IntExpr et)  = auto_apply(var: v, type: t, elapsed_time: et);
Instr auto_apply(AutoSymbol t, IntExpr et)                = auto_apply(type: t, elapsed_time: et);

Instr init_db(AnyDBVar v, DBSymbol t)     = init_db(db_var: v, type: t);
Instr cleanup_db(AnyDBVar v, DBSymbol t)  = cleanup_db(db_var: v, type: t);
Instr send_msg(AnyDBVar v, DBSymbol t, AtomicExpr m, Bool r) = send_msg(db_var: v, type: t, msg: m, is_root: r);
Instr send_msg(AnyDBVar v, DBSymbol t, AtomicExpr m, Bool r, StdVar rv) = send_msg(db_var: v, type: t, msg: m, is_root: r, res_var: rv);
Instr try_update(DBSymbol t, UpdateId id, AtomicExpr* as) = try_update(type: t, update_id: id, args: as);

Instr invoke_auto_method(WriteObjVar rv, AutoSymbol t, MethodId id, AtomicExpr* as) =
  invoke_auto_method(res_var: rv, type: t, method_id: id, args: as);

Instr invoke_auto_method(WriteObjVar rv, AnyAutoVar av, AutoSymbol t, MethodId id, AtomicExpr* as) =
  invoke_auto_method(res_var: rv, auto_var: av, type: t, method_id: id, args: as);

Instr invoke_db_method(WriteObjVar rv, DBSymbol t, MethodId id, AtomicExpr* as) =
  invoke_db_method(res_var: rv, type: t, method_id: id, args: as);

Instr invoke_db_method(WriteObjVar rv, AnyDBVar dv, DBSymbol t, MethodId id, AtomicExpr* as) =
  invoke_db_method(res_var: rv, db_var: dv, type: t, method_id: id, args: as);

Instr push_call_info(ObjFnName fn_name, Maybe[FnPar]* params) = push_call_info(fn_name: fn_name, params: params);
Instr pop_call_info = :pop_call_info;

Instr runtime_check(AtomicExpr c, String f, NzNat l, Maybe[String] t, <StdVar, NamedArg>* vs) =
  runtime_check(cond: c, file: f, line: l, text: t, vars: vs);

Instr cls_scope(NamedArg v, BoundCls c, Instr+ b) = cls_scope(var: v, bound_cls: c, body: b);

//////////////////// //////////////////// ////////////////////

ClsDef   cls_def(NzNat a, Instr+ b)   = cls_def(arity: a, body: b);

BoundCls bound_cls(ClsDef c, Var* vs)  = bound_cls(cls: c, env: vs);

<obj> obj = :obj;
ObjProcPar cls(ClsVar n, NzNat a) = cls(name: n, arity: a);
ObjProcPar cls(NzNat a) = cls(arity: a);

BoolProcDef bool_proc_def(BoolFnName name, NzNat arity, Instr+ body) =
  bool_proc_def(
    name:  name,
    arity: arity,
    body:  body
  );

ConstBlockData time_slots_len(Atom id, Nat+ ls) = time_slots_len(expr_id: id, lengths: ls);

StdBlockNodeId          std_block_node_id(Atom id)             = :std_block_node_id(id);
CondNodeId              cond_node_id(Nat id)                   = :cond_node_id(id);
NestedAutoInputNodeId   nested_auto_input_id(Atom a, Atom i)   = nested_auto_input_id(auto: a, input: i);

MethodId method_id(MethodSymbol s, Nat a) = method_id(symbol: s, arity: a);
UpdateId update_id(UpdateSymbol s, Nat a) = update_id(symbol: s, arity: a);

MethodId method_id(MethodSymbol s, Nat a, Nat id) = method_id(symbol: s, arity: a, id: id);
UpdateId update_id(UpdateSymbol s, Nat a, Nat id) = update_id(symbol: s, arity: a, id: id);

UpdateId main_handler        = :main_handler;
UpdateId handler_id(Nat n)   = :handler_id(n);

//////////////////// Derived expressions  ////////////////////

BoolExpr and(BoolExpr e1, BoolExpr e2)      = and((e1, e2));
BoolExpr or(BoolExpr e1, BoolExpr e2)       = or((e1, e2));
BoolExpr and_then(BoolExpr e1, BoolExpr e2) = and_then((e1, e2));
BoolExpr or_else(BoolExpr e1, BoolExpr e2)  = or_else((e1, e2));

BoolExpr and(BoolExpr e1, BoolExpr e2, BoolExpr e3)      = and((e1, e2, e3));
BoolExpr or(BoolExpr e1, BoolExpr e2, BoolExpr e3)       = or((e1, e2, e3));
BoolExpr and_then(BoolExpr e1, BoolExpr e2, BoolExpr e3) = and_then((e1, e2, e3));
BoolExpr or_else(BoolExpr e1, BoolExpr e2, BoolExpr e3)  = or_else((e1, e2, e3));

BoolExpr is_empty_set(ObjExpr e) = is_eq(e, empty_set);
BoolExpr is_empty_seq(ObjExpr e) = is_eq(e, empty_seq);
BoolExpr is_empty_map(ObjExpr e) = is_eq(e, empty_map);

BoolExpr is_not_blank(<MembVar, QualAutoMembVar, LocVar> v) = neg(is_blank(v));
BoolExpr is_not_null(AnyNullableVar v)                      = neg(is_null(v));
BoolExpr is_neither_blank_nor_null(<MembVar, LocVar> v)     = neg(or(is_null(v), is_blank(v)));

BoolExpr is_between(IntExpr e, IntExpr l, IntExpr u) = and(is_ge(e, l), is_le(e, u));

BoolExpr is_true(ObjExpr e)  = is_eq(e, obj_true);
BoolExpr is_false(ObjExpr e) = is_eq(e, obj_false);

BoolExpr is_bool(ObjExpr e)  = or(is_true(e), is_false(e));

BoolExpr is_even(IntExpr e) = is_eq(mod_op(e, 2), 0);
BoolExpr is_odd(IntExpr e)  = is_eq(mod_op(e, 2), 1);

SymbObj obj_true  = :object(true);
SymbObj obj_false = :object(false);

SymbObj obj_nil   = :object(nil);

//////////////////// Derived instructions ////////////////////

Instr repeat_while(BoolExpr cond, Instr+ body) = repeat(nonempty((do_if_not(cond, break_loop)) & body));

Instr increment(IntVar v, IntExpr a)  = set_ivar(v, add(v, a));
Instr increment(IntVar v)             = increment(v, 1);

Instr do_if(BoolExpr cond, Instr* instrs)      = branch(cond, instrs, ());
Instr do_if_not(BoolExpr cond, Instr* instrs)  = branch(cond, (), instrs);

Instr do_if(BoolExpr cond, Instr instr)      = do_if(cond, (instr));
Instr do_if_not(BoolExpr cond, Instr instr)  = do_if_not(cond, (instr));

Instr* opt_do_if(BoolExpr cond, Instr* instrs) = if   instrs == ()  then ()
                                                 elif cond == true  then instrs
                                                 elif cond == false then ()
                                                                    else (do_if(cond, instrs));

// Instr do_if_in(AtomicExpr val, SymbObj+ values, [Instr] instrs) =
//   symbol_switch(
//     val:   val,
//     cases: {(vals: values, instrs: instrs)}
//   );

// Instr do_if_not_in(AtomicExpr val, SymbObj+ values, [Instr^] instrs) =
//   symbol_switch(
//     val:   val,
//     cases: {(vals: values, instrs: [])},
//     else:  instrs
//   );

Instr break_if(BoolExpr cond)     = do_if(cond, break_loop);
Instr break_if_not(BoolExpr cond) = do_if_not(cond, break_loop);

Instr exit_block_if(BoolExpr cond)     = do_if(cond, exit_block);
Instr exit_block_if_not(BoolExpr cond) = do_if_not(cond, exit_block);

Instr ret_true  = ret_val(true);
Instr ret_false = ret_val(false);

Instr ret_true_if(BoolExpr cond)  = do_if(cond, ret_true);
Instr ret_false_if(BoolExpr cond) = do_if(cond, ret_false);

Instr ret_true_if_not(BoolExpr cond)  = do_if_not(cond, ret_true);
Instr ret_false_if_not(BoolExpr cond) = do_if_not(cond, ret_false);

// Instr ret_false_if_not_in(AtomicExpr val, SymbObj+ values) = do_if_not_in(val, values, [ret_false]);

Instr check(BoolExpr e) = do_if_not(e, terminate);
// Instr check(BoolExpr e) = no_op;

Instr check_is_bool(ObjExpr e) = check(is_bool(e));

Instr get_curr_obj(WriteObjVar v, <SetItVar, SeqItVar> it) = set_var(v, get_curr_obj(it));
Instr get_curr_key(WriteObjVar v, MapItVar it)             = set_var(v, get_curr_key(it));
Instr get_curr_value(WriteObjVar v, MapItVar it)           = set_var(v, get_curr_value(it));

Instr maybe_op(Instr instr, Bool cond) = if cond then instr else no_op;

Instr block_success_if(BoolExpr c, BoolVar res_var)     = do_if(c, (set_bvar(res_var, true), exit_block));
Instr block_failure_if(BoolExpr c, BoolVar res_var)     = do_if(c, (set_bvar(res_var, false), exit_block));
Instr block_failure_if_not(BoolExpr c, BoolVar res_var) = block_failure_if(neg(c), res_var);
