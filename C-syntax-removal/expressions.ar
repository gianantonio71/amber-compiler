implicit syn_prg : SynPrg, syn_artifact : SynArtifact, impl_args : [NamedArg -> Nat]
{
  Expr desugar_expr(SynExpr syn_expr, [StdVar] def_vars) =
    transfer_attachments(desugar_expr_plain(syn_expr, def_vars), syn_expr);


  Expr desugar_expr_plain(SynExpr expr, [StdVar] def_vars):
    object()            = expr,
    float_lit()         = expr,
    seq_expr(ses?)      = desugar_seq_expr(ses, def_vars),
    seq_tail_expr()     = seq_tail_expr(desugar_expr(expr.seq, def_vars), (desugar_expr(e, def_vars) | e <- expr.tail)),
    set_expr(es?)       = set_expr([desugar_expr(e, def_vars) | e <- es]),
    map_expr(es?)       = desugar_map_expr(es, def_vars),
    tag_obj_expr()      = tag_obj_expr(desugar_expr(expr.tag, def_vars), desugar_expr(expr.obj, def_vars)),
    FnPar               = expr,
    memb_copy_var()     = expr,
    cls_par(n?)         = fn_par(n),
    const_or_var(a?)    = desugar_const_or_var_expr(a, def_vars),
    named_args_call()   = desugar_named_args_call_expr(expr.name, expr.args, nonempty(expr.named_args), def_vars),
    unary_op_call()     = fn_call(op_symbol(expr.op), (desugar_expr(expr.expr, def_vars))),
    binary_op_call()    = fn_call(op_symbol(expr.op), (desugar_expr(expr.left_arg, def_vars), desugar_expr(expr.right_arg, def_vars))),
    builtin_call()      = builtin_call(expr.name, (desugar_expr(e, def_vars) | e <- expr.args)),

    call_lookalike()    = desugar_call_lookalike(expr.target, expr.args, def_vars),
    rel_memb_test()     = desugar_rel_memb_test(expr.target, expr.args, def_vars),
    rel_lookup()        = desugar_rel_lookup(expr.target, expr.args, def_vars),

    singl_only_elem()   = singl_only_elem(desugar_expr(expr.set, def_vars)),
    and()               = and_expr(desugar_expr(expr.left, def_vars), desugar_expr(expr.right, def_vars)),
    or()                = or_expr(desugar_expr(expr.left, def_vars), desugar_expr(expr.right, def_vars)),
    not(e?)             = not_expr(desugar_expr(e, def_vars)),
    eq()                = eq(desugar_expr(expr.left, def_vars), desugar_expr(expr.right, def_vars)),
    neq()               = not_expr(eq(desugar_expr(expr.left, def_vars), desugar_expr(expr.right, def_vars))),
    membership()        = membership(desugar_expr(expr.obj, def_vars), syn_type_to_type(expr.type, nil)),
    cast_expr()         = cast_expr(desugar_expr(expr.expr, def_vars), syn_type_to_type(expr.type, nil)),
    accessor()          = desugar_accessor(expr, def_vars),
    accessor_test()     = desugar_accessor_test(expr.expr, expr.field, def_vars),
    ex_qual()           = desugar_ex_qual_expr(expr.source, expr.cond, def_vars),
    set_comp()          = desugar_set_comp_expr(expr.expr, expr.source, def_vars),
    map_comp()          = desugar_map_comp_expr(expr.key_expr, expr.value_expr, expr.source, def_vars),
    seq_comp()          = desugar_seq_comp_expr(expr, def_vars),
    range_comp()        = desugar_range_comp_expr(expr, def_vars),
    if_expr()           = desugar_if_expr(expr, def_vars),
    match_expr()        = desugar_match_expr(expr.exprs, expr.cases, def_vars),
    do_expr(ss?)        = do_expr(desugar_stmts(ss, def_vars)),
    let_expr()          = do_expr(desugar_stmts(nonempty(expr.stmts & (syn_ret_stmt(expr.expr))), def_vars)),
    is_set(v?)          = is_set(memb_var(v)),
    output_is_def()     = expr;

  //////////////////////////////////////////////////////////////////////////////

  Expr desugar_call_lookalike(<StdVar, MembVar, QualAutoMembVar, QualDBMembVar, SymbChainAcc> var, Expr+ args)
  {
    arity = length(args);
    assert arity == 1 or arity == 2;
    return if arity == 1
      then unary_pseudo_call(var, args(0))
      else map_search(var, args(0), args(1));
  }

  Expr desugar_call_lookalike(NamedArg var, Expr+ args)
  {
    exp_arity = impl_args(var);
    actual_arity = length(args);
    assert (exp_arity == 0 and (actual_arity == 1 or actual_arity == 2)) or exp_arity == actual_arity;
    if exp_arity != 0:
      return cls_call(var, args);
    elif actual_arity == 1:
      return unary_pseudo_call(var, args(0));
    else
      return map_search(var, args(0), args(1));
    ;
  }

  Expr desugar_call_lookalike(ClsVar var, Expr+ args) = cls_call(var, args);

  Expr desugar_call_lookalike(AnyRelVar var, Expr+ args)
  {
    arity = length(args);
    rel_var_arity = rel_vars_arities[var];
    if arity == rel_var_arity:
      return rel_memb_test_expr(var, (just(a) | a <- args));
    else
      assert arity == rel_var_arity - 1;
      return rel_lookup_expr(var, args, nat(rel_var_arity-1));
    ;
  }

  Expr desugar_call_lookalike(PreAutoCall pc, Expr+ args) =
    auto_method_call_expr(var: pc.var if pc.var?, name: pc.method, args: args);

  Expr desugar_call_lookalike(PreDBCall pc, Expr+ args) =
    db_method_call_expr(var: pc.var if pc.var?, name: pc.method, args: args);

  Expr desugar_call_lookalike(FnFamilyId fn_symb, Expr+ args) = fn_call(fn_symb, args, [:]);

  //////////////////////////////////////////////////////////////////////////////

  Expr desugar_call_lookalike(SynExpr syn_target, SynExpr+ syn_args, [StdVar] def_vars)
  {
    arity = length(syn_args);
    if syn_target :: IdChain:
      symbols = destructure_id_chain(syn_target);
      target = only(resolve_by_priority_as_call_lookalike_target(symbols, arity, def_vars));
      if target :: FnFamilyId:
        arg_arities = arg_arities(target, arity);
        args = (desugar_fn_arg(a, ea, def_vars) | a, ea <- zip(syn_args, arg_arities));
        return fn_call(target, args, [:]);
      else
        args = (desugar_expr(a, def_vars) | a <- syn_args);
        return desugar_call_lookalike(target, args);
      ;
    else
      args = (desugar_expr(e, def_vars) | e <- syn_args);
      target = desugar_expr(syn_target, def_vars);
      if arity == 1:
        return unary_pseudo_call(target, only(args));
      else
        assert arity == 2;
        return map_search(target, args[0], args[1]);
      ;
    ;
  }


  Expr desugar_rel_memb_test(SynExpr syn_target, Maybe[SynExpr]+ syn_args, [StdVar] def_vars)
  {
    assert at_least_one((a == nil | a <- syn_args));
    assert at_least_one((a != nil | a <- syn_args));

    args = (apply(a, desugar_expr($, def_vars)) | a <- syn_args);
    if syn_target :: IdChain:
      target = only(resolve_by_priority_as_memb_test_target(destructure_id_chain(syn_target), def_vars));
    else
      target = desugar_expr(syn_target, def_vars);
    ;

    return desugar(target, args);


    Expr desugar(AnyRelVar target, Maybe[Expr]+ args) = rel_memb_test_expr(target, args);

    Expr desugar(Expr target, Maybe[Expr]+ args)
    {
      assert length(args) == 2 and args[0] != nil and args[1] == nil;
      return key_search(target, try_value(args[0]));
    }
  }


  Expr desugar_rel_lookup(Atom+ symbols, Maybe[SynExpr]+ syn_args, [StdVar] def_vars)
  {
    rel_var = only(resolve_by_priority_as_rel_var(symbols, def_vars));
    args = (desugar_expr(value(a), def_vars) | a <- syn_args, a != nil);
    unknown_arg_idx = only((i | a @ i <- syn_args, a == nil));
    return rel_lookup_expr(rel_var, nonempty(args), unknown_arg_idx);
  }


  Expr desugar_seq_expr(SynSubExpr* entries, [StdVar] def_vars)
  {
    es = (desugar_expr(e, def_vars) | e <- entries);
    return if es :: Expr+ then tuple_expr(es) else seq_expr(es);
  }


  Expr desugar_map_expr([SynMapExprEntry] entries, [StdVar] def_vars) =
    map_expr([(
        key:   desugar_expr(e.key, def_vars),
        value: desugar_expr(e.value, def_vars),
        cond:  desugar_expr(e.cond, def_vars) if e.cond?
      ) | e <- entries
    ]);


  Expr desugar_const_or_var_expr(Atom symbol, [StdVar] def_vars) =
    only(resolve_by_priority_as_expr((symbol), def_vars));


  Expr desugar_accessor(SynAccExpr syn_expr, [StdVar] def_vars) =
    if syn_expr :: AccessorChain
      then only(resolve_by_priority_as_expr(destructure_id_chain(syn_expr), def_vars))
      else accessor(desugar_expr(syn_expr.expr, def_vars), object(syn_expr.field));


  Expr desugar_accessor_test(SynExpr syn_expr, Atom field, [StdVar] def_vars)
  {
    value_expr = desugar_expr(syn_accessor(syn_expr, field), def_vars);
    return match (value_expr)
      accessor()            = accessor_test(value_expr.expr, value_expr.field),
      qual_auto_memb_var()  = is_set(value_expr);
  }


  Expr desugar_named_args_call_expr(Atom name, SynExpr* syn_args, (NamedArg, StdVar*, SynExpr)+ syn_named_args, [StdVar] def_vars)
  {
    arity = length(syn_args);
    res_name = only(resolve_by_priority_as_fn_name(name, arity, def_vars));
    arg_arities = arg_arities(res_name, arity);
    args = (desugar_fn_arg(a, ea, def_vars) | a, ea <- zip(syn_args, arg_arities));
    named_args = merge(([n -> desugar_named_arg_expr(e, def_vars, as)] | n, as, e <- syn_named_args));
    return fn_call(res_name, args, named_args);


    AnyExpr desugar_named_arg_expr(SynExpr syn_expr, [StdVar] outside_vars, StdVar* cls_pars)
    {
      expr = desugar_expr(syn_expr, outside_vars & set(cls_pars));
      return if cls_pars == () then expr else named_args_cls_expr(cls_pars, expr);
    }
  }


  AnyExpr desugar_fn_arg(SynExpr syn_arg, Nat exp_arity, [StdVar] def_vars) =
    if exp_arity == 0
      then desugar_expr(syn_arg, def_vars)
    elif syn_arg :: ConstOrVar
      then only(resolve_by_priority_as_cls_expr(match (syn_arg) const_or_var(a?) = a, exp_arity, def_vars))
    else
      no_args_cls_expr(exp_arity, desugar_expr(syn_arg, def_vars));


  Expr desugar_ex_qual_expr(SynClause+ source, SynExpr cond, [StdVar] def_vars)
  {
    vs = def_vars & syn_new_vars(source);
    c  = desugar_expr(cond, vs);
    return ex_qual(mk_and_clause(source, def_vars), c);
  }


  Expr desugar_set_comp_expr(SynExpr expr, SynClause+ source, [StdVar] def_vars)
  {
    vs = def_vars & syn_new_vars(source);
    return set_comp(desugar_expr(expr, vs), mk_and_clause(source, def_vars));
  }


  Expr desugar_map_comp_expr(SynExpr key_expr, SynExpr value_expr, SynClause+ source, [StdVar] def_vars)
  {
    vs = def_vars & syn_new_vars(source);
    return map_comp(desugar_expr(key_expr, vs), desugar_expr(value_expr, vs), mk_and_clause(source, def_vars));
  }


  Expr desugar_seq_comp_expr(SynLCExpr expr, [StdVar] def_vars)
  {
    vs = def_vars & set(expr.vars) & [expr.idx_var if expr.idx_var?];
    return seq_comp(
      expr:          desugar_expr(expr.expr, vs),
      vars:          expr.vars,
      idx_var:       expr.idx_var if expr.idx_var?,
      src_expr:      desugar_expr(expr.src_expr, def_vars),
      sel_expr:      desugar_expr(expr.sel_expr, vs) if expr.sel_expr?
    );
  }


  Expr desugar_range_comp_expr(SynRCExpr expr, [StdVar] def_vars)
  {
    vs = def_vars & [expr.var];
    return range_comp(
      expr:         desugar_expr(expr.expr, vs),
      var:          expr.var,
      bound_expr:   desugar_expr(expr.bound_expr, def_vars),
      inclusive:    expr.inclusive,
      sel_expr:     desugar_expr(expr.sel_expr, vs) if expr.sel_expr?
    );
  }


  Expr desugar_if_expr(SynIfExpr expr, [StdVar] def_vars)
  {
    res = desugar_expr(expr.else, def_vars);
    for b <- reverse(expr.branches):
      res = if_expr(desugar_expr(b.cond, def_vars), desugar_expr(b.expr, def_vars), res);
    ;
    return res;
  }


  Expr desugar_match_expr(SynExpr+ exprs, SynCase+ cases, [StdVar] def_vars)
  {
    n  = length(cases[0].patterns);
    es = nonempty((desugar_expr(e, def_vars) | e <- subseq(exprs, 0, n)));
    cs = ({
      ps = (desugar_ptrn(p) | p <- c.patterns);
      vs = def_vars & seq_union((new_vars(p) | p <- ps));
      return (ptrns: ps, expr: desugar_expr(c.expr, vs));
    } | c <- cases);
    return match_expr(es, cs);
  }

  ////////////////////////////////////////////////////////////////////////////////

  CondExpr desugar_expr(SynCondExpr cexpr, [StdVar] def_vars) =
    cond_expr(
      desugar_expr(cexpr.expr, def_vars),
      desugar_expr(cexpr.cond, def_vars)
    );


  Expr mk_and_expr(Expr+ exprs)  // REMOVE DUPLICATES?
  {
    rev_exprs = reverse(exprs);
    expr      = rev_exprs[0];
    for i = 1..length(exprs):
      expr = and_expr(rev_exprs[i], expr);
    ;
    return expr;
  }

  ////////////////////////////////////////////////////////////////////////////////

  Clause mk_and_clause(SynClause+ clauses, [StdVar] def_vars)
  {
    vs = def_vars;
    cs = ();
    for c <- clauses:
      cs = cs & (desugar_clause(c, vs));
      vs = vs & syn_new_vars(c);
    ;

    rev_cs = reverse(cs);
    clause = rev_cs[0];
    for i = 1..length(clauses):
      clause = and_clause(rev_cs[i], clause);
    ;

    return clause;
  }

  //## REMEMBER TO CHECK THAT ALL VAR_PTRN() WITH A "BOUND" VARIABLE
  //## DON'T HAVE A PATTERN ASSOCIATED WITH THAT VARIABLE


  Clause desugar_clause(SynClause cls, [StdVar] def_vars)
  {
    return transfer_attachments(desugar(cls, def_vars), cls);


    Clause desugar(SynClause cls, [StdVar] def_vars):
      iter_clause()       = desugar_iter_clause(cls.vars, cls.src, def_vars),
      and_clause(cs?)     = mk_and_clause(cs, def_vars),
      or_clause()         = or_clause(desugar_clause(cls.left, def_vars), desugar_clause(cls.right, def_vars)),
      match_clause()      = match_clause(desugar_ptrn(cls.ptrn), desugar_expr(cls.expr, def_vars)),
      asgnm_clause()      = asgnm_clause(cls.var, desugar_expr(cls.expr, def_vars)),
      filter_clause()     = filter_clause(desugar_expr(cls.cond, def_vars));


    Clause desugar_iter_clause(StdVar+ vars, SynExpr syn_src_expr, [StdVar] def_vars)
    {
      if syn_src_expr :: <rel_memb_test(target: IdChain, args: Maybe[SynExpr]+)>:
        syn_args = syn_src_expr.args;
        if at_least_one((a == nil | a <- syn_args)):
          symbols = destructure_id_chain(syn_src_expr.target);
          target = only(resolve_by_priority_as_rel_var(symbols, def_vars));
          args = (apply(a, desugar_expr($, def_vars)) | a <- syn_args);
          return rel_tuple_clause(vars, target, args);
        ;
      ;

      assert length(vars) == 1 or length(vars) == 2;

      src_expr = desugar_expr(syn_src_expr, def_vars);
      return if length(vars) == 1
        then set_elem_clause(only(vars), src_expr)
        else map_entry_clause(vars(0), vars(1), src_expr);
    }
  }

  ////////////////////////////////////////////////////////////////////////////////

  //## BAD: THIS SHOULD BE REPLACED BY A COUPLE OF SUBSIGNATURES.
  () desugar_stmts((), [StdVar]) = ();

  Statement+ desugar_stmts(SynStmt+ stmts, [StdVar] def_vars)
  {
    vs = def_vars;
    ss = ();
    for s <- stmts:
      ss = ss & desugar_stmt(s, vs);
      vs = vs & syn_new_vars(s);
    ;
    return nonempty(ss);
  }


  Statement+ desugar_stmt(SynStmt stmt, [StdVar] def_vars)
  {
    stmts = match (stmt)
      delete_stmt() = (desugar_delete_entry(e, def_vars) | e <- stmt.entries),
      insert_stmt() = (desugar_insert_entry(e, stmt.force, def_vars) | e <- stmt.entries),
      _             = (desugar_stmt_plain(stmt, def_vars));

    return (transfer_attachments(s, stmt) | s <- stmts);
  }


  Statement desugar_stmt_plain(SynStmt stmt, [StdVar] def_vars):
    assignment_stmt()         = assignment_stmt(stmt.vars, desugar_expr(stmt.value, def_vars)),
    imp_update_stmt()         = imp_update_stmt(stmt.obj, desugar_expr(stmt.idx, def_vars), desugar_expr(stmt.value, def_vars)),
    return_stmt(e?)           = return_stmt(desugar_expr(e, def_vars)),
    break_stmt                = break_stmt,
    fail_stmt                 = fail_stmt,
    assert_stmt()             = desugar_assert_stmt(stmt, def_vars),
    print_stmt(e?)            = print_stmt(desugar_expr(e, def_vars)),
    inf_loop_stmt(ss?)        = loop_stmt(desugar_stmts(ss, def_vars)),
    if_stmt()                 = desugar_if_stmt(stmt, def_vars),
    let_stmt()                = desugar_let_stmt(stmt, def_vars),
    loop_stmt()               = desugar_loop_stmt(stmt, def_vars),
    for_stmt()                = desugar_for_stmt(stmt.loops, stmt.body, def_vars),
    return_stmt               = return_stmt,
    proc_call_stmt()          = proc_call_stmt(
                                  res_var:    stmt.res_var if stmt.res_var?,
                                  proc_name:  stmt.proc_name,
                                  params:     (desugar_expr(p, def_vars) | p <- stmt.args)
                                ),

    send_msg_stmt()           = send_msg_stmt(memb_db_var(stmt.var), desugar_expr(stmt.msg, def_vars)),
    try_update_stmt()         = try_update_stmt(update_symbol(stmt.name), (desugar_expr(e, def_vars) | e <- stmt.args)),
    set_memb_var_stmt()       = set_memb_var_stmt(pending_state_var(stmt.var), desugar_expr(stmt.value, def_vars)),

    set_input_ctrl_stmt()     = set_input_ctrl_stmt(loc_auto_var(stmt.var), stmt.input, desugar_expr(stmt.value, def_vars)),
    clear_input_ctrl_stmt()   = clear_input_ctrl_stmt(loc_auto_var(stmt.var), stmt.input),
    apply_ctrl_stmt()         = if stmt.elapsed_time?
                                  then apply_ctrl_stmt(loc_auto_var(stmt.var), desugar_expr(stmt.elapsed_time, def_vars))
                                  else apply_ctrl_stmt(loc_auto_var(stmt.var)),
    send_msg_ctrl_stmt()      = send_msg_ctrl_stmt(var(stmt.res_var), loc_db_var(stmt.db_var), desugar_expr(stmt.msg, def_vars));


  Statement desugar_delete_entry((var: Atom, args: Maybe[SynExpr]+) entry, [StdVar] def_vars) =
    delete_stmt(rel_var(entry.var), (apply(a, desugar_expr($, def_vars)) | a <- entry.args));


  Statement desugar_insert_entry((var: Atom, args: SynExpr+) entry, Bool force, [StdVar] def_vars) =
    insert_stmt(rel_var(entry.var), (desugar_expr(e, def_vars) | e <- entry.args), force);


  Statement desugar_if_stmt(SynIfStmt[SynStmt] stmt, [StdVar] def_vars)
  {
    else_stmts = stmt.else; //## THIS IS HERE JUST TO SHUT UP THE TYPECHECKER
    res = if else_stmts != () then desugar_stmts(else_stmts, def_vars) else ();
    for b <- reverse(stmt.branches):
      cond = desugar_expr(b.cond, def_vars);
      body = desugar_stmts(b.body, def_vars);
      res  = (if_stmt(cond, body, res));
      fail if not res :: (Statement); //## BAD BAD BAD: LOOP DOESN'T TYPECHECK ON ITS OWN
    ;
    assert res :: Seq and length(res) == 1;
    return res[0]; //## BAD BAD BAD
  }


  Statement desugar_let_stmt(SynLetStmt[SynStmt] stmt, [StdVar] def_vars)
  {
    asgnms = merge(([var -> desugar_expr(val, def_vars)] | var, val <- stmt.asgnms));
    new_impl_args = update(impl_args, [v -> 0 | v : unused_var <- asgnms]);
    body   = desugar_stmts(stmt.body, def_vars, impl_args=new_impl_args);
    return let_stmt(asgnms, body);
  }


  Statement desugar_loop_stmt(SynLoopStmt[SynStmt] stmt, [StdVar] def_vars)
  {
    cond      = desugar_expr(stmt.cond, def_vars);
    exit_stmt = if_stmt(not_expr(cond), (break_stmt), ());
    body      = desugar_stmts(stmt.body, def_vars);
    if stmt.skip_first:
      body = body & (exit_stmt);
    else
      body = (exit_stmt) & body;
    ;
    return loop_stmt(nonempty(body));
  }


  Statement desugar_for_stmt(SynIter+ loops, SynStmt+ body, [StdVar] def_vars)
  {
    //## ALSO MAKE SURE SYNTAX CHECK GETS IT RIGHT
    iters  = loops;
    vs     = def_vars;
    for_vs = ();
    for it <- iters:
      ivs  = match (it)
        seq_iter()   = set(it.vars),
        range_iter() = [it.var if it.var?];
      vs     = vs & ivs & [it.idx_var if it.idx_var?];
      for_vs = for_vs & (vs);
    ;
    res = desugar_stmts(body, vs);
    for it @ i <- reverse(iters):
      vs = rev_at(for_vs, i);
      if it :: SynSeqIter: //## BAD BAD BAD
        vals = desugar_expr(it.values, vs);
        res  = (foreach_stmt(it.vars, if it.idx_var? then just(it.idx_var) else nil, vals, res));
      elif it :: SynRangeIter: //## BAD BAD BAD
        start_val = desugar_expr(it.start_val, vs);
        end_val   = desugar_expr(it.end_val, vs);
        res = (for_stmt(if it.var? then just(it.var) else nil, start_val, end_val, it.end_val_incl, res));
      else
        fail; // We should never get here
      ;
      fail if not res :: (Statement); //## BAD BAD BAD: LOOP DOESN'T TYPECHECK ON ITS OWN
    ;
    assert res :: Seq and length(res) == 1;
    return res[0]; //## BAD BAD BAD
  }


  Statement desugar_assert_stmt(SynAssertStmt stmt, [StdVar] def_vars)
  {
    expr = desugar_expr(stmt.cond, def_vars);
    loc_vars = [v | v <- def_vars, v :: StdVar];
    scalar_impl_args = [arg | arg : arity <- impl_args, arity == 0];
    return assert_stmt(expr, loc_vars & scalar_impl_args, stmt.file, stmt.line, stmt.text);
  }

  ////////////////////////////////////////////////////////////////////////////////

  Pattern desugar_ptrn(SynPtrn ptrn)
  {
    return transfer_attachments(desugar(ptrn), ptrn);

    Pattern desugar(SynPtrn ptrn):
      ptrn_symbol             = ptrn,
      ptrn_float              = ptrn,
      ptrn_any                = ptrn,
      ptrn_seq                = ptrn_seq,
      ptrn_set                = ptrn_set,
      ptrn_map                = ptrn_map,
      ptrn_symbol()           = ptrn,
      ptrn_integer(integer)   = ptrn_integer,
      ptrn_integer(int_obj?)  = ptrn_integer(int_obj),
      ptrn_tuple(ps?)         = ptrn_tuple((desugar_ptrn(p) | p <- ps)),
      ptrn_tag_obj            = ptrn_tag_obj(ptrn_symbol, ptrn_any),
      ptrn_tag_obj()          = ptrn_tag_obj(ptrn.tag, desugar_ptrn(ptrn.obj)),
      ptrn_var()              = ptrn_var(ptrn.var, desugar_ptrn(ptrn.ptrn)),
      ptrn_type(type?)        = type_to_pattern(syn_type_to_type(type, nil), typedefs),
      ptrn_union(ps?)         = ptrn_union(set((desugar_ptrn(p) | p <- ps)));
  }
}
