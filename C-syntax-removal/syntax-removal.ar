implicit syn_prg : SynPrg
{
  Program desugared_prg = program(
    typedefs:     typedefs,
    fndefs:       desugared_fn_defs,
    proc_defs:    [desugar_proc_def(pd) : pd <- syn_proc_defs],
    auto_defs:    [desugar_automaton(auto_def=a) : a <- resolve_inheritance(syn_auto_defs)],
    data_bases:   [desugared_data_base(db_def=db) : db <- syn_db_defs]
  );

  //////////////////////////////////////////////////////////////////////////////
  //////////////////////////////////////////////////////////////////////////////

  Procedure desugar_proc_def(SynProcDef pd)
  {
    args = ((var: p.var, type: syn_type_to_type(p.type, nil)) : p <- pd.args);
    maybe_ret_type = if pd.res_type != nil then just(syn_type_to_type(value(pd.res_type), nil)) else nil;
    body = desugar_stmts(pd.body, set((p.var : p <- pd.args)), syn_artifact = pd, impl_args = [:]);
    auto_vars = merge(([loc_auto_var(v.var) -> auto_symbol(v.type)] : v <- pd.auto_vars));
    db_vars = merge(([loc_db_var(v.var) -> db_symbol(v.type)] : v <- pd.db_vars));

    return procedure(
      name:       pd.name,
      args:       args,
      res_type:   maybe_ret_type,
      auto_vars:  auto_vars,
      db_vars:    db_vars,
      body:       body
    );
  }

  //////////////////////////////////////////////////////////////////////////////
  //////////////////////////////////////////////////////////////////////////////

  [Function] desugared_fn_defs
  {
    fn_defs_by_name_arity = group_by(ext_syn_fn_defs, (left($).name, length(left($).args)));
    return union([desugar_fn_def_family(fds) : unused_var, fds <- fn_defs_by_name_arity]);


    [Function] desugar_fn_def_family([+(SynFnDef, [SynSgn])] fn_defs)
    {
      multiple = size(fn_defs) > 1;
      return seq_union((
        desugar_fn_def(fd, if multiple then unique_fn_symbol(fd.name, i) else fd.name, ias)
        : fd, ias @ i <- rand_sort(fn_defs)
      ));
    }


    [Function] desugar_fn_def(SynFnDef fn_def, BasicFnSymb final_name, [SynSgn] impl_args)
    {
      // Grouping nested functions by name and arity
      nested_fn_def_groups = values(group_by(set(fn_def.local_fns), ($.name, length($.args))));
      // Desugaring each group
      nested_fns = union([desugar_nested_fn_def_family(fds, fn_def, final_name, impl_args) : fds <- nested_fn_def_groups]);
      // Desugaring the main function
      let syn_artifact = top_level_fn_def(fn_def, final_name, impl_args):
        fn = make_fn_def(final_name, fn_def.args, impl_args, fn_def.res_type, fn_def.expr);
      ;
      return nested_fns & [transfer_attachments(fn, fn_def)];
    }


    [Function] desugar_nested_fn_def_family([+SynFnDef] fn_defs, SynFnDef outer_fn_def, BasicFnSymb outer_fn_name, [SynSgn] impl_args)
    {
      multiple = size(fn_defs) > 1;
      return set((
        desugar_nested_fn_def(fd, maybe(i, multiple), outer_fn_def, outer_fn_name, impl_args)
        : fd @ i <- rand_sort(fn_defs)
      ));
    }


    Function desugar_nested_fn_def(SynFnDef fn_def, Maybe[Nat] maybe_idx, SynFnDef outer_fn_def, BasicFnSymb outer_fn_name, [SynSgn] impl_args)
    {
      local_name = fn_def.name;
      local_name = unique_fn_symbol(local_name, value(maybe_idx)) if maybe_idx != nil;
      final_name = nested_fn_symbol(outer_fn_name, local_name);
      let syn_artifact = nested_fn_def(fn_def, outer_fn_def, outer_fn_name, impl_args):
        fn = make_fn_def(final_name, fn_def.args, impl_args, fn_def.res_type, fn_def.expr);
      ;
      return transfer_attachments(fn, fn_def);
    }
  }
}

////////////////////////////////////////////////////////////////////////////////

implicit syn_prg : SynPrg, syn_artifact : SynArtifact
{
  Function make_fn_def(FnSymbol name, SynArg* syn_args, [SynSgn] syn_impl_args, SynType syn_res_type, SynExpr syn_expr)
  {
    args = (desugar_formal_arg(a) : a <- syn_args);
    impl_args = [a.name -> desugar_impl_arg(a) : a <- syn_impl_args];
    res_type = syn_type_to_type(syn_res_type, nil);
    def_vars = [var(a.name) : a <- set(syn_args); obj_arg() <~ a; a.name?];
    expr = desugar_expr(syn_expr, def_vars, impl_args = [a.name -> arity(a) : a <- syn_impl_args]);
    return function(name, args, impl_args, res_type, expr);


    FormalObjArg desugar_formal_arg(SynObjArg arg) =
      formal_obj_arg(
        var:  var(arg.name) if arg.name?,
        type: syn_type_to_type(arg.type, nil)
    );


    FormalClsArg desugar_formal_arg(SynClsArg arg) =
      formal_cls_arg(
        var:  cls_var(arg.name),
        type: syn_type_to_type(arg.type, nil)
      );


    AnyType desugar_impl_arg(SynSgn signature)
    {
      arg_types = (syn_type_to_type(p, nil) : p <- signature.args);
      res_type = syn_type_to_type(signature.res_type, nil);
      return if arg_types == () then res_type else cls_type(arg_types, res_type);
    }
  }
}
