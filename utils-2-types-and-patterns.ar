Pattern type_to_pseudotype_pattern(Type type, [TypeName -> Type] typedefs) =
  pseudotype_pattern(pseudotype(type, typedefs));

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

NePseudoType pseudotype(Type type, [TypeName -> Type] typedefs) =
  // empty_type            = pseudotype_empty,
  empty_type            = undefined, ## TO FIX THIS, TRY TO REPLACE Type WITH NeType WHEREVER POSSIBLE. BUT IS IT WORTH IT?
  symb_type(object(a?)) = pseudotype_symbol(a),
  atom_type             = pseudotype_symbols,
  integer               |
  low_ints()            |
  high_ints()           |
  int_range()           = pseudotype_integers,
  float_type            = pseudotype_floats,
  empty_seq_type        = pseudotype_empty_seq,
  empty_rel_type        = pseudotype_empty_rel,
  type_var()            = pseudotype_any, ## NOT SURE HERE...
  type_ref(ts?)         = pseudotype(expand_type_ref(ts, typedefs), typedefs),
  ne_seq_type()         = pseudotype_ne_seqs,
  ne_set_type()         = pseudotype_ne_sets,
  ne_map_type()         = pseudotype_ne_bin_rels,
  ne_bin_rel_type()     = pseudotype_ne_bin_rels,
  ne_tern_rel_type()    = pseudotype_ne_tern_rels,
  ne_record_type()      = pseudotype_ne_bin_rels,
  tuple_type()          = pseudotype_ne_seqs,
  tag_obj_type()        = { match (type.tag_type)
                              atom_type             = pseudotype_tag_objs,
                              symb_type(object(a?)) = pseudotype_tag_obj(a)
                          },
  union_type(ts?)       = pseudotype_union([pseudotype(t, typedefs) : t <- ts]);
