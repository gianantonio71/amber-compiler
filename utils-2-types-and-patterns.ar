
//## BAD: THIS IS ONLY USED TO SHUT UP THE TYPE CHECKER. IT SHOULD BE REPLACED
//## WITH A "SUBSET SIGNATURE" OF type_to_pattern
TagPtrn tag_type_to_tag_ptrn(TagType) =
  atom_type     = ptrn_symbol,
  symb_type(s?) = ptrn_symbol(s);

Pattern type_to_pattern(Type type, [TypeName -> Type] typedefs) =
  atom_type           = ptrn_symbol,
  symb_type(s?)       = ptrn_symbol(s),
  IntType             = ptrn_integer(type),
  float_type          = ptrn_float,
  type_ref(ts?)       = type_to_pattern(expand_type_ref(ts, typedefs), typedefs),
  empty_seq_type      = ptrn_empty_seq,
  empty_set_type      = ptrn_empty_set,
  empty_bin_rel_type  = ptrn_empty_bin_rel,
  empty_tern_rel_type = ptrn_empty_tern_rel,
  ne_seq_type()       = ptrn_ne_seq,
  ne_set_type()       = ptrn_ne_set,
  ne_map_type()       = ptrn_ne_map,
  ne_bin_rel_type()   = ptrn_ne_bin_rel,
  ne_tern_rel_type()  = ptrn_ne_tern_rel,
  // ne_record_type(fs?) = ptrn_ne_map,
  // tuple_type(ts?)     = ptrn_ne_seq,
  // tag_obj_type()      = ptrn_tag_obj(tag_type_to_tag_ptrn(type.tag_type), type_to_pattern(type.obj_type)),
  tag_obj_type()      = ptrn_tag_obj(tag_type_to_tag_ptrn(type.tag_type), ptrn_any),
  union_type(ts?)     = ptrn_union([type_to_pattern(t, typedefs) : t <- ts]),
  _                   = {fail;};


Pattern type_to_pseudotype_pattern(Type type, [TypeName -> Type] typedefs) =
  pseudotype_pattern(pseudotype(type, typedefs));

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

NePseudoType pseudotype(Type type, [TypeName -> Type] typedefs) =
  // empty_type            = pseudotype_empty,
  empty_type            = {fail;}, //## TO FIX THIS, TRY TO REPLACE Type WITH NeType WHEREVER POSSIBLE. BUT IS IT WORTH IT?
  symb_type(object(a?)) = pseudotype_symbol(a),
  atom_type             = pseudotype_symbols,
  IntType               = pseudotype_integers,
  float_type            = pseudotype_floats,
  empty_seq_type        = pseudotype_empty_seq,
  empty_set_type        = pseudotype_empty_set,
  empty_bin_rel_type    = pseudotype_empty_bin_rel,
  empty_tern_rel_type   = pseudotype_empty_tern_rel,
  type_var()            = pseudotype_any, //## NOT SURE HERE...
  type_ref(ts?)         = pseudotype(expand_type_ref(ts, typedefs), typedefs),
  ne_seq_type()         = pseudotype_ne_seqs,
  ne_set_type()         = pseudotype_ne_sets,
  ne_map_type()         = pseudotype_ne_bin_rels,
  ne_bin_rel_type()     = pseudotype_ne_bin_rels,
  ne_tern_rel_type()    = pseudotype_ne_tern_rels,
  ne_record_type()      = pseudotype_ne_bin_rels,
  tuple_type()          = pseudotype_ne_seqs,
  tag_obj_type()        = { match (type.tag_type)
                              atom_type             = pseudotype_tag_objs,
                              symb_type(object(a?)) = pseudotype_tag_obj(a)
                          },
  union_type(ts?)       = pseudotype_union([pseudotype(t, typedefs) : t <- ts]);


Bool pseudotypes_are_disjoint(Type t1, Type t2, [TypeName -> Type] typedefs) =
  t1 == empty_type or t2 == empty_type or are_disjoint(pseudotype(t1, typedefs), pseudotype(t2, typedefs));
