type AnyAutoAction = AutoAtomicAction, AutoCondAction, AutoRepAction;


[Atom -> [+Expr]] retrieve_update_values(AnyAutoAction action) =
  state_update()        = [action.target -> [action.value]],
  discrete_signal_def() |
  msg_send()            = [],
  cond_action()         |
  rep_action()          = merge_value_sets_nonempty([retrieve_update_values(a) : a <- action.body & action.else]);

[Atom -> [+Expr]] retrieve_discrete_signals_values(AnyAutoAction action) =
  discrete_signal_def() = [action.target -> [action.value]],
  state_update()        |
  msg_send()            = [],
  cond_action()         |
  rep_action()          = merge_value_sets_nonempty([retrieve_discrete_signals_values(a) : a <- action.body & action.else]);

////////////////////////////////////////////////////////////////////////////////

[AutoMsgSend] retrieve_msg_sends(AnyAutoAction action) =
  state_update()        |
  discrete_signal_def() = [],
  msg_send()            = [action],
  cond_action()         |
  rep_action()          = union([retrieve_msg_sends(a) : a <- action.body & action.else]);

////////////////////////////////////////////////////////////////////////////////

[MembCopyVar] memb_copy_vars(AutoAtomicAction action) =
  state_update()        = memb_copy_vars_in_expr(action.value),
  discrete_signal_def() = memb_copy_vars_in_expr(action.value),
  msg_send()            = memb_copy_vars_in_expr(action.message);


[MembCopyVar] memb_copy_vars(<AutoCondAction, AutoRepAction> action)
{
  cond_vars = memb_copy_vars_in_expr(action.cond);
  body_vars = union([memb_copy_vars(a) : a <- action.body]);
  else_vars = union([memb_copy_vars(a) : a <- action.else]);
  return cond_vars & body_vars & else_vars;
}


[MembCopyVar] memb_copy_vars_in_expr(Expr expr) =
  memb_copy_var()   = [expr],
  _                 = retrieve_from_nested_exprs(expr, memb_copy_vars_in_expr);

////////////////////////////////////////////////////////////////////////////////

[Atom] set_discrete_signals_ids(AnyAutoAction action) =
  discrete_signal_def() = [action.target],
  state_update()        |
  msg_send()            = [],
  cond_action()         |
  rep_action()          = union([set_discrete_signals_ids(a) : a <- action.body & action.else]);
