type AnyAutoAction = AutoAtomicAction, AutoCondAction, AutoRepAction;


[Atom -> [+Expr]] retrieve_update_values(AnyAutoAction action):
  update()        = [action.target -> [action.value]],
  set_discrete()  |
  method_call()   = [:],
  cond_action()   |
  rep_action()    = merge_value_sets_nonempty([retrieve_update_values(a) : a <- action.body & action.else]);

[Atom -> [+Expr]] retrieve_discrete_signals_values(AnyAutoAction action):
  set_discrete()  = [action.target -> [action.value]],
  update()        |
  method_call()   = [:],
  cond_action()   |
  rep_action()    = merge_value_sets_nonempty([retrieve_discrete_signals_values(a) : a <- action.body & action.else]);

////////////////////////////////////////////////////////////////////////////////

[AutoMethodCall] retrieve_method_calls(AnyAutoAction action):
  update()        |
  set_discrete()  = [],
  method_call()   = [action],
  cond_action()   |
  rep_action()    = union([retrieve_method_calls(a) : a <- action.body & action.else]);

////////////////////////////////////////////////////////////////////////////////

[MembCopyVar] memb_copy_vars(AutoAtomicAction action):
  update()        = memb_copy_vars_in_expr(action.value),
  set_discrete()  = memb_copy_vars_in_expr(action.value),
  method_call()   = memb_copy_vars_in_expr(action.message);


[MembCopyVar] memb_copy_vars(<AutoCondAction, AutoRepAction> action)
{
  cond_vars = memb_copy_vars_in_expr(action.cond);
  body_vars = union([memb_copy_vars(a) : a <- action.body]);
  else_vars = union([memb_copy_vars(a) : a <- action.else]);
  return cond_vars & body_vars & else_vars;
}


[MembCopyVar] memb_copy_vars_in_expr(Expr expr):
  memb_copy_var()   = [expr],
  _                 = retrieve_from_nested_exprs(expr, memb_copy_vars_in_expr);

////////////////////////////////////////////////////////////////////////////////

[Atom] set_discrete_signals_ids(AnyAutoAction action):
  set_discrete()  = [action.target],
  update()        |
  method_call()   = [],
  cond_action()   |
  rep_action()    = union([set_discrete_signals_ids(a) : a <- action.body & action.else]);
