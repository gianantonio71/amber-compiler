
//  gen_eval_code(expr, var)
//    Generates code that evaluates <expr> and stores the result in <var>, reference counted

//  gen_eval_info(expr, var)
//    Generates code needed to evaluate expr
//    If need be, the code stores the result in variable var, but it doesn't have to
//    It also generates an expression that is used to access the result
//    The expression may not be valid anymore if a variable used in the expression
//    is updated or goes out of scope

//  gen_eval_info(expr)
//    Like above, but automatically choses the name of the variable, if one is needed.
//    Also returns the id of the first free object variable.

type EvalVar        = StdVar, LocVar;
type EvalDestVar    = StdVar, LocVar, ElemVar, MembVar;

type ExprEvalRes    = StdObjVar, LeafObj;

type EvalInfo       = (eval_code: Instr*, expr: ExprEvalRes, var_used: Bool);
type ExEvalInfo     = (eval_code: Instr*, expr: ExprEvalRes, var_used: Bool, next_var_id: Nat);
type MultEvalInfo   = (eval_code: Instr*, exprs: ExprEvalRes*, next_var_id: Nat);
type VectorEvalInfo = (code: Instr*, vect_var: VecVar, count_expr: IntExpr);


implicit
{
  program            : Program,
  artifact           : Artifact,
  options            : CompilationOptions,
  next_obj_var_id    : Nat,
  next_int_var_id    : Nat,
  next_bool_var_id   : Nat,
  next_set_it_var_id : Nat,
  next_seq_it_var_id : Nat,
  next_map_it_var_id : Nat,
  next_vector_var_id : Nat,
  next_stream_var_id : Nat;


  (EvalVar, Nat) pick_temp_var(EvalDestVar res_var) =
    if {res_var :: EvalVar} then (res_var, next_obj_var_id) else (lvar(next_obj_var_id), nat(next_obj_var_id+1));


  Instr+ gen_fn_body(Expr expr)
  {
    fn_res_var = lvar(next_obj_var_id);
    code = gen_eval_code(expr, fn_res_var, next_obj_var_id = nat(next_obj_var_id + 1));
    return nonempty(code & (ret_val(fn_res_var)));
  }


  EvalInfo gen_eval_info(Expr expr, EvalVar var):
    LeafObj         = (eval_code: (),                       expr: expr,   var_used: false),
    Var             = (eval_code: (),                       expr: expr,   var_used: false),
    _               = (eval_code: gen_eval_code(expr, var), expr: var,    var_used: true);


  ExEvalInfo gen_eval_info(Expr expr)
  {
    var           = lvar(next_obj_var_id);
    info          = gen_eval_info(expr, var, next_obj_var_id = nat(next_obj_var_id + 1)); //## BUG? BUG? BUG?
    next_var_id   = nat(next_obj_var_id + if info.var_used then 1 else 0);
    //## BAD BAD BAD: SHOULD BE SOMETHING LIKE:
    //## return (info | next_var_id: next_obj_var_id + if info.var_used then 1 else 0)
    return (eval_code: info.eval_code, expr: info.expr, var_used: info.var_used, next_var_id: next_var_id);
  }


  MultEvalInfo gen_eval_info(Expr* exprs)
  {
    eval_code         = ();
    res_exprs         = ();
    next_var_id       = next_obj_var_id;

    for e <- exprs:
      info = gen_eval_info(e, next_obj_var_id = next_var_id);
      eval_code         = eval_code & info.eval_code;
      res_exprs         = res_exprs & (info.expr);
      next_var_id       = info.next_var_id;
    ;

    return (eval_code: eval_code, exprs: res_exprs, next_var_id: next_var_id);
  }


  //## THIS IS ALL WRONG (WHY?)
  VectorEvalInfo gen_vector_eval_info(SubExpr+ exprs)
  {
    elems_var = vvar(next_vector_var_id, nz_nat(length(exprs)));
    count_var = ivar(next_int_var_id);

    code, count_expr = gen_vector_eval_code(
      exprs,
      elems_var,
      count_var,
      next_vector_var_id = nat(next_vector_var_id + 1),
      next_int_var_id    = nat(next_int_var_id + 1)
    );

    return (code: code, vect_var: elems_var, count_expr: count_expr);


    (Instr*, IntExpr) gen_vector_eval_code(SubExpr* exprs, VecVar elems_var, IntVar count_var)
    {
      var_id   = elems_var.id;
      cond_var = lvar(next_obj_var_id);

      has_cond_exprs = at_least_one((e :: CondExpr | e <- exprs));

      code = (set_ivar(count_var, 0) if has_cond_exprs);

      no_cond_expr_yet = true;
      know_offset = 0;

      for e @ i <- exprs:
        target_var = if no_cond_expr_yet then evar(var_id, i) else evar(var_id, count_var, know_offset);

        if e :: Expr:
          new_code = gen_eval_code(e, target_var);
          know_offset = nat(know_offset + 1);

        elif e :: CondExpr:
          cond_eval_info = gen_eval_info(e.cond, cond_var, next_obj_var_id = nat(next_obj_var_id + 1));
          // No need to change next_obj_var_id, as cond_var is not used anymore when running this code
          expr_eval_code = gen_eval_code(e.expr, target_var);
          cond_instr = do_if(is_true(cond_eval_info.expr), expr_eval_code & (increment(count_var)));
          new_code = (cond_eval_info.eval_code || cond_instr);
          no_cond_expr_yet = false;
        else
          fail;
        ;
        code = code & new_code;
      ;

      if has_cond_exprs:
        count_expr = if know_offset == 0 then count_var else add(count_var, know_offset);
      else
        count_expr = know_offset;
      ;

      return (code, count_expr);
    }
  }

  //////////////////////////////////////////////////////////////////////////////
  //////////////////////////////////////////////////////////////////////////////

  BoundCls gen_non_scalar_par_code(ClsExpr expr):
    ClsVar      = expr,
    fn_ptr()    = {
      var = lvar(0);
      ps = (fn_par(i) | i < expr.arity);
      body = (call_proc(var, expr.name, ps), ret_val(var));
      cls = cls_def(expr.arity, body);
      return bound_cls(cls, ());
    },
    cls_expr()  = {
      //###################################################################################
      //## BUG BUG BUG: WHAT HAPPENS HERE IF THE CLOSURE ITSELF USES A CLOSURE VARIABLE? ##
      //###################################################################################
      loc_vs = seq_union(([v if v != nil, fn_par(i)] | v @ i <- expr.params));
      ext_vs = rand_sort(extern_vars(expr.expr) - loc_vs);

      subst_map = merge(([v -> cls_ext_par(i)] | v @ i <- ext_vs));
      new_expr = replace_external_vars(expr.expr, subst_map);

      cls_body = (set_var(v, fn_par(i)) | v @ i <- expr.params, v != nil) & gen_fn_body(new_expr);

      return bound_cls(cls_def(nz_nat(length(expr.params)), nonempty(cls_body)), ext_vs);
    };
}
