
//## FIND BETTER NAME
type FinalMatchAction = set_found_var_and_leave(var: EvalDestVar),
                        eval_expr_and_add_to_set(expr: Expr, stream_var: StreamVar),
                        eval_exprs_and_add_to_map(
                          key_expr:         Expr,
                          value_expr:       Expr,
                          key_stream_var:   StreamVar,
                          value_stream_var: StreamVar
                        );

//## FIND BETTER NAME
type CondMatchAction  = cond_match_action(cond: Expr, action: FinalMatchAction);

type MatchAction      = FinalMatchAction,
                        CondMatchAction,
                        match_action(clause: Clause, action: MatchAction);



FinalMatchAction set_found_var_and_leave(EvalDestVar v) = set_found_var_and_leave(var: v);

FinalMatchAction eval_expr_and_add_to_set(Expr e, StreamVar sv) =
  eval_expr_and_add_to_set(expr: e, stream_var: sv);

FinalMatchAction eval_exprs_and_add_to_map(Expr ke, Expr ve, StreamVar ksv, StreamVar vsv) =
  eval_exprs_and_add_to_map(
    key_expr:         ke,
    value_expr:       ve,
    key_stream_var:   ksv,
    value_stream_var: vsv
  );

CondMatchAction action(Expr c, FinalMatchAction a) = cond_match_action(cond: c, action: a);

MatchAction action(Clause c, MatchAction a) = match_action(clause: c, action: a);


using
{
  Nat next_obj_var_id,
  Nat next_int_var_id,
  Nat next_bool_var_id,
  Nat next_set_it_var_id,
  Nat next_seq_it_var_id,
  Nat next_map_it_var_id,
  Nat next_vector_var_id,
  Nat next_stream_var_id;


  [Instr^] gen_code(MatchAction action, StdVar* loc_bound_vars):
    match_action()              = gen_iter_code(action.clause, loc_bound_vars, action.action),
    cond_match_action()         = gen_code_for_cond_match_action(action.cond, action.action, loc_bound_vars),
    set_found_var_and_leave()   = [set_var(action.var, obj_true), exit_block],
    eval_expr_and_add_to_set()  = gen_code_for_eval_expr_and_add_to_set(action.expr, action.stream_var),
    eval_exprs_and_add_to_map() = gen_code_for_eval_exprs_and_add_to_map(action.key_expr, action.value_expr, action.key_stream_var, action.value_stream_var);


  [Instr^] gen_code_for_cond_match_action(Expr cond, FinalMatchAction action, StdVar* loc_bound_vars)
  {
    cond_var    = lvar(next_obj_var_id);
    cond_info   = gen_eval_info(cond, cond_var, next_obj_var_id = nat(next_obj_var_id + 1));
    action_code = gen_code(action, loc_bound_vars);

    return nonempty(cond_info.eval_code & [do_if(is_true(cond_info.expr), action_code)]);
  }


  [Instr^] gen_code_for_eval_expr_and_add_to_set(Expr expr, StreamVar stream_var)
  {
    tmp_var = lvar(next_obj_var_id);
    info    = gen_eval_info(expr, tmp_var, next_obj_var_id = nat(next_obj_var_id + 1));
    return nonempty(info.eval_code & [append(stream_var, info.expr)]);
  }


  [Instr^] gen_code_for_eval_exprs_and_add_to_map(Expr key_expr, Expr value_expr, StreamVar key_stream_var, StreamVar value_stream_var)
  {
    tmp_var    = lvar(next_obj_var_id);

    key_info   = gen_eval_info(key_expr, tmp_var, next_obj_var_id = nat(next_obj_var_id + 1));
    value_info = gen_eval_info(value_expr, tmp_var, next_obj_var_id = nat(next_obj_var_id + 1));

    code = key_info.eval_code   & [append(key_stream_var, key_info.expr)] &
           value_info.eval_code & [append(value_stream_var, value_info.expr)];

    return nonempty(code);
  }


  [Instr^] gen_iter_code(Clause clause, StdVar* loc_bound_vars, MatchAction action):
    in_clause()       = gen_iter_code_for_in_clause(clause.ptrn, clause.src, loc_bound_vars, action),
    map_in_clause()   = gen_iter_code_for_map_in_clause(clause.key_ptrn, clause.value_ptrn, clause.src, loc_bound_vars, action),
    or_clause()       = nonempty(gen_iter_code(clause.left, loc_bound_vars, action) & gen_iter_code(clause.right, loc_bound_vars, action)),
    and_clause()      = gen_iter_code(clause.left, loc_bound_vars, action(clause.right, action));


  [Instr^] gen_iter_code_for_in_clause(Pattern ptrn, Expr src, StdVar* loc_bound_vars, MatchAction action)
  {
    src_var  = lvar(next_obj_var_id);
    tmp_var  = lvar(nat(next_obj_var_id + 1));
    it_var   = set_it_var(next_set_it_var_id);

    let (next_obj_var_id = nat(next_obj_var_id + 1))
      // Variables to avoid: src_var
      src_info = gen_eval_info(src, src_var);

      let (next_set_it_var_id = nat(next_set_it_var_id + 1))
        // Variables to avoid: src_var, it_var
        next_step_code = gen_code(action, loc_bound_vars & new_vars(ptrn));

        let (next_obj_var_id = nat(next_obj_var_id + 1))
          // Variables to avoid: src_var, it_var, tmp_var
          match_code = gen_ptrn_matching_code(ptrn, tmp_var, pseudotype_any, loc_bound_vars=loc_bound_vars, on_match_code=next_step_code, tag_vars=());
        ;
      ;
    ;

    body_head = [break_if(is_out_of_range(it_var)), set_var(tmp_var, get_curr_obj(it_var))];
    body_tail = [move_forward(it_var)];
    body = body_head & match_code & body_tail;
    loop_code = [get_iter(it_var, src_info.expr), repeat(nonempty(body))];

    return nonempty(src_info.eval_code & loop_code);
  }


  [Instr^] gen_iter_code_for_map_in_clause(Pattern key_ptrn, Pattern value_ptrn, Expr src, StdVar* loc_bound_vars, MatchAction action)
  {
    src_var  = lvar(next_obj_var_id);
    tmp_var  = lvar(nat(next_obj_var_id + 1));
    it_var   = map_it_var(next_map_it_var_id);

    let (next_obj_var_id = nat(next_obj_var_id + 1))
      // Variables to avoid: src_var
      src_info = gen_eval_info(src, src_var);

      let (next_map_it_var_id = nat(next_map_it_var_id + 1))
        // Variables to avoid: src_var, it_var
        next_step_code = gen_code(action, loc_bound_vars & new_vars(key_ptrn) & new_vars(value_ptrn));

        let (next_obj_var_id = nat(next_obj_var_id + 1))
          // Variables to avoid: src_var, it_var, tmp_var
          intermediate_code = gen_ptrn_matching_code(value_ptrn, tmp_var, pseudotype_any, loc_bound_vars=loc_bound_vars, on_match_code=next_step_code, tag_vars=());
          intermediate_code = nonempty([set_var(tmp_var, get_curr_value(it_var))] & intermediate_code);
          intermediate_code = gen_ptrn_matching_code(key_ptrn, tmp_var, pseudotype_any, loc_bound_vars=loc_bound_vars, on_match_code=intermediate_code, tag_vars=());
          match_and_action_code = [set_var(tmp_var, get_curr_key(it_var))] & intermediate_code;
        ;
      ;
    ;

    body_code = [break_if(is_out_of_range(it_var))] & match_and_action_code & [move_forward(it_var)];
    loop_code = [get_iter(it_var, src_info.expr), repeat(nonempty(body_code))];

    return nonempty(src_info.eval_code & loop_code);
  }
}
