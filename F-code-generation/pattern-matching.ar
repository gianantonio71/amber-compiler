using Nat next_obj_var_id
{
  [Instr] gen_ptrn_matching_code(Pattern ptrn, AtomicExpr obj, StdVar* loc_bound_vars, [Instr] on_match_code):
    ptrn_var()        = gen_ptrn_var_matching_code(ptrn.var, ptrn.ptrn, obj, loc_bound_vars, on_match_code),
    ptrn_tag_obj()    = gen_ptrn_tag_obj_matching_code(ptrn.tag, ptrn.obj, obj, loc_bound_vars, on_match_code),
    ptrn_union(ps?)   = gen_ptrn_union_matching_code(ps, obj, loc_bound_vars, on_match_code),
    ptrn_any          = on_match_code,
    _                 = [do_if(gen_ptrn_matching_expr(ptrn, obj), on_match_code)];


  [Instr] gen_ptrn_var_matching_code(StdVar var, Pattern ptrn, AtomicExpr obj, StdVar* loc_bound_vars, [Instr] on_match_code) =
    if in(var, loc_bound_vars)
      then [do_if(is_eq(obj, var), on_match_code)]
      else gen_ptrn_matching_code(ptrn, obj, loc_bound_vars, [set_var(var, obj)] & on_match_code);


  [Instr] gen_ptrn_tag_obj_matching_code(TagPtrn tag_ptrn, Pattern obj_ptrn, AtomicExpr obj, StdVar* loc_bound_vars, [Instr] on_match_code)
  {
    //## DO WE ACTUALLY NEED THIS?
    if (tag_ptrn == ptrn_symbol and obj_ptrn == ptrn_any)
      // Optimizing for the special case of a catch-all pattern
      return [do_if(is_tagged_obj(obj), on_match_code)];
    ;

    var  = lvar(next_obj_var_id);

    let (next_obj_var_id = nat(next_obj_var_id + 1))
      obj_match_code = gen_ptrn_matching_code(obj_ptrn, var, loc_bound_vars, on_match_code);
      on_tag_match_code = [set_var(var, get_inner_obj(obj))] & obj_match_code;
      tag_match_code = gen_ptrn_matching_code(tag_ptrn, var, loc_bound_vars, on_tag_match_code);
      final_code = [do_if(is_tagged_obj(obj), [set_var(var, get_tag(obj))] & tag_match_code)];
    ;

    return final_code;
  }


  [Instr] gen_ptrn_union_matching_code(Pattern+ ps, AtomicExpr obj, StdVar* loc_bound_vars, [Instr] on_match_code) =
    join([gen_ptrn_matching_code(p, obj, loc_bound_vars, on_match_code) : p <- rand_sort(ps)]);
}


BoolExpr gen_ptrn_matching_expr(Pattern ptrn, AtomicExpr obj):
  ptrn_symbol                   = is_symb(obj),
  ptrn_float                    = is_float(obj),
  ptrn_empty_set                = is_eq(obj, empty_set),
  ptrn_ne_set                   = is_ne_set(obj),
  ptrn_empty_seq                = is_eq(obj, empty_seq),
  ptrn_ne_seq                   = is_ne_seq(obj),
  ptrn_empty_map                = is_eq(obj, empty_map),
  ptrn_ne_map                   = is_ne_map(obj),
  ptrn_symbol(s?)               = is_eq(obj, s),
  ptrn_integer(integer)         = is_int(obj),
  ptrn_integer(low_ints() t?)   = and_then(is_int(obj), is_le(get_int_val(obj), t.max)),
  ptrn_integer(high_ints() t?)  = and_then(is_int(obj), is_ge(get_int_val(obj), t.min)),
  ptrn_integer(int_range() t?)  = and_then(is_int(obj), is_ge(get_int_val(obj), t.min), is_le(get_int_val(obj), max(t))),
  _                             = {fail;};
