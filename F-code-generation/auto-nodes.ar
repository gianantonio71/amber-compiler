type AutoNode     = AutoInputNode, AutoDerivedNode, AutoStateNode,
                    AutoDiscDerivedNode, AutoCondNode, AutoRepCondNode,
                    AutoTimeVaryingNode, AutoDiscTimeVaryingNode,
                    AutoNestedAutoInputNode, AutoNestedAutoNode, AutoNestedDBNode;


type AutoInputNode        = input(id: StdBlockNodeId, discrete: Bool, downstream_nodes: [BlockNodeId], level: Nat);

type AutoDerivedNode      = derived(id: StdBlockNodeId, expr: Expr, downstream_nodes: [BlockNodeId], level: Nat);

type AutoStateNode        = state(
                              id:               StdBlockNodeId,
                              exprs:            Expr*,
                              init_val:         Expr,
                              downstream_nodes: [BlockNodeId],
                              level:            Nat
                            );

type AutoDiscDerivedNode  = derived_disc(id: StdBlockNodeId, exprs: Expr*, downstream_nodes: [BlockNodeId], level: Nat);

type AutoCondNode         = cond_node(
                              id:         CondNodeId,
                              cond:       Expr,
                              parent:     Maybe[(id: CondNodeId, trigger: Bool)],
                              actions:    ([AutoNodeAction], [AutoNodeAction]),
                              subconds:   ([CondNodeId], [CondNodeId]),
                              level:      Nat
                            );

type AutoRepCondNode      = rep_cond_node(
                              id:         CondNodeId,
                              cond:       Expr,
                              parent:     Maybe[(id: CondNodeId, trigger: Bool)],
                              actions:    ([AutoNodeAction], [AutoNodeAction]),
                              subconds:   ([CondNodeId], [CondNodeId]),
                              level:      Nat
                            );

type AutoNodeAction       = state_update_action(target_var: Atom, expr_idx: Nat), //## BAD NAME, IT IS ALSO FOR SETTING DISCRETE SIGNALS
                            msg_send_action(target_db: Atom);

type AutoTimeVaryingNode  = time_varying_node(
                              id:               StdBlockNodeId,
                              cond:             Expr,
                              time_expr:        TimeExpr,
                              rule_type:        <unchanged, boolean>,
                              downstream_nodes: [BlockNodeId],
                              level:            Nat
                            );

type AutoDiscTimeVaryingNode = discrete_time_varying_node(
                                id:               StdBlockNodeId,
                                signals:          [+MembVar],
                                time_expr:        TimeExpr,
                                starts_at_time_0: Bool,
                                downstream_nodes: [BlockNodeId],
                                level:            Nat
                              );

type AutoNestedAutoInputNode  = nested_auto_input_node(
                                  id:               NestedAutoInputNodeId,
                                  value:            Expr,
                                  discrete_signals: [<MembVar, QualAutoMembVar>],
                                  level:            Nat
                                );

type AutoNestedAutoNode   = nested_auto_node(
                              id:                         StdBlockNodeId,
                              downstream_nodes_by_output: [MembVar -> [BlockNodeId]],
                              level:                      Nat
                            );

type AutoNestedDBNode   = nested_db_node(
                            id:                             StdBlockNodeId,
                            message:                        Expr,
                            downstream_nodes_by_state_var:  [<MembVar, QualDBMembVar, AnyRelVar> -> [BlockNodeId]],
                            level:                          Nat
                          );

////////////////////////////////////////////////////////////////////////////////

AutoNode input(StdBlockNodeId id, Bool d, [BlockNodeId] ns, Nat l) =
  input(id: id, discrete: d, downstream_nodes: ns, level: l);

AutoNode derived(StdBlockNodeId id, Expr e, [BlockNodeId] ns, Nat l) =
  derived(id: id, expr: e, downstream_nodes: ns, level: l);

AutoNode state(StdBlockNodeId id, Expr* es, Expr iv, [BlockNodeId] ns, Nat l) =
  state(id: id, exprs: es, init_val: iv, downstream_nodes: ns, level: l);

AutoNode derived_disc(StdBlockNodeId id, Expr* es, [BlockNodeId] ns, Nat l) =
  derived_disc(id: id, exprs: es, downstream_nodes: ns, level: l);

AutoNode cond_node(CondNodeId id, Expr c, Maybe[(id: CondNodeId, trigger: Bool)] p,
                    [AutoNodeAction] tas, [AutoNodeAction] eas, [CondNodeId] tcs, [CondNodeId] ecs, Nat l) =
  cond_node(id: id, cond: c, parent: p, actions: (tas, eas), subconds: (tcs, ecs), level: l);

AutoNode rep_cond_node(CondNodeId id, Expr c, Maybe[(id: CondNodeId, trigger: Bool)] p,
                        [AutoNodeAction] tas, [AutoNodeAction] eas, [CondNodeId] tcs, [CondNodeId] ecs, Nat l) =
  rep_cond_node(id: id, cond: c, parent: p, actions: (tas, eas), subconds: (tcs, ecs), level: l);

AutoNode time_varying_node(StdBlockNodeId id, Expr c, TimeExpr te, <unchanged, boolean> t, [BlockNodeId] ns, Nat l) =
  time_varying_node(id: id, cond: c, time_expr: te, rule_type: t, downstream_nodes: ns, level: l);

AutoDiscTimeVaryingNode discrete_time_varying_node(StdBlockNodeId id, [+MembVar] ss, TimeExpr te, Bool at0, [BlockNodeId] dns, Nat l) =
  discrete_time_varying_node(id: id, signals: ss, time_expr: te, starts_at_time_0: at0, downstream_nodes: dns, level: l);

AutoNode nested_auto_input_node(NestedAutoInputNodeId id, Expr v, [<MembVar, QualAutoMembVar>] ds, Nat l) =
  nested_auto_input_node(id: id, value: v, discrete_signals: ds, level: l);

AutoNode nested_auto_node(StdBlockNodeId id, [MembVar -> [BlockNodeId]] ns, Nat l) =
  nested_auto_node(id: id, downstream_nodes_by_output: ns, level: l);

AutoNode nested_db_node(StdBlockNodeId id, Expr m, [<MembVar, QualDBMembVar, AnyRelVar> -> [BlockNodeId]] ns, Nat l) =
  nested_db_node(id: id, message: m, downstream_nodes_by_state_var: ns, level: l);

AutoNodeAction state_update_action(Atom t, Nat i) = state_update_action(target_var: t, expr_idx: i);
AutoNodeAction msg_send_action(Atom t)            = msg_send_action(target_db: t);

////////////////////////////////////////////////////////////////////////////////

Bool needs_initial_update(AutoNode node):
  input()                       = not node.discrete,
  derived()                     = true,
  state()                       = true,
  derived_disc()                = false,
  cond_node()                   = true,
  rep_cond_node()               = true, //## SHOULDN'T THIS BE FALSE? IT IS NEVER TRIGGERED DURING THE FIRST RUN, AND IT DOESN'T REMEMBER ITS PAST
  time_varying_node()           = true,
  discrete_time_varying_node()  = true,
  nested_auto_input_node()      = true, //## NOT SURE
  nested_auto_node()            = true, //## AGAIN NOT SURE
  nested_db_node()              = false;


Bool must_always_be_recalculated(AutoNode node):
  rep_cond_node()   = node.subconds != ([], []),
  _                 = false;

////////////////////////////////////////////////////////////////////////////////

[BlockNodeId] downstream_nodes_ids(AutoNode node):
  input()                       |
  derived()                     |
  state()                       |
  derived_disc()                |
  time_varying_node()           |
  discrete_time_varying_node()  = node.downstream_nodes,
  cond_node()                   = { tas, eas = node.actions;
                                    tscs, escs = node.subconds;
                                    return [downstream_node_id(a) : a <- tas & eas] & tscs & escs;
                                  },
  rep_cond_node()               = { tas, eas = node.actions;
                                    tscs, escs = node.subconds;
                                    return [downstream_node_id(a) : a <- tas & eas] & tscs & escs;
                                  },
  nested_auto_input_node()      = [std_block_node_id(node.id.auto)],
  nested_auto_node()            = union(values(node.downstream_nodes_by_output)),
  nested_db_node()              = union(values(node.downstream_nodes_by_state_var));


BlockNodeId downstream_node_id(AutoNodeAction action):
  state_update_action() = std_block_node_id(action.target_var),
  msg_send_action()     = std_block_node_id(action.target_db);

////////////////////////////////////////////////////////////////////////////////

[(MembBoolVar, Bool)] memb_bool_vars(AutoNode node)
{
  cond_vars = match (node)
    cond_node() = cond_vars(get_inner_id(node.id)),
    _           = [];

  expr_cond_vars = match (node)
    cond_node()         = if node.parent != nil then expr_cond_vars(get_inner_id(node.id)) else [],
    time_varying_node() = [(watched_signal_up_to_date_var(get_inner_id(node.id)),  false)],
    _                   = [];

  up_to_date_var = (up_to_date_var(node.id), not needs_initial_update(node));

  return [up_to_date_var] & cond_vars & expr_cond_vars;


  [(MembBoolVar, Bool)] cond_vars(Nat bare_id) = [
    (cond_value_var(bare_id),   false);
    (cond_is_def_var(bare_id),  true)
  ];

  [(MembBoolVar, Bool)] expr_cond_vars(Nat bare_id) = [
    (cond_expr_value_var(bare_id),      false);
    (cond_expr_is_def_var(bare_id),     true);
    (cond_expr_up_to_date_var(bare_id), false)
  ];
}


[(MembIntVar, Int)] memb_int_vars(AutoNode node)
{
  update_source_vars = match (node)
    state()             = { init_val_idx = index_first(node.init_val, node.exprs);
                            return [(update_source_var(get_inner_id(node.id)), init_val_idx)];
                          },
    derived_disc()      = [(update_source_var(get_inner_id(node.id)), -1)],
    _                   = [];

  time_vars = match (node)
    time_varying_node()           |
    discrete_time_varying_node()  = { bare_id = get_inner_id(node.id);
                                      return [
                                        (next_trigger_time_var(bare_id),  -1);
                                        (curr_time_slot_var(bare_id),     -1)
                                      ];
                                    },
    _                             = [];

  return update_source_vars & time_vars;
}


[(<MembVar, MembObjVar, PendingInputVar, PendingStateVar>, <blank, undefined>)] memb_obj_vars(AutoNode node):
  input()                       = { bare_id = get_inner_id(node.id);
                                    return [
                                      (memb_var(bare_id),           :blank);
                                      (pending_input_var(bare_id),  if node.discrete then :blank else :undefined)
                                    ];
                                  },
  derived()                     = [(memb_var(get_inner_id(node.id)), :blank)],
  state()                       = [(memb_var(get_inner_id(node.id)), :blank)],
  derived_disc()                = [(memb_var(get_inner_id(node.id)), :blank)],
  cond_node()                   = [],
  rep_cond_node()               = [],
  time_varying_node()           = { bare_id = get_inner_id(node.id);
                                    return [
                                      (memb_var(bare_id),                 :blank);
                                      (watched_signal_value_var(bare_id), :blank)
                                    ];
                                  },
  discrete_time_varying_node()  = [(memb_var(get_inner_id(node.id)), :blank)],
  nested_auto_input_node()      = [],
  nested_auto_node()            = [],
  nested_db_node()              = [];
